// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.4.5
// timestamp : Thu May 20 05:32:05 2021 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv-ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv-ctg/sample_cgfs/rv64i_k.cgf \
//                  --base-isa rv64i \
//                  --randomize
// -----------
//
// -----------
// Copyright (c) 2021. Indian Institute of Technology Madras. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the aes64ks1i instruction of the RISC-V  extension for the aes64ks1i covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IK")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*RV64.*I.*K.*);def TEST_CASE_1=True;",aes64ks1i)

RVTEST_CASE(1,"//check ISA:=regex(.*64.*);check ISA:=regex(.*RV64.*I.*ZKn.*);def TEST_CASE_1=True;",aes64ks1i)

RVTEST_CASE(2,"//check ISA:=regex(.*64.*);check ISA:=regex(.*RV64.*I.*ZKne.*);def TEST_CASE_1=True;",aes64ks1i)

RVTEST_SIGBASE( x3,signature_x3_1)

inst_0:
// rs1 != rd, rs1==x13, rd==x5, rs1_val == 0x75a3adb3254a9493 and imm_val == 0x2 
// opcode: aes64ks1i ; op1:x13; dest:x5; op1val:0x75a3adb3254a9493;  immval:0x2
TEST_IMM_OP( aes64ks1i, x5, x13, 0x0000000000000000, 0x75a3adb3254a9493, 0x2, x3, 0, x10)

inst_1:
// rs1 == rd, rs1==x25, rd==x25, rs1_val == 0x71fad878b369e102 and imm_val == 0x0 
// opcode: aes64ks1i ; op1:x25; dest:x25; op1val:0x71fad878b369e102;  immval:0x0
TEST_IMM_OP( aes64ks1i, x25, x25, 0x0000000000000000, 0x71fad878b369e102, 0x0, x3, 8, x10)

inst_2:
// rs1==x16, rd==x13, rs1_val == 0xa4b7f979a8e45869 and imm_val == 0x0 
// opcode: aes64ks1i ; op1:x16; dest:x13; op1val:0xa4b7f979a8e45869;  immval:0x0
TEST_IMM_OP( aes64ks1i, x13, x16, 0x0000000000000000, 0xa4b7f979a8e45869, 0x0, x3, 16, x10)

inst_3:
// rs1==x2, rd==x4, rs1_val == 0x0b3fd605358a9235 and imm_val == 0x1 
// opcode: aes64ks1i ; op1:x2; dest:x4; op1val:0xb3fd605358a9235;  immval:0x1
TEST_IMM_OP( aes64ks1i, x4, x2, 0x0000000000000000, 0xb3fd605358a9235, 0x1, x3, 24, x10)

inst_4:
// rs1==x1, rd==x14, rs1_val == 0xb0873a0f0334fcca and imm_val == 0x7 
// opcode: aes64ks1i ; op1:x1; dest:x14; op1val:0xb0873a0f0334fcca;  immval:0x7
TEST_IMM_OP( aes64ks1i, x14, x1, 0x0000000000000000, 0xb0873a0f0334fcca, 0x7, x3, 32, x10)

inst_5:
// rs1==x20, rd==x19, rs1_val == 0x5b730cad91766f62 and imm_val == 0x7 
// opcode: aes64ks1i ; op1:x20; dest:x19; op1val:0x5b730cad91766f62;  immval:0x7
TEST_IMM_OP( aes64ks1i, x19, x20, 0x0000000000000000, 0x5b730cad91766f62, 0x7, x3, 40, x10)

inst_6:
// rs1==x12, rd==x28, rs1_val == 0xb7c1fc5f1efa1095 and imm_val == 0x3 
// opcode: aes64ks1i ; op1:x12; dest:x28; op1val:0xb7c1fc5f1efa1095;  immval:0x3
TEST_IMM_OP( aes64ks1i, x28, x12, 0x0000000000000000, 0xb7c1fc5f1efa1095, 0x3, x3, 48, x10)

inst_7:
// rs1==x8, rd==x15, rs1_val == 0x25ae27ee4113ee60 and imm_val == 0x5 
// opcode: aes64ks1i ; op1:x8; dest:x15; op1val:0x25ae27ee4113ee60;  immval:0x5
TEST_IMM_OP( aes64ks1i, x15, x8, 0x0000000000000000, 0x25ae27ee4113ee60, 0x5, x3, 56, x10)

inst_8:
// rs1==x0, rd==x6, rs1_val == 0xe3f4fca319f046a5 and imm_val == 0x6 
// opcode: aes64ks1i ; op1:x0; dest:x6; op1val:0x0;  immval:0x6
TEST_IMM_OP( aes64ks1i, x6, x0, 0x0000000000000000, 0x0, 0x6, x3, 64, x10)

inst_9:
// rs1==x29, rd==x21, rs1_val == 0xff9a1b805ced7e2e and imm_val == 0x6 
// opcode: aes64ks1i ; op1:x29; dest:x21; op1val:0xff9a1b805ced7e2e;  immval:0x6
TEST_IMM_OP( aes64ks1i, x21, x29, 0x0000000000000000, 0xff9a1b805ced7e2e, 0x6, x3, 72, x10)

inst_10:
// rs1==x26, rd==x30, rs1_val == 0x9722c9a6b0942992 and imm_val == 0x5 
// opcode: aes64ks1i ; op1:x26; dest:x30; op1val:0x9722c9a6b0942992;  immval:0x5
TEST_IMM_OP( aes64ks1i, x30, x26, 0x0000000000000000, 0x9722c9a6b0942992, 0x5, x3, 80, x10)

inst_11:
// rs1==x23, rd==x27, rs1_val == 0x9bedfe390d6ddd9d and imm_val == 0x4 
// opcode: aes64ks1i ; op1:x23; dest:x27; op1val:0x9bedfe390d6ddd9d;  immval:0x4
TEST_IMM_OP( aes64ks1i, x27, x23, 0x0000000000000000, 0x9bedfe390d6ddd9d, 0x4, x3, 88, x10)

inst_12:
// rs1==x31, rd==x29, rs1_val == 0xd75739f82ac177c6 and imm_val == 0x3 
// opcode: aes64ks1i ; op1:x31; dest:x29; op1val:0xd75739f82ac177c6;  immval:0x3
TEST_IMM_OP( aes64ks1i, x29, x31, 0x0000000000000000, 0xd75739f82ac177c6, 0x3, x3, 96, x10)

inst_13:
// rs1==x19, rd==x22, rs1_val == 0x90efb625d9fbcdb5 and imm_val == 0x3 
// opcode: aes64ks1i ; op1:x19; dest:x22; op1val:0x90efb625d9fbcdb5;  immval:0x3
TEST_IMM_OP( aes64ks1i, x22, x19, 0x0000000000000000, 0x90efb625d9fbcdb5, 0x3, x3, 104, x10)

inst_14:
// rs1==x24, rd==x18, rs1_val == 0x60067d39d169a3f8 and imm_val == 0x1 
// opcode: aes64ks1i ; op1:x24; dest:x18; op1val:0x60067d39d169a3f8;  immval:0x1
TEST_IMM_OP( aes64ks1i, x18, x24, 0x0000000000000000, 0x60067d39d169a3f8, 0x1, x3, 112, x10)

inst_15:
// rs1==x6, rd==x26, rs1_val == 0xd5b9fe5cf69bdcf3 and imm_val == 0x6 
// opcode: aes64ks1i ; op1:x6; dest:x26; op1val:0xd5b9fe5cf69bdcf3;  immval:0x6
TEST_IMM_OP( aes64ks1i, x26, x6, 0x0000000000000000, 0xd5b9fe5cf69bdcf3, 0x6, x3, 120, x10)

inst_16:
// rs1==x14, rd==x2, rs1_val == 0x58d548aae4921bf7 and imm_val == 0x6 
// opcode: aes64ks1i ; op1:x14; dest:x2; op1val:0x58d548aae4921bf7;  immval:0x6
TEST_IMM_OP( aes64ks1i, x2, x14, 0x0000000000000000, 0x58d548aae4921bf7, 0x6, x3, 128, x10)

inst_17:
// rs1==x28, rd==x9, rs1_val == 0x2daf9ac7f5faf207 and imm_val == 0x3 
// opcode: aes64ks1i ; op1:x28; dest:x9; op1val:0x2daf9ac7f5faf207;  immval:0x3
TEST_IMM_OP( aes64ks1i, x9, x28, 0x0000000000000000, 0x2daf9ac7f5faf207, 0x3, x3, 136, x10)

inst_18:
// rs1==x7, rd==x0, rs1_val == 0x3acdf61655d98c6e and imm_val == 0x3 
// opcode: aes64ks1i ; op1:x7; dest:x0; op1val:0x3acdf61655d98c6e;  immval:0x3
TEST_IMM_OP( aes64ks1i, x0, x7, 0x0000000000000000, 0x3acdf61655d98c6e, 0x3, x3, 144, x10)

inst_19:
// rs1==x30, rd==x10, rs1_val == 0x436f40f274b8de87 and imm_val == 0x3 
// opcode: aes64ks1i ; op1:x30; dest:x10; op1val:0x436f40f274b8de87;  immval:0x3
TEST_IMM_OP( aes64ks1i, x10, x30, 0x0000000000000000, 0x436f40f274b8de87, 0x3, x3, 152, x6)
RVTEST_SIGBASE( x2,signature_x2_0)

inst_20:
// rs1==x11, rd==x7, 
// opcode: aes64ks1i ; op1:x11; dest:x7; op1val:0x0;  immval:0x0
TEST_IMM_OP( aes64ks1i, x7, x11, 0x0000000000000000, 0x0, 0x0, x2, 0, x6)

inst_21:
// rs1==x3, rd==x1, 
// opcode: aes64ks1i ; op1:x3; dest:x1; op1val:0x0;  immval:0x0
TEST_IMM_OP( aes64ks1i, x1, x3, 0x0000000000000000, 0x0, 0x0, x2, 8, x6)

inst_22:
// rs1==x18, rd==x24, 
// opcode: aes64ks1i ; op1:x18; dest:x24; op1val:0x0;  immval:0x0
TEST_IMM_OP( aes64ks1i, x24, x18, 0x0000000000000000, 0x0, 0x0, x2, 16, x6)

inst_23:
// rs1==x21, rd==x31, 
// opcode: aes64ks1i ; op1:x21; dest:x31; op1val:0x0;  immval:0x0
TEST_IMM_OP( aes64ks1i, x31, x21, 0x0000000000000000, 0x0, 0x0, x2, 24, x6)

inst_24:
// rs1==x22, rd==x11, 
// opcode: aes64ks1i ; op1:x22; dest:x11; op1val:0x0;  immval:0x0
TEST_IMM_OP( aes64ks1i, x11, x22, 0x0000000000000000, 0x0, 0x0, x2, 32, x6)

inst_25:
// rs1==x17, rd==x23, 
// opcode: aes64ks1i ; op1:x17; dest:x23; op1val:0x0;  immval:0x0
TEST_IMM_OP( aes64ks1i, x23, x17, 0x0000000000000000, 0x0, 0x0, x2, 40, x6)

inst_26:
// rs1==x27, rd==x3, 
// opcode: aes64ks1i ; op1:x27; dest:x3; op1val:0x0;  immval:0x0
TEST_IMM_OP( aes64ks1i, x3, x27, 0x0000000000000000, 0x0, 0x0, x2, 48, x6)

inst_27:
// rs1==x4, rd==x8, 
// opcode: aes64ks1i ; op1:x4; dest:x8; op1val:0x0;  immval:0x0
TEST_IMM_OP( aes64ks1i, x8, x4, 0x0000000000000000, 0x0, 0x0, x2, 56, x6)

inst_28:
// rs1==x15, rd==x20, 
// opcode: aes64ks1i ; op1:x15; dest:x20; op1val:0x0;  immval:0x0
TEST_IMM_OP( aes64ks1i, x20, x15, 0x0000000000000000, 0x0, 0x0, x2, 64, x6)

inst_29:
// rs1==x5, rd==x16, 
// opcode: aes64ks1i ; op1:x5; dest:x16; op1val:0x0;  immval:0x0
TEST_IMM_OP( aes64ks1i, x16, x5, 0x0000000000000000, 0x0, 0x0, x2, 72, x6)

inst_30:
// rs1==x10, rd==x12, 
// opcode: aes64ks1i ; op1:x10; dest:x12; op1val:0x0;  immval:0x0
TEST_IMM_OP( aes64ks1i, x12, x10, 0x0000000000000000, 0x0, 0x0, x2, 80, x6)

inst_31:
// rs1==x9, rd==x17, 
// opcode: aes64ks1i ; op1:x9; dest:x17; op1val:0x0;  immval:0x0
TEST_IMM_OP( aes64ks1i, x17, x9, 0x0000000000000000, 0x0, 0x0, x2, 88, x6)

inst_32:
// rs1_val == 0xe3f4fca319f046a5 and imm_val == 0x6 
// opcode: aes64ks1i ; op1:x10; dest:x11; op1val:0xe3f4fca319f046a5;  immval:0x6
TEST_IMM_OP( aes64ks1i, x11, x10, 0x0000000000000000, 0xe3f4fca319f046a5, 0x6, x2, 96, x6)

inst_33:
// rs1_val == 0x3acdf61655d98c6e and imm_val == 0x3 
// opcode: aes64ks1i ; op1:x10; dest:x11; op1val:0x3acdf61655d98c6e;  immval:0x3
TEST_IMM_OP( aes64ks1i, x11, x10, 0x0000000000000000, 0x3acdf61655d98c6e, 0x3, x2, 104, x6)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x3_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x3_1:
    .fill 20*(XLEN/32),4,0xdeadbeef


signature_x2_0:
    .fill 14*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
