// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.4.5
// timestamp : Thu May 20 05:32:05 2021 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv-ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv-ctg/sample_cgfs/rv64i_k.cgf \
//                  --base-isa rv64i \
//                  --randomize
// -----------
//
// -----------
// Copyright (c) 2021. Indian Institute of Technology Madras. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the unshfli instruction of the RISC-V  extension for the unzip covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64I")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",unzip)

RVTEST_CASE(1,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*ZKs.*);def TEST_CASE_1=True;",unzip)

RVTEST_CASE(2,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*ZKn.*);def TEST_CASE_1=True;",unzip)

RVTEST_CASE(3,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*ZKb.*);def TEST_CASE_1=True;",unzip)

RVTEST_SIGBASE( x9,signature_x9_1)

inst_0:
// rs1 != rd, rs1==x23, rd==x3, rs1_val == 0xFFFFFFFFFFFFFFFF 
// opcode: unshfli ; op1:x23; dest:x3; op1val:0xffffffffffffffff;
li x23, 0xffffffffffffffff
unshfli x3, x23, 15
sw x3, 0(x9)
RVMODEL_IO_ASSERT_GPR_EQ(x4, x3, 0x0000000000000000)

inst_1:
// rs1 == rd, rs1==x6, rd==x6, rs1_val == 0x0000000000000000 
// opcode: unshfli ; op1:x6; dest:x6; op1val:0x0;
li x6, 0x0
unshfli x6, x6, 15
sw x6, 8(x9)
RVMODEL_IO_ASSERT_GPR_EQ(x4, x6, 0x0000000000000000)

inst_2:
// rs1==x21, rd==x16, rs1_val == 0x8000000000000000 
// opcode: unshfli ; op1:x21; dest:x16; op1val:0x8000000000000000;
li x21, 0x8000000000000000
unshfli x16, x21, 15
sw x16, 16(x9)
RVMODEL_IO_ASSERT_GPR_EQ(x4, x16, 0x0000000000000000)

inst_3:
// rs1==x10, rd==x1, rs1_val == 0xC000000000000000 
// opcode: unshfli ; op1:x10; dest:x1; op1val:0xc000000000000000;
li x10, 0xc000000000000000
unshfli x1, x10, 15
sw x1, 24(x9)
RVMODEL_IO_ASSERT_GPR_EQ(x4, x1, 0x0000000000000000)

inst_4:
// rs1==x31, rd==x29, rs1_val == 0xA000000000000000 
// opcode: unshfli ; op1:x31; dest:x29; op1val:0xa000000000000000;
li x31, 0xa000000000000000
unshfli x29, x31, 15
sw x29, 32(x9)
RVMODEL_IO_ASSERT_GPR_EQ(x4, x29, 0x0000000000000000)

inst_5:
// rs1==x17, rd==x31, rs1_val == 0x9000000000000000 
// opcode: unshfli ; op1:x17; dest:x31; op1val:0x9000000000000000;
li x17, 0x9000000000000000
unshfli x31, x17, 15
sw x31, 40(x9)
RVMODEL_IO_ASSERT_GPR_EQ(x4, x31, 0x0000000000000000)

inst_6:
// rs1==x18, rd==x22, rs1_val == 0x0800000000000000 
// opcode: unshfli ; op1:x18; dest:x22; op1val:0x800000000000000;
li x18, 0x800000000000000
unshfli x22, x18, 15
sw x22, 48(x9)
RVMODEL_IO_ASSERT_GPR_EQ(x4, x22, 0x0000000000000000)

inst_7:
// rs1==x26, rd==x2, rs1_val == 0x2C00000000000000 
// opcode: unshfli ; op1:x26; dest:x2; op1val:0x2c00000000000000;
li x26, 0x2c00000000000000
unshfli x2, x26, 15
sw x2, 56(x9)
RVMODEL_IO_ASSERT_GPR_EQ(x4, x2, 0x0000000000000000)

inst_8:
// rs1==x28, rd==x27, rs1_val == 0x9600000000000000 
// opcode: unshfli ; op1:x28; dest:x27; op1val:0x9600000000000000;
li x28, 0x9600000000000000
unshfli x27, x28, 15
sw x27, 64(x9)
RVMODEL_IO_ASSERT_GPR_EQ(x4, x27, 0x0000000000000000)

inst_9:
// rs1==x22, rd==x0, rs1_val == 0x0100000000000000 
// opcode: unshfli ; op1:x22; dest:x0; op1val:0x100000000000000;
li x22, 0x100000000000000
unshfli x0, x22, 15
sw x0, 72(x9)
RVMODEL_IO_ASSERT_GPR_EQ(x4, x0, 0x0000000000000000)

inst_10:
// rs1==x2, rd==x28, rs1_val == 0x9480000000000000 
// opcode: unshfli ; op1:x2; dest:x28; op1val:0x9480000000000000;
li x2, 0x9480000000000000
unshfli x28, x2, 15
sw x28, 80(x9)
RVMODEL_IO_ASSERT_GPR_EQ(x4, x28, 0x0000000000000000)

inst_11:
// rs1==x19, rd==x17, rs1_val == 0xB5C0000000000000 
// opcode: unshfli ; op1:x19; dest:x17; op1val:0xb5c0000000000000;
li x19, 0xb5c0000000000000
unshfli x17, x19, 15
sw x17, 88(x9)
RVMODEL_IO_ASSERT_GPR_EQ(x4, x17, 0x0000000000000000)

inst_12:
// rs1==x30, rd==x10, rs1_val == 0x07A0000000000000 
// opcode: unshfli ; op1:x30; dest:x10; op1val:0x7a0000000000000;
li x30, 0x7a0000000000000
unshfli x10, x30, 15
sw x10, 96(x9)
RVMODEL_IO_ASSERT_GPR_EQ(x4, x10, 0x0000000000000000)

inst_13:
// rs1==x12, rd==x7, rs1_val == 0x77B0000000000000 
// opcode: unshfli ; op1:x12; dest:x7; op1val:0x77b0000000000000;
li x12, 0x77b0000000000000
unshfli x7, x12, 15
sw x7, 104(x9)
RVMODEL_IO_ASSERT_GPR_EQ(x4, x7, 0x0000000000000000)

inst_14:
// rs1==x20, rd==x24, rs1_val == 0xF128000000000000 
// opcode: unshfli ; op1:x20; dest:x24; op1val:0xf128000000000000;
li x20, 0xf128000000000000
unshfli x24, x20, 15
sw x24, 112(x9)
RVMODEL_IO_ASSERT_GPR_EQ(x4, x24, 0x0000000000000000)

inst_15:
// rs1==x13, rd==x8, rs1_val == 0xC0E4000000000000 
// opcode: unshfli ; op1:x13; dest:x8; op1val:0xc0e4000000000000;
li x13, 0xc0e4000000000000
unshfli x8, x13, 15
sw x8, 120(x9)
RVMODEL_IO_ASSERT_GPR_EQ(x4, x8, 0x0000000000000000)

inst_16:
// rs1==x25, rd==x23, rs1_val == 0xDC52000000000000 
// opcode: unshfli ; op1:x25; dest:x23; op1val:0xdc52000000000000;
li x25, 0xdc52000000000000
unshfli x23, x25, 15
sw x23, 128(x9)
RVMODEL_IO_ASSERT_GPR_EQ(x4, x23, 0x0000000000000000)

inst_17:
// rs1==x11, rd==x5, rs1_val == 0x0B3D000000000000 
// opcode: unshfli ; op1:x11; dest:x5; op1val:0xb3d000000000000;
li x11, 0xb3d000000000000
unshfli x5, x11, 15
sw x5, 136(x9)
RVMODEL_IO_ASSERT_GPR_EQ(x4, x5, 0x0000000000000000)

inst_18:
// rs1==x7, rd==x13, rs1_val == 0xB154800000000000 
// opcode: unshfli ; op1:x7; dest:x13; op1val:0xb154800000000000;
li x7, 0xb154800000000000
unshfli x13, x7, 15
sw x13, 144(x9)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x13, 0x0000000000000000)

inst_19:
// rs1==x3, rd==x19, rs1_val == 0x2609C00000000000 
// opcode: unshfli ; op1:x3; dest:x19; op1val:0x2609c00000000000;
li x3, 0x2609c00000000000
unshfli x19, x3, 15
sw x19, 152(x9)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x19, 0x0000000000000000)

inst_20:
// rs1==x4, rd==x20, rs1_val == 0xCF5BE00000000000 
// opcode: unshfli ; op1:x4; dest:x20; op1val:0xcf5be00000000000;
li x4, 0xcf5be00000000000
unshfli x20, x4, 15
sw x20, 160(x9)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x20, 0x0000000000000000)
RVTEST_SIGBASE( x2,signature_x2_0)

inst_21:
// rs1==x16, rd==x21, rs1_val == 0x3ED0700000000000 
// opcode: unshfli ; op1:x16; dest:x21; op1val:0x3ed0700000000000;
li x16, 0x3ed0700000000000
unshfli x21, x16, 15
sw x21, 0(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x21, 0x0000000000000000)

inst_22:
// rs1==x14, rd==x11, rs1_val == 0x6BDED80000000000 
// opcode: unshfli ; op1:x14; dest:x11; op1val:0x6bded80000000000;
li x14, 0x6bded80000000000
unshfli x11, x14, 15
sw x11, 8(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_23:
// rs1==x5, rd==x26, rs1_val == 0x4637640000000000 
// opcode: unshfli ; op1:x5; dest:x26; op1val:0x4637640000000000;
li x5, 0x4637640000000000
unshfli x26, x5, 15
sw x26, 16(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x26, 0x0000000000000000)

inst_24:
// rs1==x8, rd==x18, rs1_val == 0x7239560000000000 
// opcode: unshfli ; op1:x8; dest:x18; op1val:0x7239560000000000;
li x8, 0x7239560000000000
unshfli x18, x8, 15
sw x18, 24(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x18, 0x0000000000000000)

inst_25:
// rs1==x29, rd==x15, rs1_val == 0x8864C10000000000 
// opcode: unshfli ; op1:x29; dest:x15; op1val:0x8864c10000000000;
li x29, 0x8864c10000000000
unshfli x15, x29, 15
sw x15, 32(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x15, 0x0000000000000000)

inst_26:
// rs1==x1, rd==x9, rs1_val == 0x68C7D88000000000 
// opcode: unshfli ; op1:x1; dest:x9; op1val:0x68c7d88000000000;
li x1, 0x68c7d88000000000
unshfli x9, x1, 15
sw x9, 40(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x9, 0x0000000000000000)

inst_27:
// rs1==x9, rd==x25, rs1_val == 0xF52BF0C000000000 
// opcode: unshfli ; op1:x9; dest:x25; op1val:0xf52bf0c000000000;
li x9, 0xf52bf0c000000000
unshfli x25, x9, 15
sw x25, 48(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x25, 0x0000000000000000)

inst_28:
// rs1==x24, rd==x14, rs1_val == 0xA4AFB46000000000 
// opcode: unshfli ; op1:x24; dest:x14; op1val:0xa4afb46000000000;
li x24, 0xa4afb46000000000
unshfli x14, x24, 15
sw x14, 56(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x14, 0x0000000000000000)

inst_29:
// rs1==x27, rd==x4, rs1_val == 0x263BEA5000000000 
// opcode: unshfli ; op1:x27; dest:x4; op1val:0x263bea5000000000;
li x27, 0x263bea5000000000
unshfli x4, x27, 15
sw x4, 64(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x4, 0x0000000000000000)

inst_30:
// rs1==x0, rd==x30, rs1_val == 0x4EE5BCE800000000 
// opcode: unshfli ; op1:x0; dest:x30; op1val:0x0;
li x0, 0x0
unshfli x30, x0, 15
sw x30, 72(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x30, 0x0000000000000000)

inst_31:
// rs1==x15, rd==x12, rs1_val == 0x7C5DE60C00000000 
// opcode: unshfli ; op1:x15; dest:x12; op1val:0x7c5de60c00000000;
li x15, 0x7c5de60c00000000
unshfli x12, x15, 15
sw x12, 80(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x12, 0x0000000000000000)

inst_32:
// rs1_val == 0xA005556A00000000 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0xa005556a00000000;
li x10, 0xa005556a00000000
unshfli x11, x10, 15
sw x11, 88(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_33:
// rs1_val == 0x2293EA2900000000 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0x2293ea2900000000;
li x10, 0x2293ea2900000000
unshfli x11, x10, 15
sw x11, 96(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_34:
// rs1_val == 0x362BA25E80000000 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0x362ba25e80000000;
li x10, 0x362ba25e80000000
unshfli x11, x10, 15
sw x11, 104(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_35:
// rs1_val == 0x4733A71E40000000 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0x4733a71e40000000;
li x10, 0x4733a71e40000000
unshfli x11, x10, 15
sw x11, 112(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_36:
// rs1_val == 0x1E4B791A20000000 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0x1e4b791a20000000;
li x10, 0x1e4b791a20000000
unshfli x11, x10, 15
sw x11, 120(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_37:
// rs1_val == 0x5FCB4D02D0000000 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0x5fcb4d02d0000000;
li x10, 0x5fcb4d02d0000000
unshfli x11, x10, 15
sw x11, 128(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_38:
// rs1_val == 0x98BA52AA88000000 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0x98ba52aa88000000;
li x10, 0x98ba52aa88000000
unshfli x11, x10, 15
sw x11, 136(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_39:
// rs1_val == 0xEE0923E014000000 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0xee0923e014000000;
li x10, 0xee0923e014000000
unshfli x11, x10, 15
sw x11, 144(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_40:
// rs1_val == 0x4BD47F4A3A000000 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0x4bd47f4a3a000000;
li x10, 0x4bd47f4a3a000000
unshfli x11, x10, 15
sw x11, 152(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_41:
// rs1_val == 0xB30F8F95F1000000 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0xb30f8f95f1000000;
li x10, 0xb30f8f95f1000000
unshfli x11, x10, 15
sw x11, 160(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_42:
// rs1_val == 0x398261A02E800000 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0x398261a02e800000;
li x10, 0x398261a02e800000
unshfli x11, x10, 15
sw x11, 168(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_43:
// rs1_val == 0x0AF5E9EFD7C00000 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0xaf5e9efd7c00000;
li x10, 0xaf5e9efd7c00000
unshfli x11, x10, 15
sw x11, 176(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_44:
// rs1_val == 0x4BCCF299A5E00000 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0x4bccf299a5e00000;
li x10, 0x4bccf299a5e00000
unshfli x11, x10, 15
sw x11, 184(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_45:
// rs1_val == 0xAFF56459AFF00000 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0xaff56459aff00000;
li x10, 0xaff56459aff00000
unshfli x11, x10, 15
sw x11, 192(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_46:
// rs1_val == 0xE07D7EDD48F80000 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0xe07d7edd48f80000;
li x10, 0xe07d7edd48f80000
unshfli x11, x10, 15
sw x11, 200(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_47:
// rs1_val == 0x26604C6677840000 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0x26604c6677840000;
li x10, 0x26604c6677840000
unshfli x11, x10, 15
sw x11, 208(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_48:
// rs1_val == 0x5F67A33C644A0000 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0x5f67a33c644a0000;
li x10, 0x5f67a33c644a0000
unshfli x11, x10, 15
sw x11, 216(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_49:
// rs1_val == 0xCC710F0F1C6B0000 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0xcc710f0f1c6b0000;
li x10, 0xcc710f0f1c6b0000
unshfli x11, x10, 15
sw x11, 224(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_50:
// rs1_val == 0x86BA73F6EC348000 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0x86ba73f6ec348000;
li x10, 0x86ba73f6ec348000
unshfli x11, x10, 15
sw x11, 232(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_51:
// rs1_val == 0x51EACA62967E4000 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0x51eaca62967e4000;
li x10, 0x51eaca62967e4000
unshfli x11, x10, 15
sw x11, 240(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_52:
// rs1_val == 0xD52F0E14EDC96000 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0xd52f0e14edc96000;
li x10, 0xd52f0e14edc96000
unshfli x11, x10, 15
sw x11, 248(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_53:
// rs1_val == 0x0DBD625329043000 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0xdbd625329043000;
li x10, 0xdbd625329043000
unshfli x11, x10, 15
sw x11, 256(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_54:
// rs1_val == 0x6DCF0D4A62B5D800 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0x6dcf0d4a62b5d800;
li x10, 0x6dcf0d4a62b5d800
unshfli x11, x10, 15
sw x11, 264(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_55:
// rs1_val == 0xB4B31E3B962C1C00 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0xb4b31e3b962c1c00;
li x10, 0xb4b31e3b962c1c00
unshfli x11, x10, 15
sw x11, 272(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_56:
// rs1_val == 0x8DCD6133F22D6600 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0x8dcd6133f22d6600;
li x10, 0x8dcd6133f22d6600
unshfli x11, x10, 15
sw x11, 280(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_57:
// rs1_val == 0x45AF1CB0CAAE1D00 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0x45af1cb0caae1d00;
li x10, 0x45af1cb0caae1d00
unshfli x11, x10, 15
sw x11, 288(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_58:
// rs1_val == 0xE86EB367B97C2C80 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0xe86eb367b97c2c80;
li x10, 0xe86eb367b97c2c80
unshfli x11, x10, 15
sw x11, 296(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_59:
// rs1_val == 0x2D9BE3118A013740 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0x2d9be3118a013740;
li x10, 0x2d9be3118a013740
unshfli x11, x10, 15
sw x11, 304(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_60:
// rs1_val == 0x70F53C4BFDFD2260 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0x70f53c4bfdfd2260;
li x10, 0x70f53c4bfdfd2260
unshfli x11, x10, 15
sw x11, 312(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_61:
// rs1_val == 0xF22A27B02C7BFF30 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0xf22a27b02c7bff30;
li x10, 0xf22a27b02c7bff30
unshfli x11, x10, 15
sw x11, 320(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_62:
// rs1_val == 0x0D99CFF9240BA738 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0xd99cff9240ba738;
li x10, 0xd99cff9240ba738
unshfli x11, x10, 15
sw x11, 328(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_63:
// rs1_val == 0x662E236EAA6781EC 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0x662e236eaa6781ec;
li x10, 0x662e236eaa6781ec
unshfli x11, x10, 15
sw x11, 336(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_64:
// rs1_val == 0x0EEA3A9950A03C5A 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0xeea3a9950a03c5a;
li x10, 0xeea3a9950a03c5a
unshfli x11, x10, 15
sw x11, 344(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_65:
// rs1_val == 0x44DCDA6A797D76DF 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0x44dcda6a797d76df;
li x10, 0x44dcda6a797d76df
unshfli x11, x10, 15
sw x11, 352(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_66:
// rs1_val == 0x39935C590B0FB71C 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0x39935c590b0fb71c;
li x10, 0x39935c590b0fb71c
unshfli x11, x10, 15
sw x11, 360(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_67:
// rs1_val == 0xDE14BFF2EED7A249 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0xde14bff2eed7a249;
li x10, 0xde14bff2eed7a249
unshfli x11, x10, 15
sw x11, 368(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_68:
// rs1_val == 0x6C9FEE24B808A67B 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0x6c9fee24b808a67b;
li x10, 0x6c9fee24b808a67b
unshfli x11, x10, 15
sw x11, 376(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_69:
// rs1_val == 0x008EEF6A63C2A497 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0x8eef6a63c2a497;
li x10, 0x8eef6a63c2a497
unshfli x11, x10, 15
sw x11, 384(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_70:
// rs1_val == 0x76B1FD3DF423752F 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0x76b1fd3df423752f;
li x10, 0x76b1fd3df423752f
unshfli x11, x10, 15
sw x11, 392(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_71:
// rs1_val == 0xA10BC6CCA6B7201F 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0xa10bc6cca6b7201f;
li x10, 0xa10bc6cca6b7201f
unshfli x11, x10, 15
sw x11, 400(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_72:
// rs1_val == 0x6E2D704512C233BF 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0x6e2d704512c233bf;
li x10, 0x6e2d704512c233bf
unshfli x11, x10, 15
sw x11, 408(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_73:
// rs1_val == 0x218FDC135DCF017F 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0x218fdc135dcf017f;
li x10, 0x218fdc135dcf017f
unshfli x11, x10, 15
sw x11, 416(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_74:
// rs1_val == 0xB3988B5231C8B6FF 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0xb3988b5231c8b6ff;
li x10, 0xb3988b5231c8b6ff
unshfli x11, x10, 15
sw x11, 424(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_75:
// rs1_val == 0xE2F99B2A3C5569FF 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0xe2f99b2a3c5569ff;
li x10, 0xe2f99b2a3c5569ff
unshfli x11, x10, 15
sw x11, 432(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_76:
// rs1_val == 0x90BB34803C4643FF 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0x90bb34803c4643ff;
li x10, 0x90bb34803c4643ff
unshfli x11, x10, 15
sw x11, 440(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_77:
// rs1_val == 0x8CCE89147DA8D7FF 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0x8cce89147da8d7ff;
li x10, 0x8cce89147da8d7ff
unshfli x11, x10, 15
sw x11, 448(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_78:
// rs1_val == 0x93C38B33217ACFFF 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0x93c38b33217acfff;
li x10, 0x93c38b33217acfff
unshfli x11, x10, 15
sw x11, 456(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_79:
// rs1_val == 0xE3A707D665505FFF 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0xe3a707d665505fff;
li x10, 0xe3a707d665505fff
unshfli x11, x10, 15
sw x11, 464(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_80:
// rs1_val == 0x47B7097B9B01BFFF 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0x47b7097b9b01bfff;
li x10, 0x47b7097b9b01bfff
unshfli x11, x10, 15
sw x11, 472(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_81:
// rs1_val == 0x4302DA54759F7FFF 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0x4302da54759f7fff;
li x10, 0x4302da54759f7fff
unshfli x11, x10, 15
sw x11, 480(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_82:
// rs1_val == 0x5F013C8240D8FFFF 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0x5f013c8240d8ffff;
li x10, 0x5f013c8240d8ffff
unshfli x11, x10, 15
sw x11, 488(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_83:
// rs1_val == 0x5B33199985CDFFFF 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0x5b33199985cdffff;
li x10, 0x5b33199985cdffff
unshfli x11, x10, 15
sw x11, 496(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_84:
// rs1_val == 0x2DEDF12233DBFFFF 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0x2dedf12233dbffff;
li x10, 0x2dedf12233dbffff
unshfli x11, x10, 15
sw x11, 504(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_85:
// rs1_val == 0x4B1634E12D37FFFF 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0x4b1634e12d37ffff;
li x10, 0x4b1634e12d37ffff
unshfli x11, x10, 15
sw x11, 512(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_86:
// rs1_val == 0x8935B826718FFFFF 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0x8935b826718fffff;
li x10, 0x8935b826718fffff
unshfli x11, x10, 15
sw x11, 520(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_87:
// rs1_val == 0xBA9C678AAD5FFFFF 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0xba9c678aad5fffff;
li x10, 0xba9c678aad5fffff
unshfli x11, x10, 15
sw x11, 528(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_88:
// rs1_val == 0x70BCB8E322BFFFFF 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0x70bcb8e322bfffff;
li x10, 0x70bcb8e322bfffff
unshfli x11, x10, 15
sw x11, 536(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_89:
// rs1_val == 0xFCB627AFBF7FFFFF 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0xfcb627afbf7fffff;
li x10, 0xfcb627afbf7fffff
unshfli x11, x10, 15
sw x11, 544(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_90:
// rs1_val == 0x9C76DF528CFFFFFF 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0x9c76df528cffffff;
li x10, 0x9c76df528cffffff
unshfli x11, x10, 15
sw x11, 552(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_91:
// rs1_val == 0x72C8DD98B1FFFFFF 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0x72c8dd98b1ffffff;
li x10, 0x72c8dd98b1ffffff
unshfli x11, x10, 15
sw x11, 560(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_92:
// rs1_val == 0x434CBF26FBFFFFFF 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0x434cbf26fbffffff;
li x10, 0x434cbf26fbffffff
unshfli x11, x10, 15
sw x11, 568(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_93:
// rs1_val == 0xA23FB787C7FFFFFF 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0xa23fb787c7ffffff;
li x10, 0xa23fb787c7ffffff
unshfli x11, x10, 15
sw x11, 576(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_94:
// rs1_val == 0x983CA1BECFFFFFFF 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0x983ca1becfffffff;
li x10, 0x983ca1becfffffff
unshfli x11, x10, 15
sw x11, 584(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_95:
// rs1_val == 0x589218431FFFFFFF 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0x589218431fffffff;
li x10, 0x589218431fffffff
unshfli x11, x10, 15
sw x11, 592(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_96:
// rs1_val == 0xA7BE99AE3FFFFFFF 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0xa7be99ae3fffffff;
li x10, 0xa7be99ae3fffffff
unshfli x11, x10, 15
sw x11, 600(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_97:
// rs1_val == 0xA37E37287FFFFFFF 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0xa37e37287fffffff;
li x10, 0xa37e37287fffffff
unshfli x11, x10, 15
sw x11, 608(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_98:
// rs1_val == 0xE37D3738FFFFFFFF 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0xe37d3738ffffffff;
li x10, 0xe37d3738ffffffff
unshfli x11, x10, 15
sw x11, 616(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_99:
// rs1_val == 0xABB4DA1DFFFFFFFF 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0xabb4da1dffffffff;
li x10, 0xabb4da1dffffffff
unshfli x11, x10, 15
sw x11, 624(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_100:
// rs1_val == 0xFB3E7193FFFFFFFF 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0xfb3e7193ffffffff;
li x10, 0xfb3e7193ffffffff
unshfli x11, x10, 15
sw x11, 632(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_101:
// rs1_val == 0x8CB950A7FFFFFFFF 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0x8cb950a7ffffffff;
li x10, 0x8cb950a7ffffffff
unshfli x11, x10, 15
sw x11, 640(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_102:
// rs1_val == 0xE5F31BEFFFFFFFFF 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0xe5f31befffffffff;
li x10, 0xe5f31befffffffff
unshfli x11, x10, 15
sw x11, 648(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_103:
// rs1_val == 0x3BE93F9FFFFFFFFF 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0x3be93f9fffffffff;
li x10, 0x3be93f9fffffffff
unshfli x11, x10, 15
sw x11, 656(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_104:
// rs1_val == 0x5B1196BFFFFFFFFF 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0x5b1196bfffffffff;
li x10, 0x5b1196bfffffffff
unshfli x11, x10, 15
sw x11, 664(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_105:
// rs1_val == 0xE084097FFFFFFFFF 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0xe084097fffffffff;
li x10, 0xe084097fffffffff
unshfli x11, x10, 15
sw x11, 672(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_106:
// rs1_val == 0x23B6BCFFFFFFFFFF 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0x23b6bcffffffffff;
li x10, 0x23b6bcffffffffff
unshfli x11, x10, 15
sw x11, 680(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_107:
// rs1_val == 0x6FCFD5FFFFFFFFFF 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0x6fcfd5ffffffffff;
li x10, 0x6fcfd5ffffffffff
unshfli x11, x10, 15
sw x11, 688(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_108:
// rs1_val == 0x73790BFFFFFFFFFF 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0x73790bffffffffff;
li x10, 0x73790bffffffffff
unshfli x11, x10, 15
sw x11, 696(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_109:
// rs1_val == 0x432FF7FFFFFFFFFF 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0x432ff7ffffffffff;
li x10, 0x432ff7ffffffffff
unshfli x11, x10, 15
sw x11, 704(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_110:
// rs1_val == 0xE36B0FFFFFFFFFFF 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0xe36b0fffffffffff;
li x10, 0xe36b0fffffffffff
unshfli x11, x10, 15
sw x11, 712(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_111:
// rs1_val == 0xCB4ADFFFFFFFFFFF 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0xcb4adfffffffffff;
li x10, 0xcb4adfffffffffff
unshfli x11, x10, 15
sw x11, 720(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_112:
// rs1_val == 0x15BF3FFFFFFFFFFF 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0x15bf3fffffffffff;
li x10, 0x15bf3fffffffffff
unshfli x11, x10, 15
sw x11, 728(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_113:
// rs1_val == 0xD59A7FFFFFFFFFFF 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0xd59a7fffffffffff;
li x10, 0xd59a7fffffffffff
unshfli x11, x10, 15
sw x11, 736(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_114:
// rs1_val == 0xFE32FFFFFFFFFFFF 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0xfe32ffffffffffff;
li x10, 0xfe32ffffffffffff
unshfli x11, x10, 15
sw x11, 744(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_115:
// rs1_val == 0xFF7DFFFFFFFFFFFF 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0xff7dffffffffffff;
li x10, 0xff7dffffffffffff
unshfli x11, x10, 15
sw x11, 752(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_116:
// rs1_val == 0xAF23FFFFFFFFFFFF 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0xaf23ffffffffffff;
li x10, 0xaf23ffffffffffff
unshfli x11, x10, 15
sw x11, 760(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_117:
// rs1_val == 0x2057FFFFFFFFFFFF 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0x2057ffffffffffff;
li x10, 0x2057ffffffffffff
unshfli x11, x10, 15
sw x11, 768(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_118:
// rs1_val == 0x07AFFFFFFFFFFFFF 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0x7afffffffffffff;
li x10, 0x7afffffffffffff
unshfli x11, x10, 15
sw x11, 776(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_119:
// rs1_val == 0xBE9FFFFFFFFFFFFF 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0xbe9fffffffffffff;
li x10, 0xbe9fffffffffffff
unshfli x11, x10, 15
sw x11, 784(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_120:
// rs1_val == 0xD8BFFFFFFFFFFFFF 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0xd8bfffffffffffff;
li x10, 0xd8bfffffffffffff
unshfli x11, x10, 15
sw x11, 792(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_121:
// rs1_val == 0x127FFFFFFFFFFFFF 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0x127fffffffffffff;
li x10, 0x127fffffffffffff
unshfli x11, x10, 15
sw x11, 800(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_122:
// rs1_val == 0x2EFFFFFFFFFFFFFF 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0x2effffffffffffff;
li x10, 0x2effffffffffffff
unshfli x11, x10, 15
sw x11, 808(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_123:
// rs1_val == 0xA5FFFFFFFFFFFFFF 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0xa5ffffffffffffff;
li x10, 0xa5ffffffffffffff
unshfli x11, x10, 15
sw x11, 816(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_124:
// rs1_val == 0xDBFFFFFFFFFFFFFF 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0xdbffffffffffffff;
li x10, 0xdbffffffffffffff
unshfli x11, x10, 15
sw x11, 824(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_125:
// rs1_val == 0xA7FFFFFFFFFFFFFF 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0xa7ffffffffffffff;
li x10, 0xa7ffffffffffffff
unshfli x11, x10, 15
sw x11, 832(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_126:
// rs1_val == 0xAFFFFFFFFFFFFFFF 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0xafffffffffffffff;
li x10, 0xafffffffffffffff
unshfli x11, x10, 15
sw x11, 840(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_127:
// rs1_val == 0xDFFFFFFFFFFFFFFF 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0xdfffffffffffffff;
li x10, 0xdfffffffffffffff
unshfli x11, x10, 15
sw x11, 848(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_128:
// rs1_val == 0xBFFFFFFFFFFFFFFF 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0xbfffffffffffffff;
li x10, 0xbfffffffffffffff
unshfli x11, x10, 15
sw x11, 856(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_129:
// rs1_val == 0x7FFFFFFFFFFFFFFF 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0x7fffffffffffffff;
li x10, 0x7fffffffffffffff
unshfli x11, x10, 15
sw x11, 864(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_130:
// rs1_val == 0xA274EA181E34B3F2 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0xa274ea181e34b3f2;
li x10, 0xa274ea181e34b3f2
unshfli x11, x10, 15
sw x11, 872(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_131:
// rs1_val == 0x6C3FBF4DC20EF165 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0x6c3fbf4dc20ef165;
li x10, 0x6c3fbf4dc20ef165
unshfli x11, x10, 15
sw x11, 880(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_132:
// rs1_val == 0x28F918D8F6CDB2F9 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0x28f918d8f6cdb2f9;
li x10, 0x28f918d8f6cdb2f9
unshfli x11, x10, 15
sw x11, 888(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_133:
// rs1_val == 0x13E0D681552454F2 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0x13e0d681552454f2;
li x10, 0x13e0d681552454f2
unshfli x11, x10, 15
sw x11, 896(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_134:
// rs1_val == 0x0FAB6F3E164F1514 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0xfab6f3e164f1514;
li x10, 0xfab6f3e164f1514
unshfli x11, x10, 15
sw x11, 904(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_135:
// rs1_val == 0x063E9BED45100359 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0x63e9bed45100359;
li x10, 0x63e9bed45100359
unshfli x11, x10, 15
sw x11, 912(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_136:
// rs1_val == 0x02C6D8F2C74C7CD0 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0x2c6d8f2c74c7cd0;
li x10, 0x2c6d8f2c74c7cd0
unshfli x11, x10, 15
sw x11, 920(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_137:
// rs1_val == 0x01D03FDDA123F502 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0x1d03fdda123f502;
li x10, 0x1d03fdda123f502
unshfli x11, x10, 15
sw x11, 928(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_138:
// rs1_val == 0x00F5380E12B2A415 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0xf5380e12b2a415;
li x10, 0xf5380e12b2a415
unshfli x11, x10, 15
sw x11, 936(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_139:
// rs1_val == 0x0077730F65BD9ACC 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0x77730f65bd9acc;
li x10, 0x77730f65bd9acc
unshfli x11, x10, 15
sw x11, 944(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_140:
// rs1_val == 0x003A6A1DFAF8CDAA 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0x3a6a1dfaf8cdaa;
li x10, 0x3a6a1dfaf8cdaa
unshfli x11, x10, 15
sw x11, 952(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_141:
// rs1_val == 0x001E5B4578511609 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0x1e5b4578511609;
li x10, 0x1e5b4578511609
unshfli x11, x10, 15
sw x11, 960(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_142:
// rs1_val == 0x000D0372E90794E0 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0xd0372e90794e0;
li x10, 0xd0372e90794e0
unshfli x11, x10, 15
sw x11, 968(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_143:
// rs1_val == 0x0006A24135B00A55 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0x6a24135b00a55;
li x10, 0x6a24135b00a55
unshfli x11, x10, 15
sw x11, 976(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_144:
// rs1_val == 0x00020BDF0023B683 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0x20bdf0023b683;
li x10, 0x20bdf0023b683
unshfli x11, x10, 15
sw x11, 984(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_145:
// rs1_val == 0x000170EED8E94B16 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0x170eed8e94b16;
li x10, 0x170eed8e94b16
unshfli x11, x10, 15
sw x11, 992(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_146:
// rs1_val == 0x0000EF05F542441E 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0xef05f542441e;
li x10, 0xef05f542441e
unshfli x11, x10, 15
sw x11, 1000(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_147:
// rs1_val == 0x00004AAA62F28D1B 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0x4aaa62f28d1b;
li x10, 0x4aaa62f28d1b
unshfli x11, x10, 15
sw x11, 1008(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_148:
// rs1_val == 0x00003CB3D8B9B45D 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0x3cb3d8b9b45d;
li x10, 0x3cb3d8b9b45d
unshfli x11, x10, 15
sw x11, 1016(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_149:
// rs1_val == 0x00001BE466809A12 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0x1be466809a12;
li x10, 0x1be466809a12
unshfli x11, x10, 15
sw x11, 1024(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_150:
// rs1_val == 0x0000092EC42B7171 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0x92ec42b7171;
li x10, 0x92ec42b7171
unshfli x11, x10, 15
sw x11, 1032(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_151:
// rs1_val == 0x0000074F11FA2AC1 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0x74f11fa2ac1;
li x10, 0x74f11fa2ac1
unshfli x11, x10, 15
sw x11, 1040(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_152:
// rs1_val == 0x0000025A49FE85B1 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0x25a49fe85b1;
li x10, 0x25a49fe85b1
unshfli x11, x10, 15
sw x11, 1048(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_153:
// rs1_val == 0x0000017A3ACB6267 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0x17a3acb6267;
li x10, 0x17a3acb6267
unshfli x11, x10, 15
sw x11, 1056(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_154:
// rs1_val == 0x000000C250B601FD 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0xc250b601fd;
li x10, 0xc250b601fd
unshfli x11, x10, 15
sw x11, 1064(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_155:
// rs1_val == 0x00000067B53302FD 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0x67b53302fd;
li x10, 0x67b53302fd
unshfli x11, x10, 15
sw x11, 1072(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_156:
// rs1_val == 0x0000002AD7185DDB 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0x2ad7185ddb;
li x10, 0x2ad7185ddb
unshfli x11, x10, 15
sw x11, 1080(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_157:
// rs1_val == 0x0000001FFEE5A5B3 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0x1ffee5a5b3;
li x10, 0x1ffee5a5b3
unshfli x11, x10, 15
sw x11, 1088(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_158:
// rs1_val == 0x0000000AFF66658A 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0xaff66658a;
li x10, 0xaff66658a
unshfli x11, x10, 15
sw x11, 1096(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_159:
// rs1_val == 0x000000064735AF1D 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0x64735af1d;
li x10, 0x64735af1d
unshfli x11, x10, 15
sw x11, 1104(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_160:
// rs1_val == 0x0000000275139238 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0x275139238;
li x10, 0x275139238
unshfli x11, x10, 15
sw x11, 1112(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_161:
// rs1_val == 0x00000001A9964AF0 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0x1a9964af0;
li x10, 0x1a9964af0
unshfli x11, x10, 15
sw x11, 1120(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_162:
// rs1_val == 0x00000000FFF1222A 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0xfff1222a;
li x10, 0xfff1222a
unshfli x11, x10, 15
sw x11, 1128(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_163:
// rs1_val == 0x0000000063EA284E 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0x63ea284e;
li x10, 0x63ea284e
unshfli x11, x10, 15
sw x11, 1136(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_164:
// rs1_val == 0x0000000024E55161 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0x24e55161;
li x10, 0x24e55161
unshfli x11, x10, 15
sw x11, 1144(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_165:
// rs1_val == 0x0000000017A94DEE 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0x17a94dee;
li x10, 0x17a94dee
unshfli x11, x10, 15
sw x11, 1152(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_166:
// rs1_val == 0x0000000008C6A5B9 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0x8c6a5b9;
li x10, 0x8c6a5b9
unshfli x11, x10, 15
sw x11, 1160(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_167:
// rs1_val == 0x0000000006C468AF 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0x6c468af;
li x10, 0x6c468af
unshfli x11, x10, 15
sw x11, 1168(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_168:
// rs1_val == 0x0000000003B37E15 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0x3b37e15;
li x10, 0x3b37e15
unshfli x11, x10, 15
sw x11, 1176(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_169:
// rs1_val == 0x0000000001EFFA39 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0x1effa39;
li x10, 0x1effa39
unshfli x11, x10, 15
sw x11, 1184(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_170:
// rs1_val == 0x0000000000B17D0C 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0xb17d0c;
li x10, 0xb17d0c
unshfli x11, x10, 15
sw x11, 1192(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_171:
// rs1_val == 0x00000000007EBDD4 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0x7ebdd4;
li x10, 0x7ebdd4
unshfli x11, x10, 15
sw x11, 1200(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_172:
// rs1_val == 0x000000000023FEB7 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0x23feb7;
li x10, 0x23feb7
unshfli x11, x10, 15
sw x11, 1208(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_173:
// rs1_val == 0x0000000000171685 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0x171685;
li x10, 0x171685
unshfli x11, x10, 15
sw x11, 1216(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_174:
// rs1_val == 0x0000000000098868 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0x98868;
li x10, 0x98868
unshfli x11, x10, 15
sw x11, 1224(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_175:
// rs1_val == 0x000000000005847F 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0x5847f;
li x10, 0x5847f
unshfli x11, x10, 15
sw x11, 1232(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_176:
// rs1_val == 0x0000000000037797 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0x37797;
li x10, 0x37797
unshfli x11, x10, 15
sw x11, 1240(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_177:
// rs1_val == 0x0000000000015DB9 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0x15db9;
li x10, 0x15db9
unshfli x11, x10, 15
sw x11, 1248(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_178:
// rs1_val == 0x0000000000008735 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0x8735;
li x10, 0x8735
unshfli x11, x10, 15
sw x11, 1256(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_179:
// rs1_val == 0x0000000000006B68 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0x6b68;
li x10, 0x6b68
unshfli x11, x10, 15
sw x11, 1264(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_180:
// rs1_val == 0x0000000000002F28 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0x2f28;
li x10, 0x2f28
unshfli x11, x10, 15
sw x11, 1272(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_181:
// rs1_val == 0x0000000000001D40 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0x1d40;
li x10, 0x1d40
unshfli x11, x10, 15
sw x11, 1280(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_182:
// rs1_val == 0x0000000000000F26 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0xf26;
li x10, 0xf26
unshfli x11, x10, 15
sw x11, 1288(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_183:
// rs1_val == 0x0000000000000482 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0x482;
li x10, 0x482
unshfli x11, x10, 15
sw x11, 1296(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_184:
// rs1_val == 0x0000000000000394 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0x394;
li x10, 0x394
unshfli x11, x10, 15
sw x11, 1304(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_185:
// rs1_val == 0x0000000000000154 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0x154;
li x10, 0x154
unshfli x11, x10, 15
sw x11, 1312(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_186:
// rs1_val == 0x00000000000000FA 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0xfa;
li x10, 0xfa
unshfli x11, x10, 15
sw x11, 1320(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_187:
// rs1_val == 0x0000000000000043 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0x43;
li x10, 0x43
unshfli x11, x10, 15
sw x11, 1328(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_188:
// rs1_val == 0x0000000000000039 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0x39;
li x10, 0x39
unshfli x11, x10, 15
sw x11, 1336(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_189:
// rs1_val == 0x0000000000000013 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0x13;
li x10, 0x13
unshfli x11, x10, 15
sw x11, 1344(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_190:
// rs1_val == 0x000000000000000E 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0xe;
li x10, 0xe
unshfli x11, x10, 15
sw x11, 1352(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_191:
// rs1_val == 0x0000000000000006 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0x6;
li x10, 0x6
unshfli x11, x10, 15
sw x11, 1360(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_192:
// rs1_val == 0x0000000000000002 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0x2;
li x10, 0x2
unshfli x11, x10, 15
sw x11, 1368(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_193:
// rs1_val == 0x0000000000000001 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0x1;
li x10, 0x1
unshfli x11, x10, 15
sw x11, 1376(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_194:
// rs1_val == 0x5D68F2012DAF94C2 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0x5d68f2012daf94c2;
li x10, 0x5d68f2012daf94c2
unshfli x11, x10, 15
sw x11, 1384(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_195:
// rs1_val == 0x85986ADB9E044707 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0x85986adb9e044707;
li x10, 0x85986adb9e044707
unshfli x11, x10, 15
sw x11, 1392(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_196:
// rs1_val == 0xC4BD48204652F62E 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0xc4bd48204652f62e;
li x10, 0xc4bd48204652f62e
unshfli x11, x10, 15
sw x11, 1400(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_197:
// rs1_val == 0xEE4839A13ED7E667 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0xee4839a13ed7e667;
li x10, 0xee4839a13ed7e667
unshfli x11, x10, 15
sw x11, 1408(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_198:
// rs1_val == 0xF213516D6A013381 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0xf213516d6a013381;
li x10, 0xf213516d6a013381
unshfli x11, x10, 15
sw x11, 1416(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_199:
// rs1_val == 0xF871CFDE6EE84271 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0xf871cfde6ee84271;
li x10, 0xf871cfde6ee84271
unshfli x11, x10, 15
sw x11, 1424(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_200:
// rs1_val == 0xFD432A19F29C11AE 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0xfd432a19f29c11ae;
li x10, 0xfd432a19f29c11ae
unshfli x11, x10, 15
sw x11, 1432(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_201:
// rs1_val == 0xFEE0888FCEB506F7 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0xfee0888fceb506f7;
li x10, 0xfee0888fceb506f7
unshfli x11, x10, 15
sw x11, 1440(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_202:
// rs1_val == 0xFF605EE62A96D06B 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0xff605ee62a96d06b;
li x10, 0xff605ee62a96d06b
unshfli x11, x10, 15
sw x11, 1448(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_203:
// rs1_val == 0xFF89799918BB28EA 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0xff89799918bb28ea;
li x10, 0xff89799918bb28ea
unshfli x11, x10, 15
sw x11, 1456(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_204:
// rs1_val == 0xFFCC6148C6880008 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0xffcc6148c6880008;
li x10, 0xffcc6148c6880008
unshfli x11, x10, 15
sw x11, 1464(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_205:
// rs1_val == 0xFFEB5EA11CE80B13 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0xffeb5ea11ce80b13;
li x10, 0xffeb5ea11ce80b13
unshfli x11, x10, 15
sw x11, 1472(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_206:
// rs1_val == 0xFFF039F699EF1858 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0xfff039f699ef1858;
li x10, 0xfff039f699ef1858
unshfli x11, x10, 15
sw x11, 1480(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_207:
// rs1_val == 0xFFFBEA615FC9EBA5 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0xfffbea615fc9eba5;
li x10, 0xfffbea615fc9eba5
unshfli x11, x10, 15
sw x11, 1488(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_208:
// rs1_val == 0xFFFC8D619136580C 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0xfffc8d619136580c;
li x10, 0xfffc8d619136580c
unshfli x11, x10, 15
sw x11, 1496(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_209:
// rs1_val == 0xFFFE46462651F638 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0xfffe46462651f638;
li x10, 0xfffe46462651f638
unshfli x11, x10, 15
sw x11, 1504(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_210:
// rs1_val == 0xFFFF1C79DAE98555 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0xffff1c79dae98555;
li x10, 0xffff1c79dae98555
unshfli x11, x10, 15
sw x11, 1512(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_211:
// rs1_val == 0xFFFF8E6F889263CF 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0xffff8e6f889263cf;
li x10, 0xffff8e6f889263cf
unshfli x11, x10, 15
sw x11, 1520(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_212:
// rs1_val == 0xFFFFDEE2A86B8A6F 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0xffffdee2a86b8a6f;
li x10, 0xffffdee2a86b8a6f
unshfli x11, x10, 15
sw x11, 1528(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_213:
// rs1_val == 0xFFFFE2AFD167533B 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0xffffe2afd167533b;
li x10, 0xffffe2afd167533b
unshfli x11, x10, 15
sw x11, 1536(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_214:
// rs1_val == 0xFFFFF1A07F216823 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0xfffff1a07f216823;
li x10, 0xfffff1a07f216823
unshfli x11, x10, 15
sw x11, 1544(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_215:
// rs1_val == 0xFFFFF9090973E89D 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0xfffff9090973e89d;
li x10, 0xfffff9090973e89d
unshfli x11, x10, 15
sw x11, 1552(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_216:
// rs1_val == 0xFFFFFC3769B1DCC0 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0xfffffc3769b1dcc0;
li x10, 0xfffffc3769b1dcc0
unshfli x11, x10, 15
sw x11, 1560(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_217:
// rs1_val == 0xFFFFFEB8396BA83B 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0xfffffeb8396ba83b;
li x10, 0xfffffeb8396ba83b
unshfli x11, x10, 15
sw x11, 1568(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_218:
// rs1_val == 0xFFFFFF4F280B11FE 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0xffffff4f280b11fe;
li x10, 0xffffff4f280b11fe
unshfli x11, x10, 15
sw x11, 1576(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_219:
// rs1_val == 0xFFFFFF85D814D576 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0xffffff85d814d576;
li x10, 0xffffff85d814d576
unshfli x11, x10, 15
sw x11, 1584(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_220:
// rs1_val == 0xFFFFFFCC95A4D258 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0xffffffcc95a4d258;
li x10, 0xffffffcc95a4d258
unshfli x11, x10, 15
sw x11, 1592(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_221:
// rs1_val == 0xFFFFFFE610A37559 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0xffffffe610a37559;
li x10, 0xffffffe610a37559
unshfli x11, x10, 15
sw x11, 1600(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_222:
// rs1_val == 0xFFFFFFF66F9FB998 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0xfffffff66f9fb998;
li x10, 0xfffffff66f9fb998
unshfli x11, x10, 15
sw x11, 1608(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_223:
// rs1_val == 0xFFFFFFFB8C8A18B3 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0xfffffffb8c8a18b3;
li x10, 0xfffffffb8c8a18b3
unshfli x11, x10, 15
sw x11, 1616(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_224:
// rs1_val == 0xFFFFFFFC507A2561 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0xfffffffc507a2561;
li x10, 0xfffffffc507a2561
unshfli x11, x10, 15
sw x11, 1624(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_225:
// rs1_val == 0xFFFFFFFEE5F0307F 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0xfffffffee5f0307f;
li x10, 0xfffffffee5f0307f
unshfli x11, x10, 15
sw x11, 1632(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_226:
// rs1_val == 0xFFFFFFFF5DBBB7CF 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0xffffffff5dbbb7cf;
li x10, 0xffffffff5dbbb7cf
unshfli x11, x10, 15
sw x11, 1640(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_227:
// rs1_val == 0xFFFFFFFF8D884510 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0xffffffff8d884510;
li x10, 0xffffffff8d884510
unshfli x11, x10, 15
sw x11, 1648(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_228:
// rs1_val == 0xFFFFFFFFD0E58651 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0xffffffffd0e58651;
li x10, 0xffffffffd0e58651
unshfli x11, x10, 15
sw x11, 1656(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_229:
// rs1_val == 0xFFFFFFFFE24C0602 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0xffffffffe24c0602;
li x10, 0xffffffffe24c0602
unshfli x11, x10, 15
sw x11, 1664(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_230:
// rs1_val == 0xFFFFFFFFF109C208 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0xfffffffff109c208;
li x10, 0xfffffffff109c208
unshfli x11, x10, 15
sw x11, 1672(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_231:
// rs1_val == 0xFFFFFFFFFB54AA23 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0xfffffffffb54aa23;
li x10, 0xfffffffffb54aa23
unshfli x11, x10, 15
sw x11, 1680(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_232:
// rs1_val == 0xFFFFFFFFFD02FC91 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0xfffffffffd02fc91;
li x10, 0xfffffffffd02fc91
unshfli x11, x10, 15
sw x11, 1688(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_233:
// rs1_val == 0xFFFFFFFFFE29D2A0 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0xfffffffffe29d2a0;
li x10, 0xfffffffffe29d2a0
unshfli x11, x10, 15
sw x11, 1696(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_234:
// rs1_val == 0xFFFFFFFFFF7F6F5E 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0xffffffffff7f6f5e;
li x10, 0xffffffffff7f6f5e
unshfli x11, x10, 15
sw x11, 1704(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_235:
// rs1_val == 0xFFFFFFFFFF9104D1 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0xffffffffff9104d1;
li x10, 0xffffffffff9104d1
unshfli x11, x10, 15
sw x11, 1712(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_236:
// rs1_val == 0xFFFFFFFFFFCADB0B 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0xffffffffffcadb0b;
li x10, 0xffffffffffcadb0b
unshfli x11, x10, 15
sw x11, 1720(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_237:
// rs1_val == 0xFFFFFFFFFFEEC2B4 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0xffffffffffeec2b4;
li x10, 0xffffffffffeec2b4
unshfli x11, x10, 15
sw x11, 1728(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_238:
// rs1_val == 0xFFFFFFFFFFF49E5F 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0xfffffffffff49e5f;
li x10, 0xfffffffffff49e5f
unshfli x11, x10, 15
sw x11, 1736(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_239:
// rs1_val == 0xFFFFFFFFFFFAE2EE 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0xfffffffffffae2ee;
li x10, 0xfffffffffffae2ee
unshfli x11, x10, 15
sw x11, 1744(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_240:
// rs1_val == 0xFFFFFFFFFFFC7F0E 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0xfffffffffffc7f0e;
li x10, 0xfffffffffffc7f0e
unshfli x11, x10, 15
sw x11, 1752(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_241:
// rs1_val == 0xFFFFFFFFFFFE3410 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0xfffffffffffe3410;
li x10, 0xfffffffffffe3410
unshfli x11, x10, 15
sw x11, 1760(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_242:
// rs1_val == 0xFFFFFFFFFFFF6E0A 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0xffffffffffff6e0a;
li x10, 0xffffffffffff6e0a
unshfli x11, x10, 15
sw x11, 1768(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_243:
// rs1_val == 0xFFFFFFFFFFFFB32A 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0xffffffffffffb32a;
li x10, 0xffffffffffffb32a
unshfli x11, x10, 15
sw x11, 1776(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_244:
// rs1_val == 0xFFFFFFFFFFFFC384 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0xffffffffffffc384;
li x10, 0xffffffffffffc384
unshfli x11, x10, 15
sw x11, 1784(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_245:
// rs1_val == 0xFFFFFFFFFFFFEC1D 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0xffffffffffffec1d;
li x10, 0xffffffffffffec1d
unshfli x11, x10, 15
sw x11, 1792(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_246:
// rs1_val == 0xFFFFFFFFFFFFF3F0 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0xfffffffffffff3f0;
li x10, 0xfffffffffffff3f0
unshfli x11, x10, 15
sw x11, 1800(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_247:
// rs1_val == 0xFFFFFFFFFFFFFB13 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0xfffffffffffffb13;
li x10, 0xfffffffffffffb13
unshfli x11, x10, 15
sw x11, 1808(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_248:
// rs1_val == 0xFFFFFFFFFFFFFC31 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0xfffffffffffffc31;
li x10, 0xfffffffffffffc31
unshfli x11, x10, 15
sw x11, 1816(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_249:
// rs1_val == 0xFFFFFFFFFFFFFE44 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0xfffffffffffffe44;
li x10, 0xfffffffffffffe44
unshfli x11, x10, 15
sw x11, 1824(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_250:
// rs1_val == 0xFFFFFFFFFFFFFF58 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0xffffffffffffff58;
li x10, 0xffffffffffffff58
unshfli x11, x10, 15
sw x11, 1832(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_251:
// rs1_val == 0xFFFFFFFFFFFFFFB0 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0xffffffffffffffb0;
li x10, 0xffffffffffffffb0
unshfli x11, x10, 15
sw x11, 1840(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_252:
// rs1_val == 0xFFFFFFFFFFFFFFC6 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0xffffffffffffffc6;
li x10, 0xffffffffffffffc6
unshfli x11, x10, 15
sw x11, 1848(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_253:
// rs1_val == 0xFFFFFFFFFFFFFFE8 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0xffffffffffffffe8;
li x10, 0xffffffffffffffe8
unshfli x11, x10, 15
sw x11, 1856(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_254:
// rs1_val == 0xFFFFFFFFFFFFFFF2 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0xfffffffffffffff2;
li x10, 0xfffffffffffffff2
unshfli x11, x10, 15
sw x11, 1864(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_255:
// rs1_val == 0xFFFFFFFFFFFFFFF9 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0xfffffffffffffff9;
li x10, 0xfffffffffffffff9
unshfli x11, x10, 15
sw x11, 1872(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_256:
// rs1_val == 0xFFFFFFFFFFFFFFFD 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0xfffffffffffffffd;
li x10, 0xfffffffffffffffd
unshfli x11, x10, 15
sw x11, 1880(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_257:
// rs1_val == 0xFFFFFFFFFFFFFFFE 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0xfffffffffffffffe;
li x10, 0xfffffffffffffffe
unshfli x11, x10, 15
sw x11, 1888(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_258:
// rs1_val == 0x0100000000000000 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0x100000000000000;
li x10, 0x100000000000000
unshfli x11, x10, 15
sw x11, 1896(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)

inst_259:
// rs1_val == 0x4EE5BCE800000000 
// opcode: unshfli ; op1:x10; dest:x11; op1val:0x4ee5bce800000000;
li x10, 0x4ee5bce800000000
unshfli x11, x10, 15
sw x11, 1904(x2)
RVMODEL_IO_ASSERT_GPR_EQ(x6, x11, 0x0000000000000000)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x9_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x9_1:
    .fill 21*(XLEN/32),4,0xdeadbeef


signature_x2_0:
    .fill 239*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
