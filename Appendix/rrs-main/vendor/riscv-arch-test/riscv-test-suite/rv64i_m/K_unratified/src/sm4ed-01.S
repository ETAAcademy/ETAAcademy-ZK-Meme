// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.4.5
// timestamp : Thu May 20 05:32:05 2021 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv-ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv-ctg/sample_cgfs/rv64i_k.cgf \
//                  --base-isa rv64i \
//                  --randomize
// -----------
//
// -----------
// Copyright (c) 2021. Indian Institute of Technology Madras. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the sm4ed instruction of the RISC-V  extension for the sm4ed covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64I_Zks")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sm4ed)

RVTEST_CASE(1,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*ZKs.*);def TEST_CASE_1=True;",sm4ed)

RVTEST_CASE(2,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*ZKsed.*);def TEST_CASE_1=True;",sm4ed)

RVTEST_SIGBASE( x13,signature_x13_1)

inst_0:
// rs1 == rs2, rs1==x23, rs2==x23, rs1_val == 0x0706050403020100 and rs2_val == 0x0f0e0d0c0b0a0908 and imm_val == 0 
// opcode: sm4ed; op1:x23; op2:x23; op1val:0x706050403020100; op2val:0x706050403020100; immval:0x0
TEST_RI_OP(sm4ed, x23, x23, 0x0, 0x0000000000000000, 0x706050403020100, 0x706050403020100, x13, 0, x21)

inst_1:
// rs1 != rs2, rs1==x4, rs2==x20, rs1_val == 0xbc36b151aeb006fc and rs2_val == 0x2cab43d86576923c and imm_val == 0x3 
// opcode: sm4ed; op1:x4; op2:x20; op1val:0xbc36b151aeb006fc; op2val:0x2cab43d86576923c; immval:0x3
TEST_RI_OP(sm4ed, x4, x20, 0x3, 0x0000000000000000, 0xbc36b151aeb006fc, 0x2cab43d86576923c, x13, 8, x21)

inst_2:
// rs1==x6, rs2==x16, rs1_val == 0x156fe482f9fcd292 and rs2_val == 0x24c6435c8dca0621 and imm_val == 0x0 
// opcode: sm4ed; op1:x6; op2:x16; op1val:0x156fe482f9fcd292; op2val:0x24c6435c8dca0621; immval:0x0
TEST_RI_OP(sm4ed, x6, x16, 0x0, 0x0000000000000000, 0x156fe482f9fcd292, 0x24c6435c8dca0621, x13, 16, x21)

inst_3:
// rs1==x15, rs2==x30, rs1_val == 0xa757e91e027e5943 and rs2_val == 0xda73ec2605e6750f and imm_val == 0x2 
// opcode: sm4ed; op1:x15; op2:x30; op1val:0xa757e91e027e5943; op2val:0xda73ec2605e6750f; immval:0x2
TEST_RI_OP(sm4ed, x15, x30, 0x2, 0x0000000000000000, 0xa757e91e027e5943, 0xda73ec2605e6750f, x13, 24, x21)

inst_4:
// rs1==x1, rs2==x10, rs1_val == 0xf452cbd863fa921d and rs2_val == 0x4b6587d88ef464d1 and imm_val == 0x3 
// opcode: sm4ed; op1:x1; op2:x10; op1val:0xf452cbd863fa921d; op2val:0x4b6587d88ef464d1; immval:0x3
TEST_RI_OP(sm4ed, x1, x10, 0x3, 0x0000000000000000, 0xf452cbd863fa921d, 0x4b6587d88ef464d1, x13, 32, x21)

inst_5:
// rs1==x5, rs2==x26, rs1_val == 0xd40f46a4356c1dcc and rs2_val == 0x30c33d97184e0f23 and imm_val == 0x0 
// opcode: sm4ed; op1:x5; op2:x26; op1val:0xd40f46a4356c1dcc; op2val:0x30c33d97184e0f23; immval:0x0
TEST_RI_OP(sm4ed, x5, x26, 0x0, 0x0000000000000000, 0xd40f46a4356c1dcc, 0x30c33d97184e0f23, x13, 40, x21)

inst_6:
// rs1==x27, rs2==x9, rs1_val == 0x6d23c0488a6019c1 and rs2_val == 0x860bdaad7447a088 and imm_val == 0x2 
// opcode: sm4ed; op1:x27; op2:x9; op1val:0x6d23c0488a6019c1; op2val:0x860bdaad7447a088; immval:0x2
TEST_RI_OP(sm4ed, x27, x9, 0x2, 0x0000000000000000, 0x6d23c0488a6019c1, 0x860bdaad7447a088, x13, 48, x21)

inst_7:
// rs1==x25, rs2==x8, rs1_val == 0x17168ab3a4351379 and rs2_val == 0xbbb4f560f222070c and imm_val == 0x0 
// opcode: sm4ed; op1:x25; op2:x8; op1val:0x17168ab3a4351379; op2val:0xbbb4f560f222070c; immval:0x0
TEST_RI_OP(sm4ed, x25, x8, 0x0, 0x0000000000000000, 0x17168ab3a4351379, 0xbbb4f560f222070c, x13, 56, x21)

inst_8:
// rs1==x19, rs2==x5, rs1_val == 0x3fb0fe60ef1d54db and rs2_val == 0x09ff42451826a804 and imm_val == 0x1 
// opcode: sm4ed; op1:x19; op2:x5; op1val:0x3fb0fe60ef1d54db; op2val:0x9ff42451826a804; immval:0x1
TEST_RI_OP(sm4ed, x19, x5, 0x1, 0x0000000000000000, 0x3fb0fe60ef1d54db, 0x9ff42451826a804, x13, 64, x21)

inst_9:
// rs1==x26, rs2==x4, rs1_val == 0xcc7b22010ca3ef52 and rs2_val == 0xc150f4d3df74d068 and imm_val == 0x1 
// opcode: sm4ed; op1:x26; op2:x4; op1val:0xcc7b22010ca3ef52; op2val:0xc150f4d3df74d068; immval:0x1
TEST_RI_OP(sm4ed, x26, x4, 0x1, 0x0000000000000000, 0xcc7b22010ca3ef52, 0xc150f4d3df74d068, x13, 72, x21)

inst_10:
// rs1==x17, rs2==x12, rs1_val == 0x358a9235987daa20 and rs2_val == 0xb369e10209f393d7 and imm_val == 0x1 
// opcode: sm4ed; op1:x17; op2:x12; op1val:0x358a9235987daa20; op2val:0xb369e10209f393d7; immval:0x1
TEST_RI_OP(sm4ed, x17, x12, 0x1, 0x0000000000000000, 0x358a9235987daa20, 0xb369e10209f393d7, x13, 80, x21)

inst_11:
// rs1==x18, rs2==x3, rs1_val == 0x91766f62ba2be4d3 and rs2_val == 0x74a813d25570084b and imm_val == 0x0 
// opcode: sm4ed; op1:x18; op2:x3; op1val:0x91766f62ba2be4d3; op2val:0x74a813d25570084b; immval:0x0
TEST_RI_OP(sm4ed, x18, x3, 0x0, 0x0000000000000000, 0x91766f62ba2be4d3, 0x74a813d25570084b, x13, 88, x21)

inst_12:
// rs1==x31, rs2==x2, rs1_val == 0xb7c1fc5f1efa1095 and rs2_val == 0xe2cbb9ab3819fe4d and imm_val == 0x1 
// opcode: sm4ed; op1:x31; op2:x2; op1val:0xb7c1fc5f1efa1095; op2val:0xe2cbb9ab3819fe4d; immval:0x1
TEST_RI_OP(sm4ed, x31, x2, 0x1, 0x0000000000000000, 0xb7c1fc5f1efa1095, 0xe2cbb9ab3819fe4d, x13, 96, x21)

inst_13:
// rs1==x16, rs2==x7, rs1_val == 0xa6c9253a4cc6382e and rs2_val == 0x25ae27ee4113ee60 and imm_val == 0x2 
// opcode: sm4ed; op1:x16; op2:x7; op1val:0xa6c9253a4cc6382e; op2val:0x25ae27ee4113ee60; immval:0x2
TEST_RI_OP(sm4ed, x16, x7, 0x2, 0x0000000000000000, 0xa6c9253a4cc6382e, 0x25ae27ee4113ee60, x13, 104, x21)

inst_14:
// rs1==x12, rs2==x0, rs1_val == 0xf17f6920daaafe5c and rs2_val == 0x7bcad7c4ff9a1b80 and imm_val == 0x0 
// opcode: sm4ed; op1:x12; op2:x0; op1val:0xf17f6920daaafe5c; op2val:0x0; immval:0x0
TEST_RI_OP(sm4ed, x12, x0, 0x0, 0x0000000000000000, 0xf17f6920daaafe5c, 0x0, x13, 112, x21)

inst_15:
// rs1==x9, rs2==x14, rs1_val == 0x3150e5fa299c3bcf and rs2_val == 0xe6fff3d9ec1ce9d2 and imm_val == 0x1 
// opcode: sm4ed; op1:x9; op2:x14; op1val:0x3150e5fa299c3bcf; op2val:0xe6fff3d9ec1ce9d2; immval:0x1
TEST_RI_OP(sm4ed, x9, x14, 0x1, 0x0000000000000000, 0x3150e5fa299c3bcf, 0xe6fff3d9ec1ce9d2, x13, 120, x21)

inst_16:
// rs1==x24, rs2==x18, rs1_val == 0x1fc493caa371db42 and rs2_val == 0x9a4e9ef10171f4df and imm_val == 0x1 
// opcode: sm4ed; op1:x24; op2:x18; op1val:0x1fc493caa371db42; op2val:0x9a4e9ef10171f4df; immval:0x1
TEST_RI_OP(sm4ed, x24, x18, 0x1, 0x0000000000000000, 0x1fc493caa371db42, 0x9a4e9ef10171f4df, x13, 128, x21)

inst_17:
// rs1==x20, rs2==x11, rs1_val == 0xf5faf2073430cb17 and rs2_val == 0x8e2eac2a760b3c5e and imm_val == 0x3 
// opcode: sm4ed; op1:x20; op2:x11; op1val:0xf5faf2073430cb17; op2val:0x8e2eac2a760b3c5e; immval:0x3
TEST_RI_OP(sm4ed, x20, x11, 0x3, 0x0000000000000000, 0xf5faf2073430cb17, 0x8e2eac2a760b3c5e, x13, 136, x21)

inst_18:
// rs1==x2, rs2==x22, rs1_val == 0xbc991c531484f407 and rs2_val == 0x55d98c6e3459294e and imm_val == 0x2 
// opcode: sm4ed; op1:x2; op2:x22; op1val:0xbc991c531484f407; op2val:0x55d98c6e3459294e; immval:0x2
TEST_RI_OP(sm4ed, x2, x22, 0x2, 0x0000000000000000, 0xbc991c531484f407, 0x55d98c6e3459294e, x13, 144, x21)

inst_19:
// rs1==x29, rs2==x6, rs1_val == 0x59885afcbb61a9cd and rs2_val == 0xccce240c81c1e7ff and imm_val == 0x0 
// opcode: sm4ed; op1:x29; op2:x6; op1val:0x59885afcbb61a9cd; op2val:0xccce240c81c1e7ff; immval:0x0
TEST_RI_OP(sm4ed, x29, x6, 0x0, 0x0000000000000000, 0x59885afcbb61a9cd, 0xccce240c81c1e7ff, x13, 152, x4)
RVTEST_SIGBASE( x2,signature_x2_0)

inst_20:
// rs1==x7, rs2==x31, rs1_val == 0x75a3adb3254a9493 and rs2_val == 0xc5521660f3a3c571 and imm_val == 0x3 
// opcode: sm4ed; op1:x7; op2:x31; op1val:0x75a3adb3254a9493; op2val:0xc5521660f3a3c571; immval:0x3
TEST_RI_OP(sm4ed, x7, x31, 0x3, 0x0000000000000000, 0x75a3adb3254a9493, 0xc5521660f3a3c571, x2, 0, x4)

inst_21:
// rs1==x3, rs2==x25, rs1_val == 0xfffefdfcfbfaf9f8 and rs2_val == 0xf7f6f5f4f3f2f1f0 and imm_val == 3 
// opcode: sm4ed; op1:x3; op2:x25; op1val:0xfffefdfcfbfaf9f8; op2val:0xf7f6f5f4f3f2f1f0; immval:0x3
TEST_RI_OP(sm4ed, x3, x25, 0x3, 0x0000000000000000, 0xfffefdfcfbfaf9f8, 0xf7f6f5f4f3f2f1f0, x2, 8, x4)

inst_22:
// rs1==x10, rs2==x29, rs1_val == 0xfffefdfcfbfaf9f8 and rs2_val == 0xf7f6f5f4f3f2f1f0 and imm_val == 2 
// opcode: sm4ed; op1:x10; op2:x29; op1val:0xfffefdfcfbfaf9f8; op2val:0xf7f6f5f4f3f2f1f0; immval:0x2
TEST_RI_OP(sm4ed, x10, x29, 0x2, 0x0000000000000000, 0xfffefdfcfbfaf9f8, 0xf7f6f5f4f3f2f1f0, x2, 16, x4)

inst_23:
// rs1==x22, rs2==x13, rs1_val == 0xfffefdfcfbfaf9f8 and rs2_val == 0xf7f6f5f4f3f2f1f0 and imm_val == 1 
// opcode: sm4ed; op1:x22; op2:x13; op1val:0xfffefdfcfbfaf9f8; op2val:0xf7f6f5f4f3f2f1f0; immval:0x1
TEST_RI_OP(sm4ed, x22, x13, 0x1, 0x0000000000000000, 0xfffefdfcfbfaf9f8, 0xf7f6f5f4f3f2f1f0, x2, 24, x4)

inst_24:
// rs1==x28, rs2==x24, rs1_val == 0xfffefdfcfbfaf9f8 and rs2_val == 0xf7f6f5f4f3f2f1f0 and imm_val == 0 
// opcode: sm4ed; op1:x28; op2:x24; op1val:0xfffefdfcfbfaf9f8; op2val:0xf7f6f5f4f3f2f1f0; immval:0x0
TEST_RI_OP(sm4ed, x28, x24, 0x0, 0x0000000000000000, 0xfffefdfcfbfaf9f8, 0xf7f6f5f4f3f2f1f0, x2, 32, x4)

inst_25:
// rs1==x8, rs2==x15, rs1_val == 0xf7f6f5f4f3f2f1f0 and rs2_val == 0xfffefdfcfbfaf9f8 and imm_val == 3 
// opcode: sm4ed; op1:x8; op2:x15; op1val:0xf7f6f5f4f3f2f1f0; op2val:0xfffefdfcfbfaf9f8; immval:0x3
TEST_RI_OP(sm4ed, x8, x15, 0x3, 0x0000000000000000, 0xf7f6f5f4f3f2f1f0, 0xfffefdfcfbfaf9f8, x2, 40, x4)

inst_26:
// rs1==x30, rs2==x1, rs1_val == 0xf7f6f5f4f3f2f1f0 and rs2_val == 0xfffefdfcfbfaf9f8 and imm_val == 2 
// opcode: sm4ed; op1:x30; op2:x1; op1val:0xf7f6f5f4f3f2f1f0; op2val:0xfffefdfcfbfaf9f8; immval:0x2
TEST_RI_OP(sm4ed, x30, x1, 0x2, 0x0000000000000000, 0xf7f6f5f4f3f2f1f0, 0xfffefdfcfbfaf9f8, x2, 48, x4)

inst_27:
// rs1==x21, rs2==x27, rs1_val == 0xf7f6f5f4f3f2f1f0 and rs2_val == 0xfffefdfcfbfaf9f8 and imm_val == 1 
// opcode: sm4ed; op1:x21; op2:x27; op1val:0xf7f6f5f4f3f2f1f0; op2val:0xfffefdfcfbfaf9f8; immval:0x1
TEST_RI_OP(sm4ed, x21, x27, 0x1, 0x0000000000000000, 0xf7f6f5f4f3f2f1f0, 0xfffefdfcfbfaf9f8, x2, 56, x4)

inst_28:
// rs1==x13, rs2==x28, rs1_val == 0xf7f6f5f4f3f2f1f0 and rs2_val == 0xfffefdfcfbfaf9f8 and imm_val == 0 
// opcode: sm4ed; op1:x13; op2:x28; op1val:0xf7f6f5f4f3f2f1f0; op2val:0xfffefdfcfbfaf9f8; immval:0x0
TEST_RI_OP(sm4ed, x13, x28, 0x0, 0x0000000000000000, 0xf7f6f5f4f3f2f1f0, 0xfffefdfcfbfaf9f8, x2, 64, x4)

inst_29:
// rs1==x14, rs2==x17, rs1_val == 0xefeeedecebeae9e8 and rs2_val == 0xe7e6e5e4e3e2e1e0 and imm_val == 3 
// opcode: sm4ed; op1:x14; op2:x17; op1val:0xefeeedecebeae9e8; op2val:0xe7e6e5e4e3e2e1e0; immval:0x3
TEST_RI_OP(sm4ed, x14, x17, 0x3, 0x0000000000000000, 0xefeeedecebeae9e8, 0xe7e6e5e4e3e2e1e0, x2, 72, x4)

inst_30:
// rs1==x0, rs2==x21, rs1_val == 0xefeeedecebeae9e8 and rs2_val == 0xe7e6e5e4e3e2e1e0 and imm_val == 2 
// opcode: sm4ed; op1:x0; op2:x21; op1val:0x0; op2val:0xe7e6e5e4e3e2e1e0; immval:0x2
TEST_RI_OP(sm4ed, x0, x21, 0x2, 0x0000000000000000, 0x0, 0xe7e6e5e4e3e2e1e0, x2, 80, x4)

inst_31:
// rs1==x11, rs2==x19, rs1_val == 0xefeeedecebeae9e8 and rs2_val == 0xe7e6e5e4e3e2e1e0 and imm_val == 1 
// opcode: sm4ed; op1:x11; op2:x19; op1val:0xefeeedecebeae9e8; op2val:0xe7e6e5e4e3e2e1e0; immval:0x1
TEST_RI_OP(sm4ed, x11, x19, 0x1, 0x0000000000000000, 0xefeeedecebeae9e8, 0xe7e6e5e4e3e2e1e0, x2, 88, x4)

inst_32:
// rs1_val == 0xefeeedecebeae9e8 and rs2_val == 0xe7e6e5e4e3e2e1e0 and imm_val == 0 
// opcode: sm4ed; op1:x10; op2:x11; op1val:0xefeeedecebeae9e8; op2val:0xe7e6e5e4e3e2e1e0; immval:0x0
TEST_RI_OP(sm4ed, x10, x11, 0x0, 0x0000000000000000, 0xefeeedecebeae9e8, 0xe7e6e5e4e3e2e1e0, x2, 96, x4)

inst_33:
// rs1_val == 0xe7e6e5e4e3e2e1e0 and rs2_val == 0xefeeedecebeae9e8 and imm_val == 3 
// opcode: sm4ed; op1:x10; op2:x11; op1val:0xe7e6e5e4e3e2e1e0; op2val:0xefeeedecebeae9e8; immval:0x3
TEST_RI_OP(sm4ed, x10, x11, 0x3, 0x0000000000000000, 0xe7e6e5e4e3e2e1e0, 0xefeeedecebeae9e8, x2, 104, x4)

inst_34:
// rs1_val == 0xe7e6e5e4e3e2e1e0 and rs2_val == 0xefeeedecebeae9e8 and imm_val == 2 
// opcode: sm4ed; op1:x10; op2:x11; op1val:0xe7e6e5e4e3e2e1e0; op2val:0xefeeedecebeae9e8; immval:0x2
TEST_RI_OP(sm4ed, x10, x11, 0x2, 0x0000000000000000, 0xe7e6e5e4e3e2e1e0, 0xefeeedecebeae9e8, x2, 112, x4)

inst_35:
// rs1_val == 0xe7e6e5e4e3e2e1e0 and rs2_val == 0xefeeedecebeae9e8 and imm_val == 1 
// opcode: sm4ed; op1:x10; op2:x11; op1val:0xe7e6e5e4e3e2e1e0; op2val:0xefeeedecebeae9e8; immval:0x1
TEST_RI_OP(sm4ed, x10, x11, 0x1, 0x0000000000000000, 0xe7e6e5e4e3e2e1e0, 0xefeeedecebeae9e8, x2, 120, x4)

inst_36:
// rs1_val == 0xe7e6e5e4e3e2e1e0 and rs2_val == 0xefeeedecebeae9e8 and imm_val == 0 
// opcode: sm4ed; op1:x10; op2:x11; op1val:0xe7e6e5e4e3e2e1e0; op2val:0xefeeedecebeae9e8; immval:0x0
TEST_RI_OP(sm4ed, x10, x11, 0x0, 0x0000000000000000, 0xe7e6e5e4e3e2e1e0, 0xefeeedecebeae9e8, x2, 128, x4)

inst_37:
// rs1_val == 0xdfdedddcdbdad9d8 and rs2_val == 0xd7d6d5d4d3d2d1d0 and imm_val == 3 
// opcode: sm4ed; op1:x10; op2:x11; op1val:0xdfdedddcdbdad9d8; op2val:0xd7d6d5d4d3d2d1d0; immval:0x3
TEST_RI_OP(sm4ed, x10, x11, 0x3, 0x0000000000000000, 0xdfdedddcdbdad9d8, 0xd7d6d5d4d3d2d1d0, x2, 136, x4)

inst_38:
// rs1_val == 0xdfdedddcdbdad9d8 and rs2_val == 0xd7d6d5d4d3d2d1d0 and imm_val == 2 
// opcode: sm4ed; op1:x10; op2:x11; op1val:0xdfdedddcdbdad9d8; op2val:0xd7d6d5d4d3d2d1d0; immval:0x2
TEST_RI_OP(sm4ed, x10, x11, 0x2, 0x0000000000000000, 0xdfdedddcdbdad9d8, 0xd7d6d5d4d3d2d1d0, x2, 144, x4)

inst_39:
// rs1_val == 0xdfdedddcdbdad9d8 and rs2_val == 0xd7d6d5d4d3d2d1d0 and imm_val == 1 
// opcode: sm4ed; op1:x10; op2:x11; op1val:0xdfdedddcdbdad9d8; op2val:0xd7d6d5d4d3d2d1d0; immval:0x1
TEST_RI_OP(sm4ed, x10, x11, 0x1, 0x0000000000000000, 0xdfdedddcdbdad9d8, 0xd7d6d5d4d3d2d1d0, x2, 152, x4)

inst_40:
// rs1_val == 0xdfdedddcdbdad9d8 and rs2_val == 0xd7d6d5d4d3d2d1d0 and imm_val == 0 
// opcode: sm4ed; op1:x10; op2:x11; op1val:0xdfdedddcdbdad9d8; op2val:0xd7d6d5d4d3d2d1d0; immval:0x0
TEST_RI_OP(sm4ed, x10, x11, 0x0, 0x0000000000000000, 0xdfdedddcdbdad9d8, 0xd7d6d5d4d3d2d1d0, x2, 160, x4)

inst_41:
// rs1_val == 0xd7d6d5d4d3d2d1d0 and rs2_val == 0xdfdedddcdbdad9d8 and imm_val == 3 
// opcode: sm4ed; op1:x10; op2:x11; op1val:0xd7d6d5d4d3d2d1d0; op2val:0xdfdedddcdbdad9d8; immval:0x3
TEST_RI_OP(sm4ed, x10, x11, 0x3, 0x0000000000000000, 0xd7d6d5d4d3d2d1d0, 0xdfdedddcdbdad9d8, x2, 168, x4)

inst_42:
// rs1_val == 0xd7d6d5d4d3d2d1d0 and rs2_val == 0xdfdedddcdbdad9d8 and imm_val == 2 
// opcode: sm4ed; op1:x10; op2:x11; op1val:0xd7d6d5d4d3d2d1d0; op2val:0xdfdedddcdbdad9d8; immval:0x2
TEST_RI_OP(sm4ed, x10, x11, 0x2, 0x0000000000000000, 0xd7d6d5d4d3d2d1d0, 0xdfdedddcdbdad9d8, x2, 176, x4)

inst_43:
// rs1_val == 0xd7d6d5d4d3d2d1d0 and rs2_val == 0xdfdedddcdbdad9d8 and imm_val == 1 
// opcode: sm4ed; op1:x10; op2:x11; op1val:0xd7d6d5d4d3d2d1d0; op2val:0xdfdedddcdbdad9d8; immval:0x1
TEST_RI_OP(sm4ed, x10, x11, 0x1, 0x0000000000000000, 0xd7d6d5d4d3d2d1d0, 0xdfdedddcdbdad9d8, x2, 184, x4)

inst_44:
// rs1_val == 0xd7d6d5d4d3d2d1d0 and rs2_val == 0xdfdedddcdbdad9d8 and imm_val == 0 
// opcode: sm4ed; op1:x10; op2:x11; op1val:0xd7d6d5d4d3d2d1d0; op2val:0xdfdedddcdbdad9d8; immval:0x0
TEST_RI_OP(sm4ed, x10, x11, 0x0, 0x0000000000000000, 0xd7d6d5d4d3d2d1d0, 0xdfdedddcdbdad9d8, x2, 192, x4)

inst_45:
// rs1_val == 0xcfcecdcccbcac9c8 and rs2_val == 0xc7c6c5c4c3c2c1c0 and imm_val == 3 
// opcode: sm4ed; op1:x10; op2:x11; op1val:0xcfcecdcccbcac9c8; op2val:0xc7c6c5c4c3c2c1c0; immval:0x3
TEST_RI_OP(sm4ed, x10, x11, 0x3, 0x0000000000000000, 0xcfcecdcccbcac9c8, 0xc7c6c5c4c3c2c1c0, x2, 200, x4)

inst_46:
// rs1_val == 0xcfcecdcccbcac9c8 and rs2_val == 0xc7c6c5c4c3c2c1c0 and imm_val == 2 
// opcode: sm4ed; op1:x10; op2:x11; op1val:0xcfcecdcccbcac9c8; op2val:0xc7c6c5c4c3c2c1c0; immval:0x2
TEST_RI_OP(sm4ed, x10, x11, 0x2, 0x0000000000000000, 0xcfcecdcccbcac9c8, 0xc7c6c5c4c3c2c1c0, x2, 208, x4)

inst_47:
// rs1_val == 0xcfcecdcccbcac9c8 and rs2_val == 0xc7c6c5c4c3c2c1c0 and imm_val == 1 
// opcode: sm4ed; op1:x10; op2:x11; op1val:0xcfcecdcccbcac9c8; op2val:0xc7c6c5c4c3c2c1c0; immval:0x1
TEST_RI_OP(sm4ed, x10, x11, 0x1, 0x0000000000000000, 0xcfcecdcccbcac9c8, 0xc7c6c5c4c3c2c1c0, x2, 216, x4)

inst_48:
// rs1_val == 0xcfcecdcccbcac9c8 and rs2_val == 0xc7c6c5c4c3c2c1c0 and imm_val == 0 
// opcode: sm4ed; op1:x10; op2:x11; op1val:0xcfcecdcccbcac9c8; op2val:0xc7c6c5c4c3c2c1c0; immval:0x0
TEST_RI_OP(sm4ed, x10, x11, 0x0, 0x0000000000000000, 0xcfcecdcccbcac9c8, 0xc7c6c5c4c3c2c1c0, x2, 224, x4)

inst_49:
// rs1_val == 0xc7c6c5c4c3c2c1c0 and rs2_val == 0xcfcecdcccbcac9c8 and imm_val == 3 
// opcode: sm4ed; op1:x10; op2:x11; op1val:0xc7c6c5c4c3c2c1c0; op2val:0xcfcecdcccbcac9c8; immval:0x3
TEST_RI_OP(sm4ed, x10, x11, 0x3, 0x0000000000000000, 0xc7c6c5c4c3c2c1c0, 0xcfcecdcccbcac9c8, x2, 232, x4)

inst_50:
// rs1_val == 0xc7c6c5c4c3c2c1c0 and rs2_val == 0xcfcecdcccbcac9c8 and imm_val == 2 
// opcode: sm4ed; op1:x10; op2:x11; op1val:0xc7c6c5c4c3c2c1c0; op2val:0xcfcecdcccbcac9c8; immval:0x2
TEST_RI_OP(sm4ed, x10, x11, 0x2, 0x0000000000000000, 0xc7c6c5c4c3c2c1c0, 0xcfcecdcccbcac9c8, x2, 240, x4)

inst_51:
// rs1_val == 0xc7c6c5c4c3c2c1c0 and rs2_val == 0xcfcecdcccbcac9c8 and imm_val == 1 
// opcode: sm4ed; op1:x10; op2:x11; op1val:0xc7c6c5c4c3c2c1c0; op2val:0xcfcecdcccbcac9c8; immval:0x1
TEST_RI_OP(sm4ed, x10, x11, 0x1, 0x0000000000000000, 0xc7c6c5c4c3c2c1c0, 0xcfcecdcccbcac9c8, x2, 248, x4)

inst_52:
// rs1_val == 0xc7c6c5c4c3c2c1c0 and rs2_val == 0xcfcecdcccbcac9c8 and imm_val == 0 
// opcode: sm4ed; op1:x10; op2:x11; op1val:0xc7c6c5c4c3c2c1c0; op2val:0xcfcecdcccbcac9c8; immval:0x0
TEST_RI_OP(sm4ed, x10, x11, 0x0, 0x0000000000000000, 0xc7c6c5c4c3c2c1c0, 0xcfcecdcccbcac9c8, x2, 256, x4)

inst_53:
// rs1_val == 0xbfbebdbcbbbab9b8 and rs2_val == 0xb7b6b5b4b3b2b1b0 and imm_val == 3 
// opcode: sm4ed; op1:x10; op2:x11; op1val:0xbfbebdbcbbbab9b8; op2val:0xb7b6b5b4b3b2b1b0; immval:0x3
TEST_RI_OP(sm4ed, x10, x11, 0x3, 0x0000000000000000, 0xbfbebdbcbbbab9b8, 0xb7b6b5b4b3b2b1b0, x2, 264, x4)

inst_54:
// rs1_val == 0xbfbebdbcbbbab9b8 and rs2_val == 0xb7b6b5b4b3b2b1b0 and imm_val == 2 
// opcode: sm4ed; op1:x10; op2:x11; op1val:0xbfbebdbcbbbab9b8; op2val:0xb7b6b5b4b3b2b1b0; immval:0x2
TEST_RI_OP(sm4ed, x10, x11, 0x2, 0x0000000000000000, 0xbfbebdbcbbbab9b8, 0xb7b6b5b4b3b2b1b0, x2, 272, x4)

inst_55:
// rs1_val == 0xbfbebdbcbbbab9b8 and rs2_val == 0xb7b6b5b4b3b2b1b0 and imm_val == 1 
// opcode: sm4ed; op1:x10; op2:x11; op1val:0xbfbebdbcbbbab9b8; op2val:0xb7b6b5b4b3b2b1b0; immval:0x1
TEST_RI_OP(sm4ed, x10, x11, 0x1, 0x0000000000000000, 0xbfbebdbcbbbab9b8, 0xb7b6b5b4b3b2b1b0, x2, 280, x4)

inst_56:
// rs1_val == 0xbfbebdbcbbbab9b8 and rs2_val == 0xb7b6b5b4b3b2b1b0 and imm_val == 0 
// opcode: sm4ed; op1:x10; op2:x11; op1val:0xbfbebdbcbbbab9b8; op2val:0xb7b6b5b4b3b2b1b0; immval:0x0
TEST_RI_OP(sm4ed, x10, x11, 0x0, 0x0000000000000000, 0xbfbebdbcbbbab9b8, 0xb7b6b5b4b3b2b1b0, x2, 288, x4)

inst_57:
// rs1_val == 0xb7b6b5b4b3b2b1b0 and rs2_val == 0xbfbebdbcbbbab9b8 and imm_val == 3 
// opcode: sm4ed; op1:x10; op2:x11; op1val:0xb7b6b5b4b3b2b1b0; op2val:0xbfbebdbcbbbab9b8; immval:0x3
TEST_RI_OP(sm4ed, x10, x11, 0x3, 0x0000000000000000, 0xb7b6b5b4b3b2b1b0, 0xbfbebdbcbbbab9b8, x2, 296, x4)

inst_58:
// rs1_val == 0xb7b6b5b4b3b2b1b0 and rs2_val == 0xbfbebdbcbbbab9b8 and imm_val == 2 
// opcode: sm4ed; op1:x10; op2:x11; op1val:0xb7b6b5b4b3b2b1b0; op2val:0xbfbebdbcbbbab9b8; immval:0x2
TEST_RI_OP(sm4ed, x10, x11, 0x2, 0x0000000000000000, 0xb7b6b5b4b3b2b1b0, 0xbfbebdbcbbbab9b8, x2, 304, x4)

inst_59:
// rs1_val == 0xb7b6b5b4b3b2b1b0 and rs2_val == 0xbfbebdbcbbbab9b8 and imm_val == 1 
// opcode: sm4ed; op1:x10; op2:x11; op1val:0xb7b6b5b4b3b2b1b0; op2val:0xbfbebdbcbbbab9b8; immval:0x1
TEST_RI_OP(sm4ed, x10, x11, 0x1, 0x0000000000000000, 0xb7b6b5b4b3b2b1b0, 0xbfbebdbcbbbab9b8, x2, 312, x4)

inst_60:
// rs1_val == 0xb7b6b5b4b3b2b1b0 and rs2_val == 0xbfbebdbcbbbab9b8 and imm_val == 0 
// opcode: sm4ed; op1:x10; op2:x11; op1val:0xb7b6b5b4b3b2b1b0; op2val:0xbfbebdbcbbbab9b8; immval:0x0
TEST_RI_OP(sm4ed, x10, x11, 0x0, 0x0000000000000000, 0xb7b6b5b4b3b2b1b0, 0xbfbebdbcbbbab9b8, x2, 320, x4)

inst_61:
// rs1_val == 0xafaeadacabaaa9a8 and rs2_val == 0xa7a6a5a4a3a2a1a0 and imm_val == 3 
// opcode: sm4ed; op1:x10; op2:x11; op1val:0xafaeadacabaaa9a8; op2val:0xa7a6a5a4a3a2a1a0; immval:0x3
TEST_RI_OP(sm4ed, x10, x11, 0x3, 0x0000000000000000, 0xafaeadacabaaa9a8, 0xa7a6a5a4a3a2a1a0, x2, 328, x4)

inst_62:
// rs1_val == 0xafaeadacabaaa9a8 and rs2_val == 0xa7a6a5a4a3a2a1a0 and imm_val == 2 
// opcode: sm4ed; op1:x10; op2:x11; op1val:0xafaeadacabaaa9a8; op2val:0xa7a6a5a4a3a2a1a0; immval:0x2
TEST_RI_OP(sm4ed, x10, x11, 0x2, 0x0000000000000000, 0xafaeadacabaaa9a8, 0xa7a6a5a4a3a2a1a0, x2, 336, x4)

inst_63:
// rs1_val == 0xafaeadacabaaa9a8 and rs2_val == 0xa7a6a5a4a3a2a1a0 and imm_val == 1 
// opcode: sm4ed; op1:x10; op2:x11; op1val:0xafaeadacabaaa9a8; op2val:0xa7a6a5a4a3a2a1a0; immval:0x1
TEST_RI_OP(sm4ed, x10, x11, 0x1, 0x0000000000000000, 0xafaeadacabaaa9a8, 0xa7a6a5a4a3a2a1a0, x2, 344, x4)

inst_64:
// rs1_val == 0xafaeadacabaaa9a8 and rs2_val == 0xa7a6a5a4a3a2a1a0 and imm_val == 0 
// opcode: sm4ed; op1:x10; op2:x11; op1val:0xafaeadacabaaa9a8; op2val:0xa7a6a5a4a3a2a1a0; immval:0x0
TEST_RI_OP(sm4ed, x10, x11, 0x0, 0x0000000000000000, 0xafaeadacabaaa9a8, 0xa7a6a5a4a3a2a1a0, x2, 352, x4)

inst_65:
// rs1_val == 0xa7a6a5a4a3a2a1a0 and rs2_val == 0xafaeadacabaaa9a8 and imm_val == 3 
// opcode: sm4ed; op1:x10; op2:x11; op1val:0xa7a6a5a4a3a2a1a0; op2val:0xafaeadacabaaa9a8; immval:0x3
TEST_RI_OP(sm4ed, x10, x11, 0x3, 0x0000000000000000, 0xa7a6a5a4a3a2a1a0, 0xafaeadacabaaa9a8, x2, 360, x4)

inst_66:
// rs1_val == 0xa7a6a5a4a3a2a1a0 and rs2_val == 0xafaeadacabaaa9a8 and imm_val == 2 
// opcode: sm4ed; op1:x10; op2:x11; op1val:0xa7a6a5a4a3a2a1a0; op2val:0xafaeadacabaaa9a8; immval:0x2
TEST_RI_OP(sm4ed, x10, x11, 0x2, 0x0000000000000000, 0xa7a6a5a4a3a2a1a0, 0xafaeadacabaaa9a8, x2, 368, x4)

inst_67:
// rs1_val == 0xa7a6a5a4a3a2a1a0 and rs2_val == 0xafaeadacabaaa9a8 and imm_val == 1 
// opcode: sm4ed; op1:x10; op2:x11; op1val:0xa7a6a5a4a3a2a1a0; op2val:0xafaeadacabaaa9a8; immval:0x1
TEST_RI_OP(sm4ed, x10, x11, 0x1, 0x0000000000000000, 0xa7a6a5a4a3a2a1a0, 0xafaeadacabaaa9a8, x2, 376, x4)

inst_68:
// rs1_val == 0xa7a6a5a4a3a2a1a0 and rs2_val == 0xafaeadacabaaa9a8 and imm_val == 0 
// opcode: sm4ed; op1:x10; op2:x11; op1val:0xa7a6a5a4a3a2a1a0; op2val:0xafaeadacabaaa9a8; immval:0x0
TEST_RI_OP(sm4ed, x10, x11, 0x0, 0x0000000000000000, 0xa7a6a5a4a3a2a1a0, 0xafaeadacabaaa9a8, x2, 384, x4)

inst_69:
// rs1_val == 0x9f9e9d9c9b9a9998 and rs2_val == 0x9796959493929190 and imm_val == 3 
// opcode: sm4ed; op1:x10; op2:x11; op1val:0x9f9e9d9c9b9a9998; op2val:0x9796959493929190; immval:0x3
TEST_RI_OP(sm4ed, x10, x11, 0x3, 0x0000000000000000, 0x9f9e9d9c9b9a9998, 0x9796959493929190, x2, 392, x4)

inst_70:
// rs1_val == 0x9f9e9d9c9b9a9998 and rs2_val == 0x9796959493929190 and imm_val == 2 
// opcode: sm4ed; op1:x10; op2:x11; op1val:0x9f9e9d9c9b9a9998; op2val:0x9796959493929190; immval:0x2
TEST_RI_OP(sm4ed, x10, x11, 0x2, 0x0000000000000000, 0x9f9e9d9c9b9a9998, 0x9796959493929190, x2, 400, x4)

inst_71:
// rs1_val == 0x9f9e9d9c9b9a9998 and rs2_val == 0x9796959493929190 and imm_val == 1 
// opcode: sm4ed; op1:x10; op2:x11; op1val:0x9f9e9d9c9b9a9998; op2val:0x9796959493929190; immval:0x1
TEST_RI_OP(sm4ed, x10, x11, 0x1, 0x0000000000000000, 0x9f9e9d9c9b9a9998, 0x9796959493929190, x2, 408, x4)

inst_72:
// rs1_val == 0x9f9e9d9c9b9a9998 and rs2_val == 0x9796959493929190 and imm_val == 0 
// opcode: sm4ed; op1:x10; op2:x11; op1val:0x9f9e9d9c9b9a9998; op2val:0x9796959493929190; immval:0x0
TEST_RI_OP(sm4ed, x10, x11, 0x0, 0x0000000000000000, 0x9f9e9d9c9b9a9998, 0x9796959493929190, x2, 416, x4)

inst_73:
// rs1_val == 0x9796959493929190 and rs2_val == 0x9f9e9d9c9b9a9998 and imm_val == 3 
// opcode: sm4ed; op1:x10; op2:x11; op1val:0x9796959493929190; op2val:0x9f9e9d9c9b9a9998; immval:0x3
TEST_RI_OP(sm4ed, x10, x11, 0x3, 0x0000000000000000, 0x9796959493929190, 0x9f9e9d9c9b9a9998, x2, 424, x4)

inst_74:
// rs1_val == 0x9796959493929190 and rs2_val == 0x9f9e9d9c9b9a9998 and imm_val == 2 
// opcode: sm4ed; op1:x10; op2:x11; op1val:0x9796959493929190; op2val:0x9f9e9d9c9b9a9998; immval:0x2
TEST_RI_OP(sm4ed, x10, x11, 0x2, 0x0000000000000000, 0x9796959493929190, 0x9f9e9d9c9b9a9998, x2, 432, x4)

inst_75:
// rs1_val == 0x9796959493929190 and rs2_val == 0x9f9e9d9c9b9a9998 and imm_val == 1 
// opcode: sm4ed; op1:x10; op2:x11; op1val:0x9796959493929190; op2val:0x9f9e9d9c9b9a9998; immval:0x1
TEST_RI_OP(sm4ed, x10, x11, 0x1, 0x0000000000000000, 0x9796959493929190, 0x9f9e9d9c9b9a9998, x2, 440, x4)

inst_76:
// rs1_val == 0x9796959493929190 and rs2_val == 0x9f9e9d9c9b9a9998 and imm_val == 0 
// opcode: sm4ed; op1:x10; op2:x11; op1val:0x9796959493929190; op2val:0x9f9e9d9c9b9a9998; immval:0x0
TEST_RI_OP(sm4ed, x10, x11, 0x0, 0x0000000000000000, 0x9796959493929190, 0x9f9e9d9c9b9a9998, x2, 448, x4)

inst_77:
// rs1_val == 0x8f8e8d8c8b8a8988 and rs2_val == 0x8786858483828180 and imm_val == 3 
// opcode: sm4ed; op1:x10; op2:x11; op1val:0x8f8e8d8c8b8a8988; op2val:0x8786858483828180; immval:0x3
TEST_RI_OP(sm4ed, x10, x11, 0x3, 0x0000000000000000, 0x8f8e8d8c8b8a8988, 0x8786858483828180, x2, 456, x4)

inst_78:
// rs1_val == 0x8f8e8d8c8b8a8988 and rs2_val == 0x8786858483828180 and imm_val == 2 
// opcode: sm4ed; op1:x10; op2:x11; op1val:0x8f8e8d8c8b8a8988; op2val:0x8786858483828180; immval:0x2
TEST_RI_OP(sm4ed, x10, x11, 0x2, 0x0000000000000000, 0x8f8e8d8c8b8a8988, 0x8786858483828180, x2, 464, x4)

inst_79:
// rs1_val == 0x8f8e8d8c8b8a8988 and rs2_val == 0x8786858483828180 and imm_val == 1 
// opcode: sm4ed; op1:x10; op2:x11; op1val:0x8f8e8d8c8b8a8988; op2val:0x8786858483828180; immval:0x1
TEST_RI_OP(sm4ed, x10, x11, 0x1, 0x0000000000000000, 0x8f8e8d8c8b8a8988, 0x8786858483828180, x2, 472, x4)

inst_80:
// rs1_val == 0x8f8e8d8c8b8a8988 and rs2_val == 0x8786858483828180 and imm_val == 0 
// opcode: sm4ed; op1:x10; op2:x11; op1val:0x8f8e8d8c8b8a8988; op2val:0x8786858483828180; immval:0x0
TEST_RI_OP(sm4ed, x10, x11, 0x0, 0x0000000000000000, 0x8f8e8d8c8b8a8988, 0x8786858483828180, x2, 480, x4)

inst_81:
// rs1_val == 0x8786858483828180 and rs2_val == 0x8f8e8d8c8b8a8988 and imm_val == 3 
// opcode: sm4ed; op1:x10; op2:x11; op1val:0x8786858483828180; op2val:0x8f8e8d8c8b8a8988; immval:0x3
TEST_RI_OP(sm4ed, x10, x11, 0x3, 0x0000000000000000, 0x8786858483828180, 0x8f8e8d8c8b8a8988, x2, 488, x4)

inst_82:
// rs1_val == 0x8786858483828180 and rs2_val == 0x8f8e8d8c8b8a8988 and imm_val == 2 
// opcode: sm4ed; op1:x10; op2:x11; op1val:0x8786858483828180; op2val:0x8f8e8d8c8b8a8988; immval:0x2
TEST_RI_OP(sm4ed, x10, x11, 0x2, 0x0000000000000000, 0x8786858483828180, 0x8f8e8d8c8b8a8988, x2, 496, x4)

inst_83:
// rs1_val == 0x8786858483828180 and rs2_val == 0x8f8e8d8c8b8a8988 and imm_val == 1 
// opcode: sm4ed; op1:x10; op2:x11; op1val:0x8786858483828180; op2val:0x8f8e8d8c8b8a8988; immval:0x1
TEST_RI_OP(sm4ed, x10, x11, 0x1, 0x0000000000000000, 0x8786858483828180, 0x8f8e8d8c8b8a8988, x2, 504, x4)

inst_84:
// rs1_val == 0x8786858483828180 and rs2_val == 0x8f8e8d8c8b8a8988 and imm_val == 0 
// opcode: sm4ed; op1:x10; op2:x11; op1val:0x8786858483828180; op2val:0x8f8e8d8c8b8a8988; immval:0x0
TEST_RI_OP(sm4ed, x10, x11, 0x0, 0x0000000000000000, 0x8786858483828180, 0x8f8e8d8c8b8a8988, x2, 512, x4)

inst_85:
// rs1_val == 0x7f7e7d7c7b7a7978 and rs2_val == 0x7776757473727170 and imm_val == 3 
// opcode: sm4ed; op1:x10; op2:x11; op1val:0x7f7e7d7c7b7a7978; op2val:0x7776757473727170; immval:0x3
TEST_RI_OP(sm4ed, x10, x11, 0x3, 0x0000000000000000, 0x7f7e7d7c7b7a7978, 0x7776757473727170, x2, 520, x4)

inst_86:
// rs1_val == 0x7f7e7d7c7b7a7978 and rs2_val == 0x7776757473727170 and imm_val == 2 
// opcode: sm4ed; op1:x10; op2:x11; op1val:0x7f7e7d7c7b7a7978; op2val:0x7776757473727170; immval:0x2
TEST_RI_OP(sm4ed, x10, x11, 0x2, 0x0000000000000000, 0x7f7e7d7c7b7a7978, 0x7776757473727170, x2, 528, x4)

inst_87:
// rs1_val == 0x7f7e7d7c7b7a7978 and rs2_val == 0x7776757473727170 and imm_val == 1 
// opcode: sm4ed; op1:x10; op2:x11; op1val:0x7f7e7d7c7b7a7978; op2val:0x7776757473727170; immval:0x1
TEST_RI_OP(sm4ed, x10, x11, 0x1, 0x0000000000000000, 0x7f7e7d7c7b7a7978, 0x7776757473727170, x2, 536, x4)

inst_88:
// rs1_val == 0x7f7e7d7c7b7a7978 and rs2_val == 0x7776757473727170 and imm_val == 0 
// opcode: sm4ed; op1:x10; op2:x11; op1val:0x7f7e7d7c7b7a7978; op2val:0x7776757473727170; immval:0x0
TEST_RI_OP(sm4ed, x10, x11, 0x0, 0x0000000000000000, 0x7f7e7d7c7b7a7978, 0x7776757473727170, x2, 544, x4)

inst_89:
// rs1_val == 0x7776757473727170 and rs2_val == 0x7f7e7d7c7b7a7978 and imm_val == 3 
// opcode: sm4ed; op1:x10; op2:x11; op1val:0x7776757473727170; op2val:0x7f7e7d7c7b7a7978; immval:0x3
TEST_RI_OP(sm4ed, x10, x11, 0x3, 0x0000000000000000, 0x7776757473727170, 0x7f7e7d7c7b7a7978, x2, 552, x4)

inst_90:
// rs1_val == 0x7776757473727170 and rs2_val == 0x7f7e7d7c7b7a7978 and imm_val == 2 
// opcode: sm4ed; op1:x10; op2:x11; op1val:0x7776757473727170; op2val:0x7f7e7d7c7b7a7978; immval:0x2
TEST_RI_OP(sm4ed, x10, x11, 0x2, 0x0000000000000000, 0x7776757473727170, 0x7f7e7d7c7b7a7978, x2, 560, x4)

inst_91:
// rs1_val == 0x7776757473727170 and rs2_val == 0x7f7e7d7c7b7a7978 and imm_val == 1 
// opcode: sm4ed; op1:x10; op2:x11; op1val:0x7776757473727170; op2val:0x7f7e7d7c7b7a7978; immval:0x1
TEST_RI_OP(sm4ed, x10, x11, 0x1, 0x0000000000000000, 0x7776757473727170, 0x7f7e7d7c7b7a7978, x2, 568, x4)

inst_92:
// rs1_val == 0x7776757473727170 and rs2_val == 0x7f7e7d7c7b7a7978 and imm_val == 0 
// opcode: sm4ed; op1:x10; op2:x11; op1val:0x7776757473727170; op2val:0x7f7e7d7c7b7a7978; immval:0x0
TEST_RI_OP(sm4ed, x10, x11, 0x0, 0x0000000000000000, 0x7776757473727170, 0x7f7e7d7c7b7a7978, x2, 576, x4)

inst_93:
// rs1_val == 0x6f6e6d6c6b6a6968 and rs2_val == 0x6766656463626160 and imm_val == 3 
// opcode: sm4ed; op1:x10; op2:x11; op1val:0x6f6e6d6c6b6a6968; op2val:0x6766656463626160; immval:0x3
TEST_RI_OP(sm4ed, x10, x11, 0x3, 0x0000000000000000, 0x6f6e6d6c6b6a6968, 0x6766656463626160, x2, 584, x4)

inst_94:
// rs1_val == 0x6f6e6d6c6b6a6968 and rs2_val == 0x6766656463626160 and imm_val == 2 
// opcode: sm4ed; op1:x10; op2:x11; op1val:0x6f6e6d6c6b6a6968; op2val:0x6766656463626160; immval:0x2
TEST_RI_OP(sm4ed, x10, x11, 0x2, 0x0000000000000000, 0x6f6e6d6c6b6a6968, 0x6766656463626160, x2, 592, x4)

inst_95:
// rs1_val == 0x6f6e6d6c6b6a6968 and rs2_val == 0x6766656463626160 and imm_val == 1 
// opcode: sm4ed; op1:x10; op2:x11; op1val:0x6f6e6d6c6b6a6968; op2val:0x6766656463626160; immval:0x1
TEST_RI_OP(sm4ed, x10, x11, 0x1, 0x0000000000000000, 0x6f6e6d6c6b6a6968, 0x6766656463626160, x2, 600, x4)

inst_96:
// rs1_val == 0x6f6e6d6c6b6a6968 and rs2_val == 0x6766656463626160 and imm_val == 0 
// opcode: sm4ed; op1:x10; op2:x11; op1val:0x6f6e6d6c6b6a6968; op2val:0x6766656463626160; immval:0x0
TEST_RI_OP(sm4ed, x10, x11, 0x0, 0x0000000000000000, 0x6f6e6d6c6b6a6968, 0x6766656463626160, x2, 608, x4)

inst_97:
// rs1_val == 0x6766656463626160 and rs2_val == 0x6f6e6d6c6b6a6968 and imm_val == 3 
// opcode: sm4ed; op1:x10; op2:x11; op1val:0x6766656463626160; op2val:0x6f6e6d6c6b6a6968; immval:0x3
TEST_RI_OP(sm4ed, x10, x11, 0x3, 0x0000000000000000, 0x6766656463626160, 0x6f6e6d6c6b6a6968, x2, 616, x4)

inst_98:
// rs1_val == 0x6766656463626160 and rs2_val == 0x6f6e6d6c6b6a6968 and imm_val == 2 
// opcode: sm4ed; op1:x10; op2:x11; op1val:0x6766656463626160; op2val:0x6f6e6d6c6b6a6968; immval:0x2
TEST_RI_OP(sm4ed, x10, x11, 0x2, 0x0000000000000000, 0x6766656463626160, 0x6f6e6d6c6b6a6968, x2, 624, x4)

inst_99:
// rs1_val == 0x6766656463626160 and rs2_val == 0x6f6e6d6c6b6a6968 and imm_val == 1 
// opcode: sm4ed; op1:x10; op2:x11; op1val:0x6766656463626160; op2val:0x6f6e6d6c6b6a6968; immval:0x1
TEST_RI_OP(sm4ed, x10, x11, 0x1, 0x0000000000000000, 0x6766656463626160, 0x6f6e6d6c6b6a6968, x2, 632, x4)

inst_100:
// rs1_val == 0x6766656463626160 and rs2_val == 0x6f6e6d6c6b6a6968 and imm_val == 0 
// opcode: sm4ed; op1:x10; op2:x11; op1val:0x6766656463626160; op2val:0x6f6e6d6c6b6a6968; immval:0x0
TEST_RI_OP(sm4ed, x10, x11, 0x0, 0x0000000000000000, 0x6766656463626160, 0x6f6e6d6c6b6a6968, x2, 640, x4)

inst_101:
// rs1_val == 0x5f5e5d5c5b5a5958 and rs2_val == 0x5756555453525150 and imm_val == 3 
// opcode: sm4ed; op1:x10; op2:x11; op1val:0x5f5e5d5c5b5a5958; op2val:0x5756555453525150; immval:0x3
TEST_RI_OP(sm4ed, x10, x11, 0x3, 0x0000000000000000, 0x5f5e5d5c5b5a5958, 0x5756555453525150, x2, 648, x4)

inst_102:
// rs1_val == 0x5f5e5d5c5b5a5958 and rs2_val == 0x5756555453525150 and imm_val == 2 
// opcode: sm4ed; op1:x10; op2:x11; op1val:0x5f5e5d5c5b5a5958; op2val:0x5756555453525150; immval:0x2
TEST_RI_OP(sm4ed, x10, x11, 0x2, 0x0000000000000000, 0x5f5e5d5c5b5a5958, 0x5756555453525150, x2, 656, x4)

inst_103:
// rs1_val == 0x5f5e5d5c5b5a5958 and rs2_val == 0x5756555453525150 and imm_val == 1 
// opcode: sm4ed; op1:x10; op2:x11; op1val:0x5f5e5d5c5b5a5958; op2val:0x5756555453525150; immval:0x1
TEST_RI_OP(sm4ed, x10, x11, 0x1, 0x0000000000000000, 0x5f5e5d5c5b5a5958, 0x5756555453525150, x2, 664, x4)

inst_104:
// rs1_val == 0x5f5e5d5c5b5a5958 and rs2_val == 0x5756555453525150 and imm_val == 0 
// opcode: sm4ed; op1:x10; op2:x11; op1val:0x5f5e5d5c5b5a5958; op2val:0x5756555453525150; immval:0x0
TEST_RI_OP(sm4ed, x10, x11, 0x0, 0x0000000000000000, 0x5f5e5d5c5b5a5958, 0x5756555453525150, x2, 672, x4)

inst_105:
// rs1_val == 0x5756555453525150 and rs2_val == 0x5f5e5d5c5b5a5958 and imm_val == 3 
// opcode: sm4ed; op1:x10; op2:x11; op1val:0x5756555453525150; op2val:0x5f5e5d5c5b5a5958; immval:0x3
TEST_RI_OP(sm4ed, x10, x11, 0x3, 0x0000000000000000, 0x5756555453525150, 0x5f5e5d5c5b5a5958, x2, 680, x4)

inst_106:
// rs1_val == 0x5756555453525150 and rs2_val == 0x5f5e5d5c5b5a5958 and imm_val == 2 
// opcode: sm4ed; op1:x10; op2:x11; op1val:0x5756555453525150; op2val:0x5f5e5d5c5b5a5958; immval:0x2
TEST_RI_OP(sm4ed, x10, x11, 0x2, 0x0000000000000000, 0x5756555453525150, 0x5f5e5d5c5b5a5958, x2, 688, x4)

inst_107:
// rs1_val == 0x5756555453525150 and rs2_val == 0x5f5e5d5c5b5a5958 and imm_val == 1 
// opcode: sm4ed; op1:x10; op2:x11; op1val:0x5756555453525150; op2val:0x5f5e5d5c5b5a5958; immval:0x1
TEST_RI_OP(sm4ed, x10, x11, 0x1, 0x0000000000000000, 0x5756555453525150, 0x5f5e5d5c5b5a5958, x2, 696, x4)

inst_108:
// rs1_val == 0x5756555453525150 and rs2_val == 0x5f5e5d5c5b5a5958 and imm_val == 0 
// opcode: sm4ed; op1:x10; op2:x11; op1val:0x5756555453525150; op2val:0x5f5e5d5c5b5a5958; immval:0x0
TEST_RI_OP(sm4ed, x10, x11, 0x0, 0x0000000000000000, 0x5756555453525150, 0x5f5e5d5c5b5a5958, x2, 704, x4)

inst_109:
// rs1_val == 0x4f4e4d4c4b4a4948 and rs2_val == 0x4746454443424140 and imm_val == 3 
// opcode: sm4ed; op1:x10; op2:x11; op1val:0x4f4e4d4c4b4a4948; op2val:0x4746454443424140; immval:0x3
TEST_RI_OP(sm4ed, x10, x11, 0x3, 0x0000000000000000, 0x4f4e4d4c4b4a4948, 0x4746454443424140, x2, 712, x4)

inst_110:
// rs1_val == 0x4f4e4d4c4b4a4948 and rs2_val == 0x4746454443424140 and imm_val == 2 
// opcode: sm4ed; op1:x10; op2:x11; op1val:0x4f4e4d4c4b4a4948; op2val:0x4746454443424140; immval:0x2
TEST_RI_OP(sm4ed, x10, x11, 0x2, 0x0000000000000000, 0x4f4e4d4c4b4a4948, 0x4746454443424140, x2, 720, x4)

inst_111:
// rs1_val == 0x4f4e4d4c4b4a4948 and rs2_val == 0x4746454443424140 and imm_val == 1 
// opcode: sm4ed; op1:x10; op2:x11; op1val:0x4f4e4d4c4b4a4948; op2val:0x4746454443424140; immval:0x1
TEST_RI_OP(sm4ed, x10, x11, 0x1, 0x0000000000000000, 0x4f4e4d4c4b4a4948, 0x4746454443424140, x2, 728, x4)

inst_112:
// rs1_val == 0x4f4e4d4c4b4a4948 and rs2_val == 0x4746454443424140 and imm_val == 0 
// opcode: sm4ed; op1:x10; op2:x11; op1val:0x4f4e4d4c4b4a4948; op2val:0x4746454443424140; immval:0x0
TEST_RI_OP(sm4ed, x10, x11, 0x0, 0x0000000000000000, 0x4f4e4d4c4b4a4948, 0x4746454443424140, x2, 736, x4)

inst_113:
// rs1_val == 0x4746454443424140 and rs2_val == 0x4f4e4d4c4b4a4948 and imm_val == 3 
// opcode: sm4ed; op1:x10; op2:x11; op1val:0x4746454443424140; op2val:0x4f4e4d4c4b4a4948; immval:0x3
TEST_RI_OP(sm4ed, x10, x11, 0x3, 0x0000000000000000, 0x4746454443424140, 0x4f4e4d4c4b4a4948, x2, 744, x4)

inst_114:
// rs1_val == 0x4746454443424140 and rs2_val == 0x4f4e4d4c4b4a4948 and imm_val == 2 
// opcode: sm4ed; op1:x10; op2:x11; op1val:0x4746454443424140; op2val:0x4f4e4d4c4b4a4948; immval:0x2
TEST_RI_OP(sm4ed, x10, x11, 0x2, 0x0000000000000000, 0x4746454443424140, 0x4f4e4d4c4b4a4948, x2, 752, x4)

inst_115:
// rs1_val == 0x4746454443424140 and rs2_val == 0x4f4e4d4c4b4a4948 and imm_val == 1 
// opcode: sm4ed; op1:x10; op2:x11; op1val:0x4746454443424140; op2val:0x4f4e4d4c4b4a4948; immval:0x1
TEST_RI_OP(sm4ed, x10, x11, 0x1, 0x0000000000000000, 0x4746454443424140, 0x4f4e4d4c4b4a4948, x2, 760, x4)

inst_116:
// rs1_val == 0x4746454443424140 and rs2_val == 0x4f4e4d4c4b4a4948 and imm_val == 0 
// opcode: sm4ed; op1:x10; op2:x11; op1val:0x4746454443424140; op2val:0x4f4e4d4c4b4a4948; immval:0x0
TEST_RI_OP(sm4ed, x10, x11, 0x0, 0x0000000000000000, 0x4746454443424140, 0x4f4e4d4c4b4a4948, x2, 768, x4)

inst_117:
// rs1_val == 0x3f3e3d3c3b3a3938 and rs2_val == 0x3736353433323130 and imm_val == 3 
// opcode: sm4ed; op1:x10; op2:x11; op1val:0x3f3e3d3c3b3a3938; op2val:0x3736353433323130; immval:0x3
TEST_RI_OP(sm4ed, x10, x11, 0x3, 0x0000000000000000, 0x3f3e3d3c3b3a3938, 0x3736353433323130, x2, 776, x4)

inst_118:
// rs1_val == 0x3f3e3d3c3b3a3938 and rs2_val == 0x3736353433323130 and imm_val == 2 
// opcode: sm4ed; op1:x10; op2:x11; op1val:0x3f3e3d3c3b3a3938; op2val:0x3736353433323130; immval:0x2
TEST_RI_OP(sm4ed, x10, x11, 0x2, 0x0000000000000000, 0x3f3e3d3c3b3a3938, 0x3736353433323130, x2, 784, x4)

inst_119:
// rs1_val == 0x3f3e3d3c3b3a3938 and rs2_val == 0x3736353433323130 and imm_val == 1 
// opcode: sm4ed; op1:x10; op2:x11; op1val:0x3f3e3d3c3b3a3938; op2val:0x3736353433323130; immval:0x1
TEST_RI_OP(sm4ed, x10, x11, 0x1, 0x0000000000000000, 0x3f3e3d3c3b3a3938, 0x3736353433323130, x2, 792, x4)

inst_120:
// rs1_val == 0x3f3e3d3c3b3a3938 and rs2_val == 0x3736353433323130 and imm_val == 0 
// opcode: sm4ed; op1:x10; op2:x11; op1val:0x3f3e3d3c3b3a3938; op2val:0x3736353433323130; immval:0x0
TEST_RI_OP(sm4ed, x10, x11, 0x0, 0x0000000000000000, 0x3f3e3d3c3b3a3938, 0x3736353433323130, x2, 800, x4)

inst_121:
// rs1_val == 0x3736353433323130 and rs2_val == 0x3f3e3d3c3b3a3938 and imm_val == 3 
// opcode: sm4ed; op1:x10; op2:x11; op1val:0x3736353433323130; op2val:0x3f3e3d3c3b3a3938; immval:0x3
TEST_RI_OP(sm4ed, x10, x11, 0x3, 0x0000000000000000, 0x3736353433323130, 0x3f3e3d3c3b3a3938, x2, 808, x4)

inst_122:
// rs1_val == 0x3736353433323130 and rs2_val == 0x3f3e3d3c3b3a3938 and imm_val == 2 
// opcode: sm4ed; op1:x10; op2:x11; op1val:0x3736353433323130; op2val:0x3f3e3d3c3b3a3938; immval:0x2
TEST_RI_OP(sm4ed, x10, x11, 0x2, 0x0000000000000000, 0x3736353433323130, 0x3f3e3d3c3b3a3938, x2, 816, x4)

inst_123:
// rs1_val == 0x3736353433323130 and rs2_val == 0x3f3e3d3c3b3a3938 and imm_val == 1 
// opcode: sm4ed; op1:x10; op2:x11; op1val:0x3736353433323130; op2val:0x3f3e3d3c3b3a3938; immval:0x1
TEST_RI_OP(sm4ed, x10, x11, 0x1, 0x0000000000000000, 0x3736353433323130, 0x3f3e3d3c3b3a3938, x2, 824, x4)

inst_124:
// rs1_val == 0x3736353433323130 and rs2_val == 0x3f3e3d3c3b3a3938 and imm_val == 0 
// opcode: sm4ed; op1:x10; op2:x11; op1val:0x3736353433323130; op2val:0x3f3e3d3c3b3a3938; immval:0x0
TEST_RI_OP(sm4ed, x10, x11, 0x0, 0x0000000000000000, 0x3736353433323130, 0x3f3e3d3c3b3a3938, x2, 832, x4)

inst_125:
// rs1_val == 0x2f2e2d2c2b2a2928 and rs2_val == 0x2726252423222120 and imm_val == 3 
// opcode: sm4ed; op1:x10; op2:x11; op1val:0x2f2e2d2c2b2a2928; op2val:0x2726252423222120; immval:0x3
TEST_RI_OP(sm4ed, x10, x11, 0x3, 0x0000000000000000, 0x2f2e2d2c2b2a2928, 0x2726252423222120, x2, 840, x4)

inst_126:
// rs1_val == 0x2f2e2d2c2b2a2928 and rs2_val == 0x2726252423222120 and imm_val == 2 
// opcode: sm4ed; op1:x10; op2:x11; op1val:0x2f2e2d2c2b2a2928; op2val:0x2726252423222120; immval:0x2
TEST_RI_OP(sm4ed, x10, x11, 0x2, 0x0000000000000000, 0x2f2e2d2c2b2a2928, 0x2726252423222120, x2, 848, x4)

inst_127:
// rs1_val == 0x2f2e2d2c2b2a2928 and rs2_val == 0x2726252423222120 and imm_val == 1 
// opcode: sm4ed; op1:x10; op2:x11; op1val:0x2f2e2d2c2b2a2928; op2val:0x2726252423222120; immval:0x1
TEST_RI_OP(sm4ed, x10, x11, 0x1, 0x0000000000000000, 0x2f2e2d2c2b2a2928, 0x2726252423222120, x2, 856, x4)

inst_128:
// rs1_val == 0x2f2e2d2c2b2a2928 and rs2_val == 0x2726252423222120 and imm_val == 0 
// opcode: sm4ed; op1:x10; op2:x11; op1val:0x2f2e2d2c2b2a2928; op2val:0x2726252423222120; immval:0x0
TEST_RI_OP(sm4ed, x10, x11, 0x0, 0x0000000000000000, 0x2f2e2d2c2b2a2928, 0x2726252423222120, x2, 864, x4)

inst_129:
// rs1_val == 0x2726252423222120 and rs2_val == 0x2f2e2d2c2b2a2928 and imm_val == 3 
// opcode: sm4ed; op1:x10; op2:x11; op1val:0x2726252423222120; op2val:0x2f2e2d2c2b2a2928; immval:0x3
TEST_RI_OP(sm4ed, x10, x11, 0x3, 0x0000000000000000, 0x2726252423222120, 0x2f2e2d2c2b2a2928, x2, 872, x4)

inst_130:
// rs1_val == 0x2726252423222120 and rs2_val == 0x2f2e2d2c2b2a2928 and imm_val == 2 
// opcode: sm4ed; op1:x10; op2:x11; op1val:0x2726252423222120; op2val:0x2f2e2d2c2b2a2928; immval:0x2
TEST_RI_OP(sm4ed, x10, x11, 0x2, 0x0000000000000000, 0x2726252423222120, 0x2f2e2d2c2b2a2928, x2, 880, x4)

inst_131:
// rs1_val == 0x2726252423222120 and rs2_val == 0x2f2e2d2c2b2a2928 and imm_val == 1 
// opcode: sm4ed; op1:x10; op2:x11; op1val:0x2726252423222120; op2val:0x2f2e2d2c2b2a2928; immval:0x1
TEST_RI_OP(sm4ed, x10, x11, 0x1, 0x0000000000000000, 0x2726252423222120, 0x2f2e2d2c2b2a2928, x2, 888, x4)

inst_132:
// rs1_val == 0x2726252423222120 and rs2_val == 0x2f2e2d2c2b2a2928 and imm_val == 0 
// opcode: sm4ed; op1:x10; op2:x11; op1val:0x2726252423222120; op2val:0x2f2e2d2c2b2a2928; immval:0x0
TEST_RI_OP(sm4ed, x10, x11, 0x0, 0x0000000000000000, 0x2726252423222120, 0x2f2e2d2c2b2a2928, x2, 896, x4)

inst_133:
// rs1_val == 0x1f1e1d1c1b1a1918 and rs2_val == 0x1716151413121110 and imm_val == 3 
// opcode: sm4ed; op1:x10; op2:x11; op1val:0x1f1e1d1c1b1a1918; op2val:0x1716151413121110; immval:0x3
TEST_RI_OP(sm4ed, x10, x11, 0x3, 0x0000000000000000, 0x1f1e1d1c1b1a1918, 0x1716151413121110, x2, 904, x4)

inst_134:
// rs1_val == 0x1f1e1d1c1b1a1918 and rs2_val == 0x1716151413121110 and imm_val == 2 
// opcode: sm4ed; op1:x10; op2:x11; op1val:0x1f1e1d1c1b1a1918; op2val:0x1716151413121110; immval:0x2
TEST_RI_OP(sm4ed, x10, x11, 0x2, 0x0000000000000000, 0x1f1e1d1c1b1a1918, 0x1716151413121110, x2, 912, x4)

inst_135:
// rs1_val == 0x1f1e1d1c1b1a1918 and rs2_val == 0x1716151413121110 and imm_val == 1 
// opcode: sm4ed; op1:x10; op2:x11; op1val:0x1f1e1d1c1b1a1918; op2val:0x1716151413121110; immval:0x1
TEST_RI_OP(sm4ed, x10, x11, 0x1, 0x0000000000000000, 0x1f1e1d1c1b1a1918, 0x1716151413121110, x2, 920, x4)

inst_136:
// rs1_val == 0x1f1e1d1c1b1a1918 and rs2_val == 0x1716151413121110 and imm_val == 0 
// opcode: sm4ed; op1:x10; op2:x11; op1val:0x1f1e1d1c1b1a1918; op2val:0x1716151413121110; immval:0x0
TEST_RI_OP(sm4ed, x10, x11, 0x0, 0x0000000000000000, 0x1f1e1d1c1b1a1918, 0x1716151413121110, x2, 928, x4)

inst_137:
// rs1_val == 0x1716151413121110 and rs2_val == 0x1f1e1d1c1b1a1918 and imm_val == 3 
// opcode: sm4ed; op1:x10; op2:x11; op1val:0x1716151413121110; op2val:0x1f1e1d1c1b1a1918; immval:0x3
TEST_RI_OP(sm4ed, x10, x11, 0x3, 0x0000000000000000, 0x1716151413121110, 0x1f1e1d1c1b1a1918, x2, 936, x4)

inst_138:
// rs1_val == 0x1716151413121110 and rs2_val == 0x1f1e1d1c1b1a1918 and imm_val == 2 
// opcode: sm4ed; op1:x10; op2:x11; op1val:0x1716151413121110; op2val:0x1f1e1d1c1b1a1918; immval:0x2
TEST_RI_OP(sm4ed, x10, x11, 0x2, 0x0000000000000000, 0x1716151413121110, 0x1f1e1d1c1b1a1918, x2, 944, x4)

inst_139:
// rs1_val == 0x1716151413121110 and rs2_val == 0x1f1e1d1c1b1a1918 and imm_val == 1 
// opcode: sm4ed; op1:x10; op2:x11; op1val:0x1716151413121110; op2val:0x1f1e1d1c1b1a1918; immval:0x1
TEST_RI_OP(sm4ed, x10, x11, 0x1, 0x0000000000000000, 0x1716151413121110, 0x1f1e1d1c1b1a1918, x2, 952, x4)

inst_140:
// rs1_val == 0x1716151413121110 and rs2_val == 0x1f1e1d1c1b1a1918 and imm_val == 0 
// opcode: sm4ed; op1:x10; op2:x11; op1val:0x1716151413121110; op2val:0x1f1e1d1c1b1a1918; immval:0x0
TEST_RI_OP(sm4ed, x10, x11, 0x0, 0x0000000000000000, 0x1716151413121110, 0x1f1e1d1c1b1a1918, x2, 960, x4)

inst_141:
// rs1_val == 0x0f0e0d0c0b0a0908 and rs2_val == 0x0706050403020100 and imm_val == 3 
// opcode: sm4ed; op1:x10; op2:x11; op1val:0xf0e0d0c0b0a0908; op2val:0x706050403020100; immval:0x3
TEST_RI_OP(sm4ed, x10, x11, 0x3, 0x0000000000000000, 0xf0e0d0c0b0a0908, 0x706050403020100, x2, 968, x4)

inst_142:
// rs1_val == 0x0f0e0d0c0b0a0908 and rs2_val == 0x0706050403020100 and imm_val == 2 
// opcode: sm4ed; op1:x10; op2:x11; op1val:0xf0e0d0c0b0a0908; op2val:0x706050403020100; immval:0x2
TEST_RI_OP(sm4ed, x10, x11, 0x2, 0x0000000000000000, 0xf0e0d0c0b0a0908, 0x706050403020100, x2, 976, x4)

inst_143:
// rs1_val == 0x0f0e0d0c0b0a0908 and rs2_val == 0x0706050403020100 and imm_val == 1 
// opcode: sm4ed; op1:x10; op2:x11; op1val:0xf0e0d0c0b0a0908; op2val:0x706050403020100; immval:0x1
TEST_RI_OP(sm4ed, x10, x11, 0x1, 0x0000000000000000, 0xf0e0d0c0b0a0908, 0x706050403020100, x2, 984, x4)

inst_144:
// rs1_val == 0x0f0e0d0c0b0a0908 and rs2_val == 0x0706050403020100 and imm_val == 0 
// opcode: sm4ed; op1:x10; op2:x11; op1val:0xf0e0d0c0b0a0908; op2val:0x706050403020100; immval:0x0
TEST_RI_OP(sm4ed, x10, x11, 0x0, 0x0000000000000000, 0xf0e0d0c0b0a0908, 0x706050403020100, x2, 992, x4)

inst_145:
// rs1_val == 0x0706050403020100 and rs2_val == 0x0f0e0d0c0b0a0908 and imm_val == 3 
// opcode: sm4ed; op1:x10; op2:x11; op1val:0x706050403020100; op2val:0xf0e0d0c0b0a0908; immval:0x3
TEST_RI_OP(sm4ed, x10, x11, 0x3, 0x0000000000000000, 0x706050403020100, 0xf0e0d0c0b0a0908, x2, 1000, x4)

inst_146:
// rs1_val == 0x0706050403020100 and rs2_val == 0x0f0e0d0c0b0a0908 and imm_val == 2 
// opcode: sm4ed; op1:x10; op2:x11; op1val:0x706050403020100; op2val:0xf0e0d0c0b0a0908; immval:0x2
TEST_RI_OP(sm4ed, x10, x11, 0x2, 0x0000000000000000, 0x706050403020100, 0xf0e0d0c0b0a0908, x2, 1008, x4)

inst_147:
// rs1_val == 0x0706050403020100 and rs2_val == 0x0f0e0d0c0b0a0908 and imm_val == 1 
// opcode: sm4ed; op1:x10; op2:x11; op1val:0x706050403020100; op2val:0xf0e0d0c0b0a0908; immval:0x1
TEST_RI_OP(sm4ed, x10, x11, 0x1, 0x0000000000000000, 0x706050403020100, 0xf0e0d0c0b0a0908, x2, 1016, x4)

inst_148:
// rs1_val == 0x0706050403020100 and rs2_val == 0x0f0e0d0c0b0a0908 and imm_val == 0 
// opcode: sm4ed; op1:x10; op2:x11; op1val:0x706050403020100; op2val:0xf0e0d0c0b0a0908; immval:0x0
TEST_RI_OP(sm4ed, x10, x11, 0x0, 0x0000000000000000, 0x706050403020100, 0xf0e0d0c0b0a0908, x2, 1024, x4)

inst_149:
// rs1_val == 0xf17f6920daaafe5c and rs2_val == 0x7bcad7c4ff9a1b80 and imm_val == 0x0 
// opcode: sm4ed; op1:x10; op2:x11; op1val:0xf17f6920daaafe5c; op2val:0x7bcad7c4ff9a1b80; immval:0x0
TEST_RI_OP(sm4ed, x10, x11, 0x0, 0x0000000000000000, 0xf17f6920daaafe5c, 0x7bcad7c4ff9a1b80, x2, 1032, x4)

inst_150:
// rs1_val == 0xefeeedecebeae9e8 and rs2_val == 0xe7e6e5e4e3e2e1e0 and imm_val == 2 
// opcode: sm4ed; op1:x10; op2:x11; op1val:0xefeeedecebeae9e8; op2val:0xe7e6e5e4e3e2e1e0; immval:0x2
TEST_RI_OP(sm4ed, x10, x11, 0x2, 0x0000000000000000, 0xefeeedecebeae9e8, 0xe7e6e5e4e3e2e1e0, x2, 1040, x4)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x13_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x13_1:
    .fill 20*(XLEN/32),4,0xdeadbeef


signature_x2_0:
    .fill 131*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
