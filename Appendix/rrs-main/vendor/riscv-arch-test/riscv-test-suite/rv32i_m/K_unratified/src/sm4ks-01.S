// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.4.5
// timestamp : Thu May 20 05:54:26 2021 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv-ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv-ctg/sample_cgfs/rv32i_k.cgf \
//                  --base-isa rv32i \
//                  --randomize
// -----------
//
// -----------
// Copyright (c) 2021. Indian Institute of Technology Madras. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the sm4ks instruction of the RISC-V  extension for the sm4ks covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32I_Zks")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",sm4ks)

RVTEST_CASE(1,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*ZKs.*);def TEST_CASE_1=True;",sm4ks)

RVTEST_CASE(2,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*ZKsed.*);def TEST_CASE_1=True;",sm4ks)

RVTEST_SIGBASE( x2,signature_x2_1)

inst_0:
// rs1 == rs2, rs1==x9, rs2==x9, rs1_val == 0 and rs2_val == 0x03020100 and imm_val == 0 
// opcode: sm4ks; op1:x9; op2:x9; op1val:0x0; op2val:0x0; immval:0x0
TEST_RI_OP(sm4ks, x9, x9, 0x0, 0x00000000, 0x0, 0x0, x2, 0, x13)

inst_1:
// rs1 != rs2, rs1==x4, rs2==x3, rs1_val == 0x3fb0fe60 and rs2_val == 0x1826a804 and imm_val == 0x1 
// opcode: sm4ks; op1:x4; op2:x3; op1val:0x3fb0fe60; op2val:0x1826a804; immval:0x1
TEST_RI_OP(sm4ks, x4, x3, 0x1, 0x00000000, 0x3fb0fe60, 0x1826a804, x2, 4, x13)

inst_2:
// rs1==x14, rs2==x16, rs1_val == 0xb369e102 and rs2_val == 0x293f9f60 and imm_val == 0x3 
// opcode: sm4ks; op1:x14; op2:x16; op1val:0xb369e102; op2val:0x293f9f60; immval:0x3
TEST_RI_OP(sm4ks, x14, x16, 0x3, 0x00000000, 0xb369e102, 0x293f9f60, x2, 8, x13)

inst_3:
// rs1==x31, rs2==x1, rs1_val == 0x1aa1beeb and rs2_val == 0xa4b7f979 and imm_val == 0x0 
// opcode: sm4ks; op1:x31; op2:x1; op1val:0x1aa1beeb; op2val:0xa4b7f979; immval:0x0
TEST_RI_OP(sm4ks, x31, x1, 0x0, 0x00000000, 0x1aa1beeb, 0xa4b7f979, x2, 12, x13)

inst_4:
// rs1==x24, rs2==x18, rs1_val == 0x8678f5e3 and rs2_val == 0x358a9235 and imm_val == 0x3 
// opcode: sm4ks; op1:x24; op2:x18; op1val:0x8678f5e3; op2val:0x358a9235; immval:0x3
TEST_RI_OP(sm4ks, x24, x18, 0x3, 0x00000000, 0x8678f5e3, 0x358a9235, x2, 16, x13)

inst_5:
// rs1==x10, rs2==x30, rs1_val == 0x74a813d2 and rs2_val == 0xb0873a0f and imm_val == 0x3 
// opcode: sm4ks; op1:x10; op2:x30; op1val:0x74a813d2; op2val:0xb0873a0f; immval:0x3
TEST_RI_OP(sm4ks, x10, x30, 0x3, 0x00000000, 0x74a813d2, 0xb0873a0f, x2, 20, x13)

inst_6:
// rs1==x6, rs2==x28, rs1_val == 0x9f053821 and rs2_val == 0x91766f62 and imm_val == 0x2 
// opcode: sm4ks; op1:x6; op2:x28; op1val:0x9f053821; op2val:0x91766f62; immval:0x2
TEST_RI_OP(sm4ks, x6, x28, 0x2, 0x00000000, 0x9f053821, 0x91766f62, x2, 24, x13)

inst_7:
// rs1==x15, rs2==x27, rs1_val == 0xdc80d916 and rs2_val == 0x2a2a146d and imm_val == 0x2 
// opcode: sm4ks; op1:x15; op2:x27; op1val:0xdc80d916; op2val:0x2a2a146d; immval:0x2
TEST_RI_OP(sm4ks, x15, x27, 0x2, 0x00000000, 0xdc80d916, 0x2a2a146d, x2, 28, x13)

inst_8:
// rs1==x27, rs2==x20, rs1_val == 0xcd157633 and rs2_val == 0x4113ee60 and imm_val == 0x0 
// opcode: sm4ks; op1:x27; op2:x20; op1val:0xcd157633; op2val:0x4113ee60; immval:0x0
TEST_RI_OP(sm4ks, x27, x20, 0x0, 0x00000000, 0xcd157633, 0x4113ee60, x2, 32, x13)

inst_9:
// rs1==x29, rs2==x24, rs1_val == 0xe3f4fca3 and rs2_val == 0xa6c9253a and imm_val == 0x2 
// opcode: sm4ks; op1:x29; op2:x24; op1val:0xe3f4fca3; op2val:0xa6c9253a; immval:0x2
TEST_RI_OP(sm4ks, x29, x24, 0x2, 0x00000000, 0xe3f4fca3, 0xa6c9253a, x2, 36, x13)

inst_10:
// rs1==x0, rs2==x19, rs1_val == 0x7bcad7c4 and rs2_val == 0xc2f1c53e and imm_val == 0x0 
// opcode: sm4ks; op1:x0; op2:x19; op1val:0x0; op2val:0xc2f1c53e; immval:0x0
TEST_RI_OP(sm4ks, x0, x19, 0x0, 0x00000000, 0x0, 0xc2f1c53e, x2, 40, x13)

inst_11:
// rs1==x3, rs2==x26, rs1_val == 0x633dbabc and rs2_val == 0xb6c4fd42 and imm_val == 0x2 
// opcode: sm4ks; op1:x3; op2:x26; op1val:0x633dbabc; op2val:0xb6c4fd42; immval:0x2
TEST_RI_OP(sm4ks, x3, x26, 0x2, 0x00000000, 0x633dbabc, 0xb6c4fd42, x2, 44, x13)

inst_12:
// rs1==x25, rs2==x31, rs1_val == 0x299c3bcf and rs2_val == 0xaa6bb2bd and imm_val == 0x3 
// opcode: sm4ks; op1:x25; op2:x31; op1val:0x299c3bcf; op2val:0xaa6bb2bd; immval:0x3
TEST_RI_OP(sm4ks, x25, x31, 0x3, 0x00000000, 0x299c3bcf, 0xaa6bb2bd, x2, 48, x13)

inst_13:
// rs1==x11, rs2==x23, rs1_val == 0xa371db42 and rs2_val == 0x2e3ee8c4 and imm_val == 0x3 
// opcode: sm4ks; op1:x11; op2:x23; op1val:0xa371db42; op2val:0x2e3ee8c4; immval:0x3
TEST_RI_OP(sm4ks, x11, x23, 0x3, 0x00000000, 0xa371db42, 0x2e3ee8c4, x2, 52, x13)

inst_14:
// rs1==x7, rs2==x6, rs1_val == 0x8e2eac2a and rs2_val == 0xd169a3f8 and imm_val == 0x1 
// opcode: sm4ks; op1:x7; op2:x6; op1val:0x8e2eac2a; op2val:0xd169a3f8; immval:0x1
TEST_RI_OP(sm4ks, x7, x6, 0x1, 0x00000000, 0x8e2eac2a, 0xd169a3f8, x2, 56, x13)

inst_15:
// rs1==x17, rs2==x8, rs1_val == 0xa0569d76 and rs2_val == 0x35f9377f and imm_val == 0x3 
// opcode: sm4ks; op1:x17; op2:x8; op1val:0xa0569d76; op2val:0x35f9377f; immval:0x3
TEST_RI_OP(sm4ks, x17, x8, 0x3, 0x00000000, 0xa0569d76, 0x35f9377f, x2, 60, x13)

inst_16:
// rs1==x22, rs2==x17, rs1_val == 0x240d84d6 and rs2_val == 0xe4921bf7 and imm_val == 0x2 
// opcode: sm4ks; op1:x22; op2:x17; op1val:0x240d84d6; op2val:0xe4921bf7; immval:0x2
TEST_RI_OP(sm4ks, x22, x17, 0x2, 0x00000000, 0x240d84d6, 0xe4921bf7, x2, 64, x13)

inst_17:
// rs1==x28, rs2==x14, rs1_val == 0x3acdf616 and rs2_val == 0xfcc1b543 and imm_val == 0x1 
// opcode: sm4ks; op1:x28; op2:x14; op1val:0x3acdf616; op2val:0xfcc1b543; immval:0x1
TEST_RI_OP(sm4ks, x28, x14, 0x1, 0x00000000, 0x3acdf616, 0xfcc1b543, x2, 68, x13)

inst_18:
// rs1==x30, rs2==x4, rs1_val == 0x74b8de87 and rs2_val == 0xf273b44c and imm_val == 0x2 
// opcode: sm4ks; op1:x30; op2:x4; op1val:0x74b8de87; op2val:0xf273b44c; immval:0x2
TEST_RI_OP(sm4ks, x30, x4, 0x2, 0x00000000, 0x74b8de87, 0xf273b44c, x2, 72, x13)

inst_19:
// rs1==x20, rs2==x0, rs1_val == 0xbb61a9cd and rs2_val == 0xccce240c and imm_val == 0x0 
// opcode: sm4ks; op1:x20; op2:x0; op1val:0xbb61a9cd; op2val:0x0; immval:0x0
TEST_RI_OP(sm4ks, x20, x0, 0x0, 0x00000000, 0xbb61a9cd, 0x0, x2, 76, x13)

inst_20:
// rs1==x12, rs2==x5, rs1_val == 0x254a9493 and rs2_val == 0xc5521660 and imm_val == 0x3 
// opcode: sm4ks; op1:x12; op2:x5; op1val:0x254a9493; op2val:0xc5521660; immval:0x3
TEST_RI_OP(sm4ks, x12, x5, 0x3, 0x00000000, 0x254a9493, 0xc5521660, x2, 80, x13)
RVTEST_SIGBASE( x3,signature_x3_0)

inst_21:
// rs1==x16, rs2==x12, rs1_val == 0 and rs2_val == 0xfffefdfc and imm_val == 3 
// opcode: sm4ks; op1:x16; op2:x12; op1val:0x0; op2val:0xfffefdfc; immval:0x3
TEST_RI_OP(sm4ks, x16, x12, 0x3, 0x00000000, 0x0, 0xfffefdfc, x3, 0, x4)

inst_22:
// rs1==x5, rs2==x15, rs1_val == 0 and rs2_val == 0xfffefdfc and imm_val == 2 
// opcode: sm4ks; op1:x5; op2:x15; op1val:0x0; op2val:0xfffefdfc; immval:0x2
TEST_RI_OP(sm4ks, x5, x15, 0x2, 0x00000000, 0x0, 0xfffefdfc, x3, 4, x4)

inst_23:
// rs1==x19, rs2==x29, rs1_val == 0 and rs2_val == 0xfffefdfc and imm_val == 1 
// opcode: sm4ks; op1:x19; op2:x29; op1val:0x0; op2val:0xfffefdfc; immval:0x1
TEST_RI_OP(sm4ks, x19, x29, 0x1, 0x00000000, 0x0, 0xfffefdfc, x3, 8, x4)

inst_24:
// rs1==x26, rs2==x2, rs1_val == 0 and rs2_val == 0xfffefdfc and imm_val == 0 
// opcode: sm4ks; op1:x26; op2:x2; op1val:0x0; op2val:0xfffefdfc; immval:0x0
TEST_RI_OP(sm4ks, x26, x2, 0x0, 0x00000000, 0x0, 0xfffefdfc, x3, 12, x4)

inst_25:
// rs1==x18, rs2==x22, rs1_val == 0 and rs2_val == 0xfbfaf9f8 and imm_val == 3 
// opcode: sm4ks; op1:x18; op2:x22; op1val:0x0; op2val:0xfbfaf9f8; immval:0x3
TEST_RI_OP(sm4ks, x18, x22, 0x3, 0x00000000, 0x0, 0xfbfaf9f8, x3, 16, x4)

inst_26:
// rs1==x1, rs2==x25, rs1_val == 0 and rs2_val == 0xfbfaf9f8 and imm_val == 2 
// opcode: sm4ks; op1:x1; op2:x25; op1val:0x0; op2val:0xfbfaf9f8; immval:0x2
TEST_RI_OP(sm4ks, x1, x25, 0x2, 0x00000000, 0x0, 0xfbfaf9f8, x3, 20, x4)

inst_27:
// rs1==x2, rs2==x10, rs1_val == 0 and rs2_val == 0xfbfaf9f8 and imm_val == 1 
// opcode: sm4ks; op1:x2; op2:x10; op1val:0x0; op2val:0xfbfaf9f8; immval:0x1
TEST_RI_OP(sm4ks, x2, x10, 0x1, 0x00000000, 0x0, 0xfbfaf9f8, x3, 24, x4)

inst_28:
// rs1==x8, rs2==x7, rs1_val == 0 and rs2_val == 0xfbfaf9f8 and imm_val == 0 
// opcode: sm4ks; op1:x8; op2:x7; op1val:0x0; op2val:0xfbfaf9f8; immval:0x0
TEST_RI_OP(sm4ks, x8, x7, 0x0, 0x00000000, 0x0, 0xfbfaf9f8, x3, 28, x4)

inst_29:
// rs1==x21, rs2==x13, rs1_val == 0 and rs2_val == 0xf7f6f5f4 and imm_val == 3 
// opcode: sm4ks; op1:x21; op2:x13; op1val:0x0; op2val:0xf7f6f5f4; immval:0x3
TEST_RI_OP(sm4ks, x21, x13, 0x3, 0x00000000, 0x0, 0xf7f6f5f4, x3, 32, x4)

inst_30:
// rs1==x13, rs2==x21, rs1_val == 0 and rs2_val == 0xf7f6f5f4 and imm_val == 2 
// opcode: sm4ks; op1:x13; op2:x21; op1val:0x0; op2val:0xf7f6f5f4; immval:0x2
TEST_RI_OP(sm4ks, x13, x21, 0x2, 0x00000000, 0x0, 0xf7f6f5f4, x3, 36, x4)

inst_31:
// rs1==x23, rs2==x11, rs1_val == 0 and rs2_val == 0xf7f6f5f4 and imm_val == 1 
// opcode: sm4ks; op1:x23; op2:x11; op1val:0x0; op2val:0xf7f6f5f4; immval:0x1
TEST_RI_OP(sm4ks, x23, x11, 0x1, 0x00000000, 0x0, 0xf7f6f5f4, x3, 40, x4)

inst_32:
// rs1_val == 0 and rs2_val == 0xf7f6f5f4 and imm_val == 0 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0xf7f6f5f4; immval:0x0
TEST_RI_OP(sm4ks, x10, x11, 0x0, 0x00000000, 0x0, 0xf7f6f5f4, x3, 44, x4)

inst_33:
// rs1_val == 0 and rs2_val == 0xf3f2f1f0 and imm_val == 3 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0xf3f2f1f0; immval:0x3
TEST_RI_OP(sm4ks, x10, x11, 0x3, 0x00000000, 0x0, 0xf3f2f1f0, x3, 48, x4)

inst_34:
// rs1_val == 0 and rs2_val == 0xf3f2f1f0 and imm_val == 2 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0xf3f2f1f0; immval:0x2
TEST_RI_OP(sm4ks, x10, x11, 0x2, 0x00000000, 0x0, 0xf3f2f1f0, x3, 52, x4)

inst_35:
// rs1_val == 0 and rs2_val == 0xf3f2f1f0 and imm_val == 1 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0xf3f2f1f0; immval:0x1
TEST_RI_OP(sm4ks, x10, x11, 0x1, 0x00000000, 0x0, 0xf3f2f1f0, x3, 56, x4)

inst_36:
// rs1_val == 0 and rs2_val == 0xf3f2f1f0 and imm_val == 0 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0xf3f2f1f0; immval:0x0
TEST_RI_OP(sm4ks, x10, x11, 0x0, 0x00000000, 0x0, 0xf3f2f1f0, x3, 60, x4)

inst_37:
// rs1_val == 0 and rs2_val == 0xefeeedec and imm_val == 3 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0xefeeedec; immval:0x3
TEST_RI_OP(sm4ks, x10, x11, 0x3, 0x00000000, 0x0, 0xefeeedec, x3, 64, x4)

inst_38:
// rs1_val == 0 and rs2_val == 0xefeeedec and imm_val == 2 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0xefeeedec; immval:0x2
TEST_RI_OP(sm4ks, x10, x11, 0x2, 0x00000000, 0x0, 0xefeeedec, x3, 68, x4)

inst_39:
// rs1_val == 0 and rs2_val == 0xefeeedec and imm_val == 1 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0xefeeedec; immval:0x1
TEST_RI_OP(sm4ks, x10, x11, 0x1, 0x00000000, 0x0, 0xefeeedec, x3, 72, x4)

inst_40:
// rs1_val == 0 and rs2_val == 0xefeeedec and imm_val == 0 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0xefeeedec; immval:0x0
TEST_RI_OP(sm4ks, x10, x11, 0x0, 0x00000000, 0x0, 0xefeeedec, x3, 76, x4)

inst_41:
// rs1_val == 0 and rs2_val == 0xebeae9e8 and imm_val == 3 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0xebeae9e8; immval:0x3
TEST_RI_OP(sm4ks, x10, x11, 0x3, 0x00000000, 0x0, 0xebeae9e8, x3, 80, x4)

inst_42:
// rs1_val == 0 and rs2_val == 0xebeae9e8 and imm_val == 2 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0xebeae9e8; immval:0x2
TEST_RI_OP(sm4ks, x10, x11, 0x2, 0x00000000, 0x0, 0xebeae9e8, x3, 84, x4)

inst_43:
// rs1_val == 0 and rs2_val == 0xebeae9e8 and imm_val == 1 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0xebeae9e8; immval:0x1
TEST_RI_OP(sm4ks, x10, x11, 0x1, 0x00000000, 0x0, 0xebeae9e8, x3, 88, x4)

inst_44:
// rs1_val == 0 and rs2_val == 0xebeae9e8 and imm_val == 0 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0xebeae9e8; immval:0x0
TEST_RI_OP(sm4ks, x10, x11, 0x0, 0x00000000, 0x0, 0xebeae9e8, x3, 92, x4)

inst_45:
// rs1_val == 0 and rs2_val == 0xe7e6e5e4 and imm_val == 3 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0xe7e6e5e4; immval:0x3
TEST_RI_OP(sm4ks, x10, x11, 0x3, 0x00000000, 0x0, 0xe7e6e5e4, x3, 96, x4)

inst_46:
// rs1_val == 0 and rs2_val == 0xe7e6e5e4 and imm_val == 2 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0xe7e6e5e4; immval:0x2
TEST_RI_OP(sm4ks, x10, x11, 0x2, 0x00000000, 0x0, 0xe7e6e5e4, x3, 100, x4)

inst_47:
// rs1_val == 0 and rs2_val == 0xe7e6e5e4 and imm_val == 1 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0xe7e6e5e4; immval:0x1
TEST_RI_OP(sm4ks, x10, x11, 0x1, 0x00000000, 0x0, 0xe7e6e5e4, x3, 104, x4)

inst_48:
// rs1_val == 0 and rs2_val == 0xe7e6e5e4 and imm_val == 0 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0xe7e6e5e4; immval:0x0
TEST_RI_OP(sm4ks, x10, x11, 0x0, 0x00000000, 0x0, 0xe7e6e5e4, x3, 108, x4)

inst_49:
// rs1_val == 0 and rs2_val == 0xe3e2e1e0 and imm_val == 3 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0xe3e2e1e0; immval:0x3
TEST_RI_OP(sm4ks, x10, x11, 0x3, 0x00000000, 0x0, 0xe3e2e1e0, x3, 112, x4)

inst_50:
// rs1_val == 0 and rs2_val == 0xe3e2e1e0 and imm_val == 2 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0xe3e2e1e0; immval:0x2
TEST_RI_OP(sm4ks, x10, x11, 0x2, 0x00000000, 0x0, 0xe3e2e1e0, x3, 116, x4)

inst_51:
// rs1_val == 0 and rs2_val == 0xe3e2e1e0 and imm_val == 1 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0xe3e2e1e0; immval:0x1
TEST_RI_OP(sm4ks, x10, x11, 0x1, 0x00000000, 0x0, 0xe3e2e1e0, x3, 120, x4)

inst_52:
// rs1_val == 0 and rs2_val == 0xe3e2e1e0 and imm_val == 0 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0xe3e2e1e0; immval:0x0
TEST_RI_OP(sm4ks, x10, x11, 0x0, 0x00000000, 0x0, 0xe3e2e1e0, x3, 124, x4)

inst_53:
// rs1_val == 0 and rs2_val == 0xdfdedddc and imm_val == 3 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0xdfdedddc; immval:0x3
TEST_RI_OP(sm4ks, x10, x11, 0x3, 0x00000000, 0x0, 0xdfdedddc, x3, 128, x4)

inst_54:
// rs1_val == 0 and rs2_val == 0xdfdedddc and imm_val == 2 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0xdfdedddc; immval:0x2
TEST_RI_OP(sm4ks, x10, x11, 0x2, 0x00000000, 0x0, 0xdfdedddc, x3, 132, x4)

inst_55:
// rs1_val == 0 and rs2_val == 0xdfdedddc and imm_val == 1 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0xdfdedddc; immval:0x1
TEST_RI_OP(sm4ks, x10, x11, 0x1, 0x00000000, 0x0, 0xdfdedddc, x3, 136, x4)

inst_56:
// rs1_val == 0 and rs2_val == 0xdfdedddc and imm_val == 0 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0xdfdedddc; immval:0x0
TEST_RI_OP(sm4ks, x10, x11, 0x0, 0x00000000, 0x0, 0xdfdedddc, x3, 140, x4)

inst_57:
// rs1_val == 0 and rs2_val == 0xdbdad9d8 and imm_val == 3 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0xdbdad9d8; immval:0x3
TEST_RI_OP(sm4ks, x10, x11, 0x3, 0x00000000, 0x0, 0xdbdad9d8, x3, 144, x4)

inst_58:
// rs1_val == 0 and rs2_val == 0xdbdad9d8 and imm_val == 2 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0xdbdad9d8; immval:0x2
TEST_RI_OP(sm4ks, x10, x11, 0x2, 0x00000000, 0x0, 0xdbdad9d8, x3, 148, x4)

inst_59:
// rs1_val == 0 and rs2_val == 0xdbdad9d8 and imm_val == 1 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0xdbdad9d8; immval:0x1
TEST_RI_OP(sm4ks, x10, x11, 0x1, 0x00000000, 0x0, 0xdbdad9d8, x3, 152, x4)

inst_60:
// rs1_val == 0 and rs2_val == 0xdbdad9d8 and imm_val == 0 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0xdbdad9d8; immval:0x0
TEST_RI_OP(sm4ks, x10, x11, 0x0, 0x00000000, 0x0, 0xdbdad9d8, x3, 156, x4)

inst_61:
// rs1_val == 0 and rs2_val == 0xd7d6d5d4 and imm_val == 3 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0xd7d6d5d4; immval:0x3
TEST_RI_OP(sm4ks, x10, x11, 0x3, 0x00000000, 0x0, 0xd7d6d5d4, x3, 160, x4)

inst_62:
// rs1_val == 0 and rs2_val == 0xd7d6d5d4 and imm_val == 2 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0xd7d6d5d4; immval:0x2
TEST_RI_OP(sm4ks, x10, x11, 0x2, 0x00000000, 0x0, 0xd7d6d5d4, x3, 164, x4)

inst_63:
// rs1_val == 0 and rs2_val == 0xd7d6d5d4 and imm_val == 1 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0xd7d6d5d4; immval:0x1
TEST_RI_OP(sm4ks, x10, x11, 0x1, 0x00000000, 0x0, 0xd7d6d5d4, x3, 168, x4)

inst_64:
// rs1_val == 0 and rs2_val == 0xd7d6d5d4 and imm_val == 0 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0xd7d6d5d4; immval:0x0
TEST_RI_OP(sm4ks, x10, x11, 0x0, 0x00000000, 0x0, 0xd7d6d5d4, x3, 172, x4)

inst_65:
// rs1_val == 0 and rs2_val == 0xd3d2d1d0 and imm_val == 3 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0xd3d2d1d0; immval:0x3
TEST_RI_OP(sm4ks, x10, x11, 0x3, 0x00000000, 0x0, 0xd3d2d1d0, x3, 176, x4)

inst_66:
// rs1_val == 0 and rs2_val == 0xd3d2d1d0 and imm_val == 2 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0xd3d2d1d0; immval:0x2
TEST_RI_OP(sm4ks, x10, x11, 0x2, 0x00000000, 0x0, 0xd3d2d1d0, x3, 180, x4)

inst_67:
// rs1_val == 0 and rs2_val == 0xd3d2d1d0 and imm_val == 1 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0xd3d2d1d0; immval:0x1
TEST_RI_OP(sm4ks, x10, x11, 0x1, 0x00000000, 0x0, 0xd3d2d1d0, x3, 184, x4)

inst_68:
// rs1_val == 0 and rs2_val == 0xd3d2d1d0 and imm_val == 0 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0xd3d2d1d0; immval:0x0
TEST_RI_OP(sm4ks, x10, x11, 0x0, 0x00000000, 0x0, 0xd3d2d1d0, x3, 188, x4)

inst_69:
// rs1_val == 0 and rs2_val == 0xcfcecdcc and imm_val == 3 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0xcfcecdcc; immval:0x3
TEST_RI_OP(sm4ks, x10, x11, 0x3, 0x00000000, 0x0, 0xcfcecdcc, x3, 192, x4)

inst_70:
// rs1_val == 0 and rs2_val == 0xcfcecdcc and imm_val == 2 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0xcfcecdcc; immval:0x2
TEST_RI_OP(sm4ks, x10, x11, 0x2, 0x00000000, 0x0, 0xcfcecdcc, x3, 196, x4)

inst_71:
// rs1_val == 0 and rs2_val == 0xcfcecdcc and imm_val == 1 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0xcfcecdcc; immval:0x1
TEST_RI_OP(sm4ks, x10, x11, 0x1, 0x00000000, 0x0, 0xcfcecdcc, x3, 200, x4)

inst_72:
// rs1_val == 0 and rs2_val == 0xcfcecdcc and imm_val == 0 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0xcfcecdcc; immval:0x0
TEST_RI_OP(sm4ks, x10, x11, 0x0, 0x00000000, 0x0, 0xcfcecdcc, x3, 204, x4)

inst_73:
// rs1_val == 0 and rs2_val == 0xcbcac9c8 and imm_val == 3 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0xcbcac9c8; immval:0x3
TEST_RI_OP(sm4ks, x10, x11, 0x3, 0x00000000, 0x0, 0xcbcac9c8, x3, 208, x4)

inst_74:
// rs1_val == 0 and rs2_val == 0xcbcac9c8 and imm_val == 2 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0xcbcac9c8; immval:0x2
TEST_RI_OP(sm4ks, x10, x11, 0x2, 0x00000000, 0x0, 0xcbcac9c8, x3, 212, x4)

inst_75:
// rs1_val == 0 and rs2_val == 0xcbcac9c8 and imm_val == 1 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0xcbcac9c8; immval:0x1
TEST_RI_OP(sm4ks, x10, x11, 0x1, 0x00000000, 0x0, 0xcbcac9c8, x3, 216, x4)

inst_76:
// rs1_val == 0 and rs2_val == 0xcbcac9c8 and imm_val == 0 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0xcbcac9c8; immval:0x0
TEST_RI_OP(sm4ks, x10, x11, 0x0, 0x00000000, 0x0, 0xcbcac9c8, x3, 220, x4)

inst_77:
// rs1_val == 0 and rs2_val == 0xc7c6c5c4 and imm_val == 3 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0xc7c6c5c4; immval:0x3
TEST_RI_OP(sm4ks, x10, x11, 0x3, 0x00000000, 0x0, 0xc7c6c5c4, x3, 224, x4)

inst_78:
// rs1_val == 0 and rs2_val == 0xc7c6c5c4 and imm_val == 2 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0xc7c6c5c4; immval:0x2
TEST_RI_OP(sm4ks, x10, x11, 0x2, 0x00000000, 0x0, 0xc7c6c5c4, x3, 228, x4)

inst_79:
// rs1_val == 0 and rs2_val == 0xc7c6c5c4 and imm_val == 1 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0xc7c6c5c4; immval:0x1
TEST_RI_OP(sm4ks, x10, x11, 0x1, 0x00000000, 0x0, 0xc7c6c5c4, x3, 232, x4)

inst_80:
// rs1_val == 0 and rs2_val == 0xc7c6c5c4 and imm_val == 0 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0xc7c6c5c4; immval:0x0
TEST_RI_OP(sm4ks, x10, x11, 0x0, 0x00000000, 0x0, 0xc7c6c5c4, x3, 236, x4)

inst_81:
// rs1_val == 0 and rs2_val == 0xc3c2c1c0 and imm_val == 3 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0xc3c2c1c0; immval:0x3
TEST_RI_OP(sm4ks, x10, x11, 0x3, 0x00000000, 0x0, 0xc3c2c1c0, x3, 240, x4)

inst_82:
// rs1_val == 0 and rs2_val == 0xc3c2c1c0 and imm_val == 2 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0xc3c2c1c0; immval:0x2
TEST_RI_OP(sm4ks, x10, x11, 0x2, 0x00000000, 0x0, 0xc3c2c1c0, x3, 244, x4)

inst_83:
// rs1_val == 0 and rs2_val == 0xc3c2c1c0 and imm_val == 1 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0xc3c2c1c0; immval:0x1
TEST_RI_OP(sm4ks, x10, x11, 0x1, 0x00000000, 0x0, 0xc3c2c1c0, x3, 248, x4)

inst_84:
// rs1_val == 0 and rs2_val == 0xc3c2c1c0 and imm_val == 0 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0xc3c2c1c0; immval:0x0
TEST_RI_OP(sm4ks, x10, x11, 0x0, 0x00000000, 0x0, 0xc3c2c1c0, x3, 252, x4)

inst_85:
// rs1_val == 0 and rs2_val == 0xbfbebdbc and imm_val == 3 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0xbfbebdbc; immval:0x3
TEST_RI_OP(sm4ks, x10, x11, 0x3, 0x00000000, 0x0, 0xbfbebdbc, x3, 256, x4)

inst_86:
// rs1_val == 0 and rs2_val == 0xbfbebdbc and imm_val == 2 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0xbfbebdbc; immval:0x2
TEST_RI_OP(sm4ks, x10, x11, 0x2, 0x00000000, 0x0, 0xbfbebdbc, x3, 260, x4)

inst_87:
// rs1_val == 0 and rs2_val == 0xbfbebdbc and imm_val == 1 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0xbfbebdbc; immval:0x1
TEST_RI_OP(sm4ks, x10, x11, 0x1, 0x00000000, 0x0, 0xbfbebdbc, x3, 264, x4)

inst_88:
// rs1_val == 0 and rs2_val == 0xbfbebdbc and imm_val == 0 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0xbfbebdbc; immval:0x0
TEST_RI_OP(sm4ks, x10, x11, 0x0, 0x00000000, 0x0, 0xbfbebdbc, x3, 268, x4)

inst_89:
// rs1_val == 0 and rs2_val == 0xbbbab9b8 and imm_val == 3 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0xbbbab9b8; immval:0x3
TEST_RI_OP(sm4ks, x10, x11, 0x3, 0x00000000, 0x0, 0xbbbab9b8, x3, 272, x4)

inst_90:
// rs1_val == 0 and rs2_val == 0xbbbab9b8 and imm_val == 2 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0xbbbab9b8; immval:0x2
TEST_RI_OP(sm4ks, x10, x11, 0x2, 0x00000000, 0x0, 0xbbbab9b8, x3, 276, x4)

inst_91:
// rs1_val == 0 and rs2_val == 0xbbbab9b8 and imm_val == 1 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0xbbbab9b8; immval:0x1
TEST_RI_OP(sm4ks, x10, x11, 0x1, 0x00000000, 0x0, 0xbbbab9b8, x3, 280, x4)

inst_92:
// rs1_val == 0 and rs2_val == 0xbbbab9b8 and imm_val == 0 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0xbbbab9b8; immval:0x0
TEST_RI_OP(sm4ks, x10, x11, 0x0, 0x00000000, 0x0, 0xbbbab9b8, x3, 284, x4)

inst_93:
// rs1_val == 0 and rs2_val == 0xb7b6b5b4 and imm_val == 3 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0xb7b6b5b4; immval:0x3
TEST_RI_OP(sm4ks, x10, x11, 0x3, 0x00000000, 0x0, 0xb7b6b5b4, x3, 288, x4)

inst_94:
// rs1_val == 0 and rs2_val == 0xb7b6b5b4 and imm_val == 2 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0xb7b6b5b4; immval:0x2
TEST_RI_OP(sm4ks, x10, x11, 0x2, 0x00000000, 0x0, 0xb7b6b5b4, x3, 292, x4)

inst_95:
// rs1_val == 0 and rs2_val == 0xb7b6b5b4 and imm_val == 1 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0xb7b6b5b4; immval:0x1
TEST_RI_OP(sm4ks, x10, x11, 0x1, 0x00000000, 0x0, 0xb7b6b5b4, x3, 296, x4)

inst_96:
// rs1_val == 0 and rs2_val == 0xb7b6b5b4 and imm_val == 0 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0xb7b6b5b4; immval:0x0
TEST_RI_OP(sm4ks, x10, x11, 0x0, 0x00000000, 0x0, 0xb7b6b5b4, x3, 300, x4)

inst_97:
// rs1_val == 0 and rs2_val == 0xb3b2b1b0 and imm_val == 3 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0xb3b2b1b0; immval:0x3
TEST_RI_OP(sm4ks, x10, x11, 0x3, 0x00000000, 0x0, 0xb3b2b1b0, x3, 304, x4)

inst_98:
// rs1_val == 0 and rs2_val == 0xb3b2b1b0 and imm_val == 2 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0xb3b2b1b0; immval:0x2
TEST_RI_OP(sm4ks, x10, x11, 0x2, 0x00000000, 0x0, 0xb3b2b1b0, x3, 308, x4)

inst_99:
// rs1_val == 0 and rs2_val == 0xb3b2b1b0 and imm_val == 1 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0xb3b2b1b0; immval:0x1
TEST_RI_OP(sm4ks, x10, x11, 0x1, 0x00000000, 0x0, 0xb3b2b1b0, x3, 312, x4)

inst_100:
// rs1_val == 0 and rs2_val == 0xb3b2b1b0 and imm_val == 0 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0xb3b2b1b0; immval:0x0
TEST_RI_OP(sm4ks, x10, x11, 0x0, 0x00000000, 0x0, 0xb3b2b1b0, x3, 316, x4)

inst_101:
// rs1_val == 0 and rs2_val == 0xafaeadac and imm_val == 3 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0xafaeadac; immval:0x3
TEST_RI_OP(sm4ks, x10, x11, 0x3, 0x00000000, 0x0, 0xafaeadac, x3, 320, x4)

inst_102:
// rs1_val == 0 and rs2_val == 0xafaeadac and imm_val == 2 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0xafaeadac; immval:0x2
TEST_RI_OP(sm4ks, x10, x11, 0x2, 0x00000000, 0x0, 0xafaeadac, x3, 324, x4)

inst_103:
// rs1_val == 0 and rs2_val == 0xafaeadac and imm_val == 1 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0xafaeadac; immval:0x1
TEST_RI_OP(sm4ks, x10, x11, 0x1, 0x00000000, 0x0, 0xafaeadac, x3, 328, x4)

inst_104:
// rs1_val == 0 and rs2_val == 0xafaeadac and imm_val == 0 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0xafaeadac; immval:0x0
TEST_RI_OP(sm4ks, x10, x11, 0x0, 0x00000000, 0x0, 0xafaeadac, x3, 332, x4)

inst_105:
// rs1_val == 0 and rs2_val == 0xabaaa9a8 and imm_val == 3 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0xabaaa9a8; immval:0x3
TEST_RI_OP(sm4ks, x10, x11, 0x3, 0x00000000, 0x0, 0xabaaa9a8, x3, 336, x4)

inst_106:
// rs1_val == 0 and rs2_val == 0xabaaa9a8 and imm_val == 2 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0xabaaa9a8; immval:0x2
TEST_RI_OP(sm4ks, x10, x11, 0x2, 0x00000000, 0x0, 0xabaaa9a8, x3, 340, x4)

inst_107:
// rs1_val == 0 and rs2_val == 0xabaaa9a8 and imm_val == 1 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0xabaaa9a8; immval:0x1
TEST_RI_OP(sm4ks, x10, x11, 0x1, 0x00000000, 0x0, 0xabaaa9a8, x3, 344, x4)

inst_108:
// rs1_val == 0 and rs2_val == 0xabaaa9a8 and imm_val == 0 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0xabaaa9a8; immval:0x0
TEST_RI_OP(sm4ks, x10, x11, 0x0, 0x00000000, 0x0, 0xabaaa9a8, x3, 348, x4)

inst_109:
// rs1_val == 0 and rs2_val == 0xa7a6a5a4 and imm_val == 3 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0xa7a6a5a4; immval:0x3
TEST_RI_OP(sm4ks, x10, x11, 0x3, 0x00000000, 0x0, 0xa7a6a5a4, x3, 352, x4)

inst_110:
// rs1_val == 0 and rs2_val == 0xa7a6a5a4 and imm_val == 2 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0xa7a6a5a4; immval:0x2
TEST_RI_OP(sm4ks, x10, x11, 0x2, 0x00000000, 0x0, 0xa7a6a5a4, x3, 356, x4)

inst_111:
// rs1_val == 0 and rs2_val == 0xa7a6a5a4 and imm_val == 1 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0xa7a6a5a4; immval:0x1
TEST_RI_OP(sm4ks, x10, x11, 0x1, 0x00000000, 0x0, 0xa7a6a5a4, x3, 360, x4)

inst_112:
// rs1_val == 0 and rs2_val == 0xa7a6a5a4 and imm_val == 0 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0xa7a6a5a4; immval:0x0
TEST_RI_OP(sm4ks, x10, x11, 0x0, 0x00000000, 0x0, 0xa7a6a5a4, x3, 364, x4)

inst_113:
// rs1_val == 0 and rs2_val == 0xa3a2a1a0 and imm_val == 3 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0xa3a2a1a0; immval:0x3
TEST_RI_OP(sm4ks, x10, x11, 0x3, 0x00000000, 0x0, 0xa3a2a1a0, x3, 368, x4)

inst_114:
// rs1_val == 0 and rs2_val == 0xa3a2a1a0 and imm_val == 2 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0xa3a2a1a0; immval:0x2
TEST_RI_OP(sm4ks, x10, x11, 0x2, 0x00000000, 0x0, 0xa3a2a1a0, x3, 372, x4)

inst_115:
// rs1_val == 0 and rs2_val == 0xa3a2a1a0 and imm_val == 1 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0xa3a2a1a0; immval:0x1
TEST_RI_OP(sm4ks, x10, x11, 0x1, 0x00000000, 0x0, 0xa3a2a1a0, x3, 376, x4)

inst_116:
// rs1_val == 0 and rs2_val == 0xa3a2a1a0 and imm_val == 0 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0xa3a2a1a0; immval:0x0
TEST_RI_OP(sm4ks, x10, x11, 0x0, 0x00000000, 0x0, 0xa3a2a1a0, x3, 380, x4)

inst_117:
// rs1_val == 0 and rs2_val == 0x9f9e9d9c and imm_val == 3 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x9f9e9d9c; immval:0x3
TEST_RI_OP(sm4ks, x10, x11, 0x3, 0x00000000, 0x0, 0x9f9e9d9c, x3, 384, x4)

inst_118:
// rs1_val == 0 and rs2_val == 0x9f9e9d9c and imm_val == 2 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x9f9e9d9c; immval:0x2
TEST_RI_OP(sm4ks, x10, x11, 0x2, 0x00000000, 0x0, 0x9f9e9d9c, x3, 388, x4)

inst_119:
// rs1_val == 0 and rs2_val == 0x9f9e9d9c and imm_val == 1 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x9f9e9d9c; immval:0x1
TEST_RI_OP(sm4ks, x10, x11, 0x1, 0x00000000, 0x0, 0x9f9e9d9c, x3, 392, x4)

inst_120:
// rs1_val == 0 and rs2_val == 0x9f9e9d9c and imm_val == 0 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x9f9e9d9c; immval:0x0
TEST_RI_OP(sm4ks, x10, x11, 0x0, 0x00000000, 0x0, 0x9f9e9d9c, x3, 396, x4)

inst_121:
// rs1_val == 0 and rs2_val == 0x9b9a9998 and imm_val == 3 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x9b9a9998; immval:0x3
TEST_RI_OP(sm4ks, x10, x11, 0x3, 0x00000000, 0x0, 0x9b9a9998, x3, 400, x4)

inst_122:
// rs1_val == 0 and rs2_val == 0x9b9a9998 and imm_val == 2 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x9b9a9998; immval:0x2
TEST_RI_OP(sm4ks, x10, x11, 0x2, 0x00000000, 0x0, 0x9b9a9998, x3, 404, x4)

inst_123:
// rs1_val == 0 and rs2_val == 0x9b9a9998 and imm_val == 1 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x9b9a9998; immval:0x1
TEST_RI_OP(sm4ks, x10, x11, 0x1, 0x00000000, 0x0, 0x9b9a9998, x3, 408, x4)

inst_124:
// rs1_val == 0 and rs2_val == 0x9b9a9998 and imm_val == 0 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x9b9a9998; immval:0x0
TEST_RI_OP(sm4ks, x10, x11, 0x0, 0x00000000, 0x0, 0x9b9a9998, x3, 412, x4)

inst_125:
// rs1_val == 0 and rs2_val == 0x97969594 and imm_val == 3 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x97969594; immval:0x3
TEST_RI_OP(sm4ks, x10, x11, 0x3, 0x00000000, 0x0, 0x97969594, x3, 416, x4)

inst_126:
// rs1_val == 0 and rs2_val == 0x97969594 and imm_val == 2 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x97969594; immval:0x2
TEST_RI_OP(sm4ks, x10, x11, 0x2, 0x00000000, 0x0, 0x97969594, x3, 420, x4)

inst_127:
// rs1_val == 0 and rs2_val == 0x97969594 and imm_val == 1 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x97969594; immval:0x1
TEST_RI_OP(sm4ks, x10, x11, 0x1, 0x00000000, 0x0, 0x97969594, x3, 424, x4)

inst_128:
// rs1_val == 0 and rs2_val == 0x97969594 and imm_val == 0 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x97969594; immval:0x0
TEST_RI_OP(sm4ks, x10, x11, 0x0, 0x00000000, 0x0, 0x97969594, x3, 428, x4)

inst_129:
// rs1_val == 0 and rs2_val == 0x93929190 and imm_val == 3 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x93929190; immval:0x3
TEST_RI_OP(sm4ks, x10, x11, 0x3, 0x00000000, 0x0, 0x93929190, x3, 432, x4)

inst_130:
// rs1_val == 0 and rs2_val == 0x93929190 and imm_val == 2 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x93929190; immval:0x2
TEST_RI_OP(sm4ks, x10, x11, 0x2, 0x00000000, 0x0, 0x93929190, x3, 436, x4)

inst_131:
// rs1_val == 0 and rs2_val == 0x93929190 and imm_val == 1 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x93929190; immval:0x1
TEST_RI_OP(sm4ks, x10, x11, 0x1, 0x00000000, 0x0, 0x93929190, x3, 440, x4)

inst_132:
// rs1_val == 0 and rs2_val == 0x93929190 and imm_val == 0 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x93929190; immval:0x0
TEST_RI_OP(sm4ks, x10, x11, 0x0, 0x00000000, 0x0, 0x93929190, x3, 444, x4)

inst_133:
// rs1_val == 0 and rs2_val == 0x8f8e8d8c and imm_val == 3 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x8f8e8d8c; immval:0x3
TEST_RI_OP(sm4ks, x10, x11, 0x3, 0x00000000, 0x0, 0x8f8e8d8c, x3, 448, x4)

inst_134:
// rs1_val == 0 and rs2_val == 0x8f8e8d8c and imm_val == 2 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x8f8e8d8c; immval:0x2
TEST_RI_OP(sm4ks, x10, x11, 0x2, 0x00000000, 0x0, 0x8f8e8d8c, x3, 452, x4)

inst_135:
// rs1_val == 0 and rs2_val == 0x8f8e8d8c and imm_val == 1 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x8f8e8d8c; immval:0x1
TEST_RI_OP(sm4ks, x10, x11, 0x1, 0x00000000, 0x0, 0x8f8e8d8c, x3, 456, x4)

inst_136:
// rs1_val == 0 and rs2_val == 0x8f8e8d8c and imm_val == 0 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x8f8e8d8c; immval:0x0
TEST_RI_OP(sm4ks, x10, x11, 0x0, 0x00000000, 0x0, 0x8f8e8d8c, x3, 460, x4)

inst_137:
// rs1_val == 0 and rs2_val == 0x8b8a8988 and imm_val == 3 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x8b8a8988; immval:0x3
TEST_RI_OP(sm4ks, x10, x11, 0x3, 0x00000000, 0x0, 0x8b8a8988, x3, 464, x4)

inst_138:
// rs1_val == 0 and rs2_val == 0x8b8a8988 and imm_val == 2 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x8b8a8988; immval:0x2
TEST_RI_OP(sm4ks, x10, x11, 0x2, 0x00000000, 0x0, 0x8b8a8988, x3, 468, x4)

inst_139:
// rs1_val == 0 and rs2_val == 0x8b8a8988 and imm_val == 1 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x8b8a8988; immval:0x1
TEST_RI_OP(sm4ks, x10, x11, 0x1, 0x00000000, 0x0, 0x8b8a8988, x3, 472, x4)

inst_140:
// rs1_val == 0 and rs2_val == 0x8b8a8988 and imm_val == 0 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x8b8a8988; immval:0x0
TEST_RI_OP(sm4ks, x10, x11, 0x0, 0x00000000, 0x0, 0x8b8a8988, x3, 476, x4)

inst_141:
// rs1_val == 0 and rs2_val == 0x87868584 and imm_val == 3 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x87868584; immval:0x3
TEST_RI_OP(sm4ks, x10, x11, 0x3, 0x00000000, 0x0, 0x87868584, x3, 480, x4)

inst_142:
// rs1_val == 0 and rs2_val == 0x87868584 and imm_val == 2 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x87868584; immval:0x2
TEST_RI_OP(sm4ks, x10, x11, 0x2, 0x00000000, 0x0, 0x87868584, x3, 484, x4)

inst_143:
// rs1_val == 0 and rs2_val == 0x87868584 and imm_val == 1 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x87868584; immval:0x1
TEST_RI_OP(sm4ks, x10, x11, 0x1, 0x00000000, 0x0, 0x87868584, x3, 488, x4)

inst_144:
// rs1_val == 0 and rs2_val == 0x87868584 and imm_val == 0 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x87868584; immval:0x0
TEST_RI_OP(sm4ks, x10, x11, 0x0, 0x00000000, 0x0, 0x87868584, x3, 492, x4)

inst_145:
// rs1_val == 0 and rs2_val == 0x83828180 and imm_val == 3 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x83828180; immval:0x3
TEST_RI_OP(sm4ks, x10, x11, 0x3, 0x00000000, 0x0, 0x83828180, x3, 496, x4)

inst_146:
// rs1_val == 0 and rs2_val == 0x83828180 and imm_val == 2 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x83828180; immval:0x2
TEST_RI_OP(sm4ks, x10, x11, 0x2, 0x00000000, 0x0, 0x83828180, x3, 500, x4)

inst_147:
// rs1_val == 0 and rs2_val == 0x83828180 and imm_val == 1 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x83828180; immval:0x1
TEST_RI_OP(sm4ks, x10, x11, 0x1, 0x00000000, 0x0, 0x83828180, x3, 504, x4)

inst_148:
// rs1_val == 0 and rs2_val == 0x83828180 and imm_val == 0 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x83828180; immval:0x0
TEST_RI_OP(sm4ks, x10, x11, 0x0, 0x00000000, 0x0, 0x83828180, x3, 508, x4)

inst_149:
// rs1_val == 0 and rs2_val == 0x7f7e7d7c and imm_val == 3 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x7f7e7d7c; immval:0x3
TEST_RI_OP(sm4ks, x10, x11, 0x3, 0x00000000, 0x0, 0x7f7e7d7c, x3, 512, x4)

inst_150:
// rs1_val == 0 and rs2_val == 0x7f7e7d7c and imm_val == 2 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x7f7e7d7c; immval:0x2
TEST_RI_OP(sm4ks, x10, x11, 0x2, 0x00000000, 0x0, 0x7f7e7d7c, x3, 516, x4)

inst_151:
// rs1_val == 0 and rs2_val == 0x7f7e7d7c and imm_val == 1 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x7f7e7d7c; immval:0x1
TEST_RI_OP(sm4ks, x10, x11, 0x1, 0x00000000, 0x0, 0x7f7e7d7c, x3, 520, x4)

inst_152:
// rs1_val == 0 and rs2_val == 0x7f7e7d7c and imm_val == 0 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x7f7e7d7c; immval:0x0
TEST_RI_OP(sm4ks, x10, x11, 0x0, 0x00000000, 0x0, 0x7f7e7d7c, x3, 524, x4)

inst_153:
// rs1_val == 0 and rs2_val == 0x7b7a7978 and imm_val == 3 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x7b7a7978; immval:0x3
TEST_RI_OP(sm4ks, x10, x11, 0x3, 0x00000000, 0x0, 0x7b7a7978, x3, 528, x4)

inst_154:
// rs1_val == 0 and rs2_val == 0x7b7a7978 and imm_val == 2 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x7b7a7978; immval:0x2
TEST_RI_OP(sm4ks, x10, x11, 0x2, 0x00000000, 0x0, 0x7b7a7978, x3, 532, x4)

inst_155:
// rs1_val == 0 and rs2_val == 0x7b7a7978 and imm_val == 1 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x7b7a7978; immval:0x1
TEST_RI_OP(sm4ks, x10, x11, 0x1, 0x00000000, 0x0, 0x7b7a7978, x3, 536, x4)

inst_156:
// rs1_val == 0 and rs2_val == 0x7b7a7978 and imm_val == 0 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x7b7a7978; immval:0x0
TEST_RI_OP(sm4ks, x10, x11, 0x0, 0x00000000, 0x0, 0x7b7a7978, x3, 540, x4)

inst_157:
// rs1_val == 0 and rs2_val == 0x77767574 and imm_val == 3 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x77767574; immval:0x3
TEST_RI_OP(sm4ks, x10, x11, 0x3, 0x00000000, 0x0, 0x77767574, x3, 544, x4)

inst_158:
// rs1_val == 0 and rs2_val == 0x77767574 and imm_val == 2 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x77767574; immval:0x2
TEST_RI_OP(sm4ks, x10, x11, 0x2, 0x00000000, 0x0, 0x77767574, x3, 548, x4)

inst_159:
// rs1_val == 0 and rs2_val == 0x77767574 and imm_val == 1 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x77767574; immval:0x1
TEST_RI_OP(sm4ks, x10, x11, 0x1, 0x00000000, 0x0, 0x77767574, x3, 552, x4)

inst_160:
// rs1_val == 0 and rs2_val == 0x77767574 and imm_val == 0 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x77767574; immval:0x0
TEST_RI_OP(sm4ks, x10, x11, 0x0, 0x00000000, 0x0, 0x77767574, x3, 556, x4)

inst_161:
// rs1_val == 0 and rs2_val == 0x73727170 and imm_val == 3 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x73727170; immval:0x3
TEST_RI_OP(sm4ks, x10, x11, 0x3, 0x00000000, 0x0, 0x73727170, x3, 560, x4)

inst_162:
// rs1_val == 0 and rs2_val == 0x73727170 and imm_val == 2 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x73727170; immval:0x2
TEST_RI_OP(sm4ks, x10, x11, 0x2, 0x00000000, 0x0, 0x73727170, x3, 564, x4)

inst_163:
// rs1_val == 0 and rs2_val == 0x73727170 and imm_val == 1 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x73727170; immval:0x1
TEST_RI_OP(sm4ks, x10, x11, 0x1, 0x00000000, 0x0, 0x73727170, x3, 568, x4)

inst_164:
// rs1_val == 0 and rs2_val == 0x73727170 and imm_val == 0 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x73727170; immval:0x0
TEST_RI_OP(sm4ks, x10, x11, 0x0, 0x00000000, 0x0, 0x73727170, x3, 572, x4)

inst_165:
// rs1_val == 0 and rs2_val == 0x6f6e6d6c and imm_val == 3 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x6f6e6d6c; immval:0x3
TEST_RI_OP(sm4ks, x10, x11, 0x3, 0x00000000, 0x0, 0x6f6e6d6c, x3, 576, x4)

inst_166:
// rs1_val == 0 and rs2_val == 0x6f6e6d6c and imm_val == 2 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x6f6e6d6c; immval:0x2
TEST_RI_OP(sm4ks, x10, x11, 0x2, 0x00000000, 0x0, 0x6f6e6d6c, x3, 580, x4)

inst_167:
// rs1_val == 0 and rs2_val == 0x6f6e6d6c and imm_val == 1 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x6f6e6d6c; immval:0x1
TEST_RI_OP(sm4ks, x10, x11, 0x1, 0x00000000, 0x0, 0x6f6e6d6c, x3, 584, x4)

inst_168:
// rs1_val == 0 and rs2_val == 0x6f6e6d6c and imm_val == 0 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x6f6e6d6c; immval:0x0
TEST_RI_OP(sm4ks, x10, x11, 0x0, 0x00000000, 0x0, 0x6f6e6d6c, x3, 588, x4)

inst_169:
// rs1_val == 0 and rs2_val == 0x6b6a6968 and imm_val == 3 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x6b6a6968; immval:0x3
TEST_RI_OP(sm4ks, x10, x11, 0x3, 0x00000000, 0x0, 0x6b6a6968, x3, 592, x4)

inst_170:
// rs1_val == 0 and rs2_val == 0x6b6a6968 and imm_val == 2 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x6b6a6968; immval:0x2
TEST_RI_OP(sm4ks, x10, x11, 0x2, 0x00000000, 0x0, 0x6b6a6968, x3, 596, x4)

inst_171:
// rs1_val == 0 and rs2_val == 0x6b6a6968 and imm_val == 1 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x6b6a6968; immval:0x1
TEST_RI_OP(sm4ks, x10, x11, 0x1, 0x00000000, 0x0, 0x6b6a6968, x3, 600, x4)

inst_172:
// rs1_val == 0 and rs2_val == 0x6b6a6968 and imm_val == 0 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x6b6a6968; immval:0x0
TEST_RI_OP(sm4ks, x10, x11, 0x0, 0x00000000, 0x0, 0x6b6a6968, x3, 604, x4)

inst_173:
// rs1_val == 0 and rs2_val == 0x67666564 and imm_val == 3 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x67666564; immval:0x3
TEST_RI_OP(sm4ks, x10, x11, 0x3, 0x00000000, 0x0, 0x67666564, x3, 608, x4)

inst_174:
// rs1_val == 0 and rs2_val == 0x67666564 and imm_val == 2 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x67666564; immval:0x2
TEST_RI_OP(sm4ks, x10, x11, 0x2, 0x00000000, 0x0, 0x67666564, x3, 612, x4)

inst_175:
// rs1_val == 0 and rs2_val == 0x67666564 and imm_val == 1 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x67666564; immval:0x1
TEST_RI_OP(sm4ks, x10, x11, 0x1, 0x00000000, 0x0, 0x67666564, x3, 616, x4)

inst_176:
// rs1_val == 0 and rs2_val == 0x67666564 and imm_val == 0 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x67666564; immval:0x0
TEST_RI_OP(sm4ks, x10, x11, 0x0, 0x00000000, 0x0, 0x67666564, x3, 620, x4)

inst_177:
// rs1_val == 0 and rs2_val == 0x63626160 and imm_val == 3 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x63626160; immval:0x3
TEST_RI_OP(sm4ks, x10, x11, 0x3, 0x00000000, 0x0, 0x63626160, x3, 624, x4)

inst_178:
// rs1_val == 0 and rs2_val == 0x63626160 and imm_val == 2 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x63626160; immval:0x2
TEST_RI_OP(sm4ks, x10, x11, 0x2, 0x00000000, 0x0, 0x63626160, x3, 628, x4)

inst_179:
// rs1_val == 0 and rs2_val == 0x63626160 and imm_val == 1 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x63626160; immval:0x1
TEST_RI_OP(sm4ks, x10, x11, 0x1, 0x00000000, 0x0, 0x63626160, x3, 632, x4)

inst_180:
// rs1_val == 0 and rs2_val == 0x63626160 and imm_val == 0 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x63626160; immval:0x0
TEST_RI_OP(sm4ks, x10, x11, 0x0, 0x00000000, 0x0, 0x63626160, x3, 636, x4)

inst_181:
// rs1_val == 0 and rs2_val == 0x5f5e5d5c and imm_val == 3 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x5f5e5d5c; immval:0x3
TEST_RI_OP(sm4ks, x10, x11, 0x3, 0x00000000, 0x0, 0x5f5e5d5c, x3, 640, x4)

inst_182:
// rs1_val == 0 and rs2_val == 0x5f5e5d5c and imm_val == 2 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x5f5e5d5c; immval:0x2
TEST_RI_OP(sm4ks, x10, x11, 0x2, 0x00000000, 0x0, 0x5f5e5d5c, x3, 644, x4)

inst_183:
// rs1_val == 0 and rs2_val == 0x5f5e5d5c and imm_val == 1 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x5f5e5d5c; immval:0x1
TEST_RI_OP(sm4ks, x10, x11, 0x1, 0x00000000, 0x0, 0x5f5e5d5c, x3, 648, x4)

inst_184:
// rs1_val == 0 and rs2_val == 0x5f5e5d5c and imm_val == 0 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x5f5e5d5c; immval:0x0
TEST_RI_OP(sm4ks, x10, x11, 0x0, 0x00000000, 0x0, 0x5f5e5d5c, x3, 652, x4)

inst_185:
// rs1_val == 0 and rs2_val == 0x5b5a5958 and imm_val == 3 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x5b5a5958; immval:0x3
TEST_RI_OP(sm4ks, x10, x11, 0x3, 0x00000000, 0x0, 0x5b5a5958, x3, 656, x4)

inst_186:
// rs1_val == 0 and rs2_val == 0x5b5a5958 and imm_val == 2 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x5b5a5958; immval:0x2
TEST_RI_OP(sm4ks, x10, x11, 0x2, 0x00000000, 0x0, 0x5b5a5958, x3, 660, x4)

inst_187:
// rs1_val == 0 and rs2_val == 0x5b5a5958 and imm_val == 1 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x5b5a5958; immval:0x1
TEST_RI_OP(sm4ks, x10, x11, 0x1, 0x00000000, 0x0, 0x5b5a5958, x3, 664, x4)

inst_188:
// rs1_val == 0 and rs2_val == 0x5b5a5958 and imm_val == 0 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x5b5a5958; immval:0x0
TEST_RI_OP(sm4ks, x10, x11, 0x0, 0x00000000, 0x0, 0x5b5a5958, x3, 668, x4)

inst_189:
// rs1_val == 0 and rs2_val == 0x57565554 and imm_val == 3 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x57565554; immval:0x3
TEST_RI_OP(sm4ks, x10, x11, 0x3, 0x00000000, 0x0, 0x57565554, x3, 672, x4)

inst_190:
// rs1_val == 0 and rs2_val == 0x57565554 and imm_val == 2 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x57565554; immval:0x2
TEST_RI_OP(sm4ks, x10, x11, 0x2, 0x00000000, 0x0, 0x57565554, x3, 676, x4)

inst_191:
// rs1_val == 0 and rs2_val == 0x57565554 and imm_val == 1 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x57565554; immval:0x1
TEST_RI_OP(sm4ks, x10, x11, 0x1, 0x00000000, 0x0, 0x57565554, x3, 680, x4)

inst_192:
// rs1_val == 0 and rs2_val == 0x57565554 and imm_val == 0 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x57565554; immval:0x0
TEST_RI_OP(sm4ks, x10, x11, 0x0, 0x00000000, 0x0, 0x57565554, x3, 684, x4)

inst_193:
// rs1_val == 0 and rs2_val == 0x53525150 and imm_val == 3 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x53525150; immval:0x3
TEST_RI_OP(sm4ks, x10, x11, 0x3, 0x00000000, 0x0, 0x53525150, x3, 688, x4)

inst_194:
// rs1_val == 0 and rs2_val == 0x53525150 and imm_val == 2 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x53525150; immval:0x2
TEST_RI_OP(sm4ks, x10, x11, 0x2, 0x00000000, 0x0, 0x53525150, x3, 692, x4)

inst_195:
// rs1_val == 0 and rs2_val == 0x53525150 and imm_val == 1 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x53525150; immval:0x1
TEST_RI_OP(sm4ks, x10, x11, 0x1, 0x00000000, 0x0, 0x53525150, x3, 696, x4)

inst_196:
// rs1_val == 0 and rs2_val == 0x53525150 and imm_val == 0 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x53525150; immval:0x0
TEST_RI_OP(sm4ks, x10, x11, 0x0, 0x00000000, 0x0, 0x53525150, x3, 700, x4)

inst_197:
// rs1_val == 0 and rs2_val == 0x4f4e4d4c and imm_val == 3 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x4f4e4d4c; immval:0x3
TEST_RI_OP(sm4ks, x10, x11, 0x3, 0x00000000, 0x0, 0x4f4e4d4c, x3, 704, x4)

inst_198:
// rs1_val == 0 and rs2_val == 0x4f4e4d4c and imm_val == 2 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x4f4e4d4c; immval:0x2
TEST_RI_OP(sm4ks, x10, x11, 0x2, 0x00000000, 0x0, 0x4f4e4d4c, x3, 708, x4)

inst_199:
// rs1_val == 0 and rs2_val == 0x4f4e4d4c and imm_val == 1 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x4f4e4d4c; immval:0x1
TEST_RI_OP(sm4ks, x10, x11, 0x1, 0x00000000, 0x0, 0x4f4e4d4c, x3, 712, x4)

inst_200:
// rs1_val == 0 and rs2_val == 0x4f4e4d4c and imm_val == 0 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x4f4e4d4c; immval:0x0
TEST_RI_OP(sm4ks, x10, x11, 0x0, 0x00000000, 0x0, 0x4f4e4d4c, x3, 716, x4)

inst_201:
// rs1_val == 0 and rs2_val == 0x4b4a4948 and imm_val == 3 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x4b4a4948; immval:0x3
TEST_RI_OP(sm4ks, x10, x11, 0x3, 0x00000000, 0x0, 0x4b4a4948, x3, 720, x4)

inst_202:
// rs1_val == 0 and rs2_val == 0x4b4a4948 and imm_val == 2 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x4b4a4948; immval:0x2
TEST_RI_OP(sm4ks, x10, x11, 0x2, 0x00000000, 0x0, 0x4b4a4948, x3, 724, x4)

inst_203:
// rs1_val == 0 and rs2_val == 0x4b4a4948 and imm_val == 1 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x4b4a4948; immval:0x1
TEST_RI_OP(sm4ks, x10, x11, 0x1, 0x00000000, 0x0, 0x4b4a4948, x3, 728, x4)

inst_204:
// rs1_val == 0 and rs2_val == 0x4b4a4948 and imm_val == 0 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x4b4a4948; immval:0x0
TEST_RI_OP(sm4ks, x10, x11, 0x0, 0x00000000, 0x0, 0x4b4a4948, x3, 732, x4)

inst_205:
// rs1_val == 0 and rs2_val == 0x47464544 and imm_val == 3 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x47464544; immval:0x3
TEST_RI_OP(sm4ks, x10, x11, 0x3, 0x00000000, 0x0, 0x47464544, x3, 736, x4)

inst_206:
// rs1_val == 0 and rs2_val == 0x47464544 and imm_val == 2 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x47464544; immval:0x2
TEST_RI_OP(sm4ks, x10, x11, 0x2, 0x00000000, 0x0, 0x47464544, x3, 740, x4)

inst_207:
// rs1_val == 0 and rs2_val == 0x47464544 and imm_val == 1 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x47464544; immval:0x1
TEST_RI_OP(sm4ks, x10, x11, 0x1, 0x00000000, 0x0, 0x47464544, x3, 744, x4)

inst_208:
// rs1_val == 0 and rs2_val == 0x47464544 and imm_val == 0 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x47464544; immval:0x0
TEST_RI_OP(sm4ks, x10, x11, 0x0, 0x00000000, 0x0, 0x47464544, x3, 748, x4)

inst_209:
// rs1_val == 0 and rs2_val == 0x43424140 and imm_val == 3 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x43424140; immval:0x3
TEST_RI_OP(sm4ks, x10, x11, 0x3, 0x00000000, 0x0, 0x43424140, x3, 752, x4)

inst_210:
// rs1_val == 0 and rs2_val == 0x43424140 and imm_val == 2 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x43424140; immval:0x2
TEST_RI_OP(sm4ks, x10, x11, 0x2, 0x00000000, 0x0, 0x43424140, x3, 756, x4)

inst_211:
// rs1_val == 0 and rs2_val == 0x43424140 and imm_val == 1 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x43424140; immval:0x1
TEST_RI_OP(sm4ks, x10, x11, 0x1, 0x00000000, 0x0, 0x43424140, x3, 760, x4)

inst_212:
// rs1_val == 0 and rs2_val == 0x43424140 and imm_val == 0 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x43424140; immval:0x0
TEST_RI_OP(sm4ks, x10, x11, 0x0, 0x00000000, 0x0, 0x43424140, x3, 764, x4)

inst_213:
// rs1_val == 0 and rs2_val == 0x3f3e3d3c and imm_val == 3 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x3f3e3d3c; immval:0x3
TEST_RI_OP(sm4ks, x10, x11, 0x3, 0x00000000, 0x0, 0x3f3e3d3c, x3, 768, x4)

inst_214:
// rs1_val == 0 and rs2_val == 0x3f3e3d3c and imm_val == 2 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x3f3e3d3c; immval:0x2
TEST_RI_OP(sm4ks, x10, x11, 0x2, 0x00000000, 0x0, 0x3f3e3d3c, x3, 772, x4)

inst_215:
// rs1_val == 0 and rs2_val == 0x3f3e3d3c and imm_val == 1 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x3f3e3d3c; immval:0x1
TEST_RI_OP(sm4ks, x10, x11, 0x1, 0x00000000, 0x0, 0x3f3e3d3c, x3, 776, x4)

inst_216:
// rs1_val == 0 and rs2_val == 0x3f3e3d3c and imm_val == 0 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x3f3e3d3c; immval:0x0
TEST_RI_OP(sm4ks, x10, x11, 0x0, 0x00000000, 0x0, 0x3f3e3d3c, x3, 780, x4)

inst_217:
// rs1_val == 0 and rs2_val == 0x3b3a3938 and imm_val == 3 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x3b3a3938; immval:0x3
TEST_RI_OP(sm4ks, x10, x11, 0x3, 0x00000000, 0x0, 0x3b3a3938, x3, 784, x4)

inst_218:
// rs1_val == 0 and rs2_val == 0x3b3a3938 and imm_val == 2 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x3b3a3938; immval:0x2
TEST_RI_OP(sm4ks, x10, x11, 0x2, 0x00000000, 0x0, 0x3b3a3938, x3, 788, x4)

inst_219:
// rs1_val == 0 and rs2_val == 0x3b3a3938 and imm_val == 1 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x3b3a3938; immval:0x1
TEST_RI_OP(sm4ks, x10, x11, 0x1, 0x00000000, 0x0, 0x3b3a3938, x3, 792, x4)

inst_220:
// rs1_val == 0 and rs2_val == 0x3b3a3938 and imm_val == 0 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x3b3a3938; immval:0x0
TEST_RI_OP(sm4ks, x10, x11, 0x0, 0x00000000, 0x0, 0x3b3a3938, x3, 796, x4)

inst_221:
// rs1_val == 0 and rs2_val == 0x37363534 and imm_val == 3 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x37363534; immval:0x3
TEST_RI_OP(sm4ks, x10, x11, 0x3, 0x00000000, 0x0, 0x37363534, x3, 800, x4)

inst_222:
// rs1_val == 0 and rs2_val == 0x37363534 and imm_val == 2 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x37363534; immval:0x2
TEST_RI_OP(sm4ks, x10, x11, 0x2, 0x00000000, 0x0, 0x37363534, x3, 804, x4)

inst_223:
// rs1_val == 0 and rs2_val == 0x37363534 and imm_val == 1 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x37363534; immval:0x1
TEST_RI_OP(sm4ks, x10, x11, 0x1, 0x00000000, 0x0, 0x37363534, x3, 808, x4)

inst_224:
// rs1_val == 0 and rs2_val == 0x37363534 and imm_val == 0 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x37363534; immval:0x0
TEST_RI_OP(sm4ks, x10, x11, 0x0, 0x00000000, 0x0, 0x37363534, x3, 812, x4)

inst_225:
// rs1_val == 0 and rs2_val == 0x33323130 and imm_val == 3 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x33323130; immval:0x3
TEST_RI_OP(sm4ks, x10, x11, 0x3, 0x00000000, 0x0, 0x33323130, x3, 816, x4)

inst_226:
// rs1_val == 0 and rs2_val == 0x33323130 and imm_val == 2 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x33323130; immval:0x2
TEST_RI_OP(sm4ks, x10, x11, 0x2, 0x00000000, 0x0, 0x33323130, x3, 820, x4)

inst_227:
// rs1_val == 0 and rs2_val == 0x33323130 and imm_val == 1 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x33323130; immval:0x1
TEST_RI_OP(sm4ks, x10, x11, 0x1, 0x00000000, 0x0, 0x33323130, x3, 824, x4)

inst_228:
// rs1_val == 0 and rs2_val == 0x33323130 and imm_val == 0 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x33323130; immval:0x0
TEST_RI_OP(sm4ks, x10, x11, 0x0, 0x00000000, 0x0, 0x33323130, x3, 828, x4)

inst_229:
// rs1_val == 0 and rs2_val == 0x2f2e2d2c and imm_val == 3 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x2f2e2d2c; immval:0x3
TEST_RI_OP(sm4ks, x10, x11, 0x3, 0x00000000, 0x0, 0x2f2e2d2c, x3, 832, x4)

inst_230:
// rs1_val == 0 and rs2_val == 0x2f2e2d2c and imm_val == 2 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x2f2e2d2c; immval:0x2
TEST_RI_OP(sm4ks, x10, x11, 0x2, 0x00000000, 0x0, 0x2f2e2d2c, x3, 836, x4)

inst_231:
// rs1_val == 0 and rs2_val == 0x2f2e2d2c and imm_val == 1 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x2f2e2d2c; immval:0x1
TEST_RI_OP(sm4ks, x10, x11, 0x1, 0x00000000, 0x0, 0x2f2e2d2c, x3, 840, x4)

inst_232:
// rs1_val == 0 and rs2_val == 0x2f2e2d2c and imm_val == 0 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x2f2e2d2c; immval:0x0
TEST_RI_OP(sm4ks, x10, x11, 0x0, 0x00000000, 0x0, 0x2f2e2d2c, x3, 844, x4)

inst_233:
// rs1_val == 0 and rs2_val == 0x2b2a2928 and imm_val == 3 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x2b2a2928; immval:0x3
TEST_RI_OP(sm4ks, x10, x11, 0x3, 0x00000000, 0x0, 0x2b2a2928, x3, 848, x4)

inst_234:
// rs1_val == 0 and rs2_val == 0x2b2a2928 and imm_val == 2 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x2b2a2928; immval:0x2
TEST_RI_OP(sm4ks, x10, x11, 0x2, 0x00000000, 0x0, 0x2b2a2928, x3, 852, x4)

inst_235:
// rs1_val == 0 and rs2_val == 0x2b2a2928 and imm_val == 1 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x2b2a2928; immval:0x1
TEST_RI_OP(sm4ks, x10, x11, 0x1, 0x00000000, 0x0, 0x2b2a2928, x3, 856, x4)

inst_236:
// rs1_val == 0 and rs2_val == 0x2b2a2928 and imm_val == 0 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x2b2a2928; immval:0x0
TEST_RI_OP(sm4ks, x10, x11, 0x0, 0x00000000, 0x0, 0x2b2a2928, x3, 860, x4)

inst_237:
// rs1_val == 0 and rs2_val == 0x27262524 and imm_val == 3 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x27262524; immval:0x3
TEST_RI_OP(sm4ks, x10, x11, 0x3, 0x00000000, 0x0, 0x27262524, x3, 864, x4)

inst_238:
// rs1_val == 0 and rs2_val == 0x27262524 and imm_val == 2 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x27262524; immval:0x2
TEST_RI_OP(sm4ks, x10, x11, 0x2, 0x00000000, 0x0, 0x27262524, x3, 868, x4)

inst_239:
// rs1_val == 0 and rs2_val == 0x27262524 and imm_val == 1 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x27262524; immval:0x1
TEST_RI_OP(sm4ks, x10, x11, 0x1, 0x00000000, 0x0, 0x27262524, x3, 872, x4)

inst_240:
// rs1_val == 0 and rs2_val == 0x27262524 and imm_val == 0 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x27262524; immval:0x0
TEST_RI_OP(sm4ks, x10, x11, 0x0, 0x00000000, 0x0, 0x27262524, x3, 876, x4)

inst_241:
// rs1_val == 0 and rs2_val == 0x23222120 and imm_val == 3 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x23222120; immval:0x3
TEST_RI_OP(sm4ks, x10, x11, 0x3, 0x00000000, 0x0, 0x23222120, x3, 880, x4)

inst_242:
// rs1_val == 0 and rs2_val == 0x23222120 and imm_val == 2 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x23222120; immval:0x2
TEST_RI_OP(sm4ks, x10, x11, 0x2, 0x00000000, 0x0, 0x23222120, x3, 884, x4)

inst_243:
// rs1_val == 0 and rs2_val == 0x23222120 and imm_val == 1 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x23222120; immval:0x1
TEST_RI_OP(sm4ks, x10, x11, 0x1, 0x00000000, 0x0, 0x23222120, x3, 888, x4)

inst_244:
// rs1_val == 0 and rs2_val == 0x23222120 and imm_val == 0 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x23222120; immval:0x0
TEST_RI_OP(sm4ks, x10, x11, 0x0, 0x00000000, 0x0, 0x23222120, x3, 892, x4)

inst_245:
// rs1_val == 0 and rs2_val == 0x1f1e1d1c and imm_val == 3 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x1f1e1d1c; immval:0x3
TEST_RI_OP(sm4ks, x10, x11, 0x3, 0x00000000, 0x0, 0x1f1e1d1c, x3, 896, x4)

inst_246:
// rs1_val == 0 and rs2_val == 0x1f1e1d1c and imm_val == 2 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x1f1e1d1c; immval:0x2
TEST_RI_OP(sm4ks, x10, x11, 0x2, 0x00000000, 0x0, 0x1f1e1d1c, x3, 900, x4)

inst_247:
// rs1_val == 0 and rs2_val == 0x1f1e1d1c and imm_val == 1 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x1f1e1d1c; immval:0x1
TEST_RI_OP(sm4ks, x10, x11, 0x1, 0x00000000, 0x0, 0x1f1e1d1c, x3, 904, x4)

inst_248:
// rs1_val == 0 and rs2_val == 0x1f1e1d1c and imm_val == 0 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x1f1e1d1c; immval:0x0
TEST_RI_OP(sm4ks, x10, x11, 0x0, 0x00000000, 0x0, 0x1f1e1d1c, x3, 908, x4)

inst_249:
// rs1_val == 0 and rs2_val == 0x1b1a1918 and imm_val == 3 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x1b1a1918; immval:0x3
TEST_RI_OP(sm4ks, x10, x11, 0x3, 0x00000000, 0x0, 0x1b1a1918, x3, 912, x4)

inst_250:
// rs1_val == 0 and rs2_val == 0x1b1a1918 and imm_val == 2 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x1b1a1918; immval:0x2
TEST_RI_OP(sm4ks, x10, x11, 0x2, 0x00000000, 0x0, 0x1b1a1918, x3, 916, x4)

inst_251:
// rs1_val == 0 and rs2_val == 0x1b1a1918 and imm_val == 1 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x1b1a1918; immval:0x1
TEST_RI_OP(sm4ks, x10, x11, 0x1, 0x00000000, 0x0, 0x1b1a1918, x3, 920, x4)

inst_252:
// rs1_val == 0 and rs2_val == 0x1b1a1918 and imm_val == 0 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x1b1a1918; immval:0x0
TEST_RI_OP(sm4ks, x10, x11, 0x0, 0x00000000, 0x0, 0x1b1a1918, x3, 924, x4)

inst_253:
// rs1_val == 0 and rs2_val == 0x17161514 and imm_val == 3 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x17161514; immval:0x3
TEST_RI_OP(sm4ks, x10, x11, 0x3, 0x00000000, 0x0, 0x17161514, x3, 928, x4)

inst_254:
// rs1_val == 0 and rs2_val == 0x17161514 and imm_val == 2 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x17161514; immval:0x2
TEST_RI_OP(sm4ks, x10, x11, 0x2, 0x00000000, 0x0, 0x17161514, x3, 932, x4)

inst_255:
// rs1_val == 0 and rs2_val == 0x17161514 and imm_val == 1 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x17161514; immval:0x1
TEST_RI_OP(sm4ks, x10, x11, 0x1, 0x00000000, 0x0, 0x17161514, x3, 936, x4)

inst_256:
// rs1_val == 0 and rs2_val == 0x17161514 and imm_val == 0 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x17161514; immval:0x0
TEST_RI_OP(sm4ks, x10, x11, 0x0, 0x00000000, 0x0, 0x17161514, x3, 940, x4)

inst_257:
// rs1_val == 0 and rs2_val == 0x13121110 and imm_val == 3 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x13121110; immval:0x3
TEST_RI_OP(sm4ks, x10, x11, 0x3, 0x00000000, 0x0, 0x13121110, x3, 944, x4)

inst_258:
// rs1_val == 0 and rs2_val == 0x13121110 and imm_val == 2 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x13121110; immval:0x2
TEST_RI_OP(sm4ks, x10, x11, 0x2, 0x00000000, 0x0, 0x13121110, x3, 948, x4)

inst_259:
// rs1_val == 0 and rs2_val == 0x13121110 and imm_val == 1 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x13121110; immval:0x1
TEST_RI_OP(sm4ks, x10, x11, 0x1, 0x00000000, 0x0, 0x13121110, x3, 952, x4)

inst_260:
// rs1_val == 0 and rs2_val == 0x13121110 and imm_val == 0 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x13121110; immval:0x0
TEST_RI_OP(sm4ks, x10, x11, 0x0, 0x00000000, 0x0, 0x13121110, x3, 956, x4)

inst_261:
// rs1_val == 0 and rs2_val == 0x0f0e0d0c and imm_val == 3 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0xf0e0d0c; immval:0x3
TEST_RI_OP(sm4ks, x10, x11, 0x3, 0x00000000, 0x0, 0xf0e0d0c, x3, 960, x4)

inst_262:
// rs1_val == 0 and rs2_val == 0x0f0e0d0c and imm_val == 2 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0xf0e0d0c; immval:0x2
TEST_RI_OP(sm4ks, x10, x11, 0x2, 0x00000000, 0x0, 0xf0e0d0c, x3, 964, x4)

inst_263:
// rs1_val == 0 and rs2_val == 0x0f0e0d0c and imm_val == 1 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0xf0e0d0c; immval:0x1
TEST_RI_OP(sm4ks, x10, x11, 0x1, 0x00000000, 0x0, 0xf0e0d0c, x3, 968, x4)

inst_264:
// rs1_val == 0 and rs2_val == 0x0f0e0d0c and imm_val == 0 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0xf0e0d0c; immval:0x0
TEST_RI_OP(sm4ks, x10, x11, 0x0, 0x00000000, 0x0, 0xf0e0d0c, x3, 972, x4)

inst_265:
// rs1_val == 0 and rs2_val == 0x0b0a0908 and imm_val == 3 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0xb0a0908; immval:0x3
TEST_RI_OP(sm4ks, x10, x11, 0x3, 0x00000000, 0x0, 0xb0a0908, x3, 976, x4)

inst_266:
// rs1_val == 0 and rs2_val == 0x0b0a0908 and imm_val == 2 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0xb0a0908; immval:0x2
TEST_RI_OP(sm4ks, x10, x11, 0x2, 0x00000000, 0x0, 0xb0a0908, x3, 980, x4)

inst_267:
// rs1_val == 0 and rs2_val == 0x0b0a0908 and imm_val == 1 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0xb0a0908; immval:0x1
TEST_RI_OP(sm4ks, x10, x11, 0x1, 0x00000000, 0x0, 0xb0a0908, x3, 984, x4)

inst_268:
// rs1_val == 0 and rs2_val == 0x0b0a0908 and imm_val == 0 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0xb0a0908; immval:0x0
TEST_RI_OP(sm4ks, x10, x11, 0x0, 0x00000000, 0x0, 0xb0a0908, x3, 988, x4)

inst_269:
// rs1_val == 0 and rs2_val == 0x07060504 and imm_val == 3 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x7060504; immval:0x3
TEST_RI_OP(sm4ks, x10, x11, 0x3, 0x00000000, 0x0, 0x7060504, x3, 992, x4)

inst_270:
// rs1_val == 0 and rs2_val == 0x07060504 and imm_val == 2 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x7060504; immval:0x2
TEST_RI_OP(sm4ks, x10, x11, 0x2, 0x00000000, 0x0, 0x7060504, x3, 996, x4)

inst_271:
// rs1_val == 0 and rs2_val == 0x07060504 and imm_val == 1 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x7060504; immval:0x1
TEST_RI_OP(sm4ks, x10, x11, 0x1, 0x00000000, 0x0, 0x7060504, x3, 1000, x4)

inst_272:
// rs1_val == 0 and rs2_val == 0x07060504 and imm_val == 0 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x7060504; immval:0x0
TEST_RI_OP(sm4ks, x10, x11, 0x0, 0x00000000, 0x0, 0x7060504, x3, 1004, x4)

inst_273:
// rs1_val == 0 and rs2_val == 0x03020100 and imm_val == 3 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x3020100; immval:0x3
TEST_RI_OP(sm4ks, x10, x11, 0x3, 0x00000000, 0x0, 0x3020100, x3, 1008, x4)

inst_274:
// rs1_val == 0 and rs2_val == 0x03020100 and imm_val == 2 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x3020100; immval:0x2
TEST_RI_OP(sm4ks, x10, x11, 0x2, 0x00000000, 0x0, 0x3020100, x3, 1012, x4)

inst_275:
// rs1_val == 0 and rs2_val == 0x03020100 and imm_val == 1 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x3020100; immval:0x1
TEST_RI_OP(sm4ks, x10, x11, 0x1, 0x00000000, 0x0, 0x3020100, x3, 1016, x4)

inst_276:
// rs1_val == 0 and rs2_val == 0x03020100 and imm_val == 0 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x0; op2val:0x3020100; immval:0x0
TEST_RI_OP(sm4ks, x10, x11, 0x0, 0x00000000, 0x0, 0x3020100, x3, 1020, x4)

inst_277:
// rs1_val == 0x7bcad7c4 and rs2_val == 0xc2f1c53e and imm_val == 0x0 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0x7bcad7c4; op2val:0xc2f1c53e; immval:0x0
TEST_RI_OP(sm4ks, x10, x11, 0x0, 0x00000000, 0x7bcad7c4, 0xc2f1c53e, x3, 1024, x4)

inst_278:
// rs1_val == 0xbb61a9cd and rs2_val == 0xccce240c and imm_val == 0x0 
// opcode: sm4ks; op1:x10; op2:x11; op1val:0xbb61a9cd; op2val:0xccce240c; immval:0x0
TEST_RI_OP(sm4ks, x10, x11, 0x0, 0x00000000, 0xbb61a9cd, 0xccce240c, x3, 1028, x4)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x2_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x2_1:
    .fill 21*(XLEN/32),4,0xdeadbeef


signature_x3_0:
    .fill 258*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
