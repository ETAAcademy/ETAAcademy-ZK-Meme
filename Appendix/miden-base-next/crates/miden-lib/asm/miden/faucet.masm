use.miden::kernel_proc_offsets

#! Mint an asset from the faucet the transaction is being executed against.
#!
#! Inputs:  [ASSET]
#! Outputs: [ASSET]
#!
#! Where:
#! - ASSET is the asset that was minted.
#!
#! Panics if:
#! - the transaction is not being executed against a faucet.
#! - the asset being minted is not associated with the faucet the transaction is being executed
#!   against.
#! - the asset is not well formed.
#! - for fungible faucets if the total issuance after minting is greater than the maximum amount
#!   allowed.
#! - for non-fungible faucets if the non-fungible asset being minted already exists.
#!
#! Invocation: exec
export.mint
    exec.kernel_proc_offsets::faucet_mint_asset_offset
    # => [offset, ASSET]

    # pad the stack
    push.0.0.0 movdn.7 movdn.7 movdn.7 padw padw swapdw
    # => [offset, ASSET, pad(11)]

    syscall.exec_kernel_proc
    # => [ASSET, pad(12)]

    # clean the stack
    swapdw dropw dropw swapw dropw
    # => [ASSET]
end

#! Burn an asset from the faucet the transaction is being executed against.
#!
#! Inputs:  [ASSET]
#! Outputs: [ASSET]
#!
#! Where:
#! - ASSET is the asset that was burned.
#!
#! Panics if:
#! - the transaction is not being executed against a faucet.
#! - the asset being burned is not associated with the faucet the transaction is being executed
#!   against.
#! - the asset is not well formed.
#! - for fungible faucets if the amount being burned is greater than the total input to the
#!   transaction.
#! - for non-fungible faucets if the non-fungible asset being burned does not exist or was not
#!   provided as input to the transaction via a note or the accounts vault.
#!
#! Invocation: exec
export.burn
    exec.kernel_proc_offsets::faucet_burn_asset_offset
    # => [offset, ASSET]

    # pad the stack
    push.0.0.0 movdn.7 movdn.7 movdn.7 padw padw swapdw
    # => [offset, ASSET, pad(11)]

    syscall.exec_kernel_proc
    # => [ASSET, pad(12)]

    # clean the stack
    swapdw dropw dropw swapw dropw
    # => [ASSET]
end

#! Returns the total issuance of the fungible faucet the transaction is being executed against.
#!
#! Inputs:  []
#! Outputs: [total_issuance]
#!
#! Where:
#! - total_issuance is the total issuance of the fungible faucet the transaction is being executed
#!   against.
#!
#! Panics if:
#! - the transaction is not being executed against a fungible faucet.
#!
#! Invocation: exec
export.get_total_issuance
    # pad the stack
    padw padw padw push.0.0.0
    # => [pad(15)]

    exec.kernel_proc_offsets::faucet_get_total_fungible_asset_issuance_offset
    # => [offset, pad(15)]

    syscall.exec_kernel_proc
    # => [total_issuance, pad(15)]

    # clean the stack
    swapdw dropw dropw swapw dropw movdn.3 drop drop drop
    # => [total_issuance]
end

#! Returns a boolean indicating whether the provided non-fungible asset has been already issued by
#! this faucet.
#!
#! Inputs:  [ASSET]
#! Outputs: [is_issued]
#!
#! Where:
#! - ASSET is the non-fungible asset that is being checked.
#! - is_issued is a boolean indicating whether the non-fungible asset has been issued.
#!
#! Panics if:
#! - the ASSET is a fungible asset.
#! - the ASSET is not associated with the faucet the transaction is being executed against.
#!
#! Invocation: exec
export.is_non_fungible_asset_issued
    exec.kernel_proc_offsets::faucet_is_non_fungible_asset_issued_offset
    # => [offset, ASSET]

    # pad the stack
    push.0.0.0 movdn.7 movdn.7 movdn.7 padw padw swapdw
    # => [offset, ASSET, pad(11)]

    syscall.exec_kernel_proc
    # => [is_issued, pad(15)]

    # clean the stack
    swapdw dropw dropw swapw dropw movdn.3 drop drop drop
    # => [total_issuance]
end
