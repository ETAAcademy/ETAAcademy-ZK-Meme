use.miden::kernel_proc_offsets
use.std::crypto::hashes::rpo
use.std::mem

#Â ERRORS
# =================================================================================================

# Note data does not match the commitment
const.ERR_NOTE_DATA_DOES_NOT_MATCH_COMMITMENT=0x00020103

# Number of note inputs exceeded the maximum limit of 128
const.ERR_PROLOGUE_NUMBER_OF_NOTE_INPUTS_EXCEEDED_LIMIT=0x0002004e

#! Writes the data currently on the advice stack into the memory at the specified location and
#! verifies that the hash of the written data is equal to the provided hash.
#!
#! Inputs:  [start_ptr, end_ptr, HASH]
#! Outputs: []
#!
#! Invocation: exec
proc.write_advice_data_to_memory
    # prepare the stack for reading from the advice stack
    padw padw padw
    # => [PAD, PAD, PAD, start_ptr, end_ptr, HASH]

    # read the data from advice stack to memory
    exec.mem::pipe_double_words_to_memory
    # => [PERM, PERM, PERM, end_ptr, HASH]

    # extract the digest
    exec.rpo::squeeze_digest
    # => [DIGEST, end_ptr, HASH]

    # drop pointer for reading from memory
    movup.4 drop
    # => [DIGEST, HASH]

    # assert the computed hash is equal to the expected hash
    assert_eqw.err=ERR_NOTE_DATA_DOES_NOT_MATCH_COMMITMENT
    # => []
end

#! Writes the assets of the currently executing note into memory starting at the specified address.
#!
#! Inputs:  [dest_ptr]
#! Outputs: [num_assets, dest_ptr]
#!
#! Where:
#! - dest_ptr is the memory address to write the assets.
#! - num_assets is the number of assets in the currently executing note.
#!
#! Invocation: exec
export.get_assets
    # pad the stack
    padw padw padw push.0.0.0
    # => [pad(15), dest_ptr]

    exec.kernel_proc_offsets::note_get_assets_info_offset
    # => [offset, pad(15), dest_ptr]

    syscall.exec_kernel_proc
    # => [ASSETS_HASH, num_assets, pad(11), dest_ptr]

    # clean the stack
    swapdw dropw dropw movup.7 movup.7 movup.7 drop drop drop
    # => [ASSETS_HASH, num_assets, dest_ptr]

    # load the asset data from the advice map to the advice stack
    adv.push_mapval
    # => [ASSETS_HASH, num_assets, dest_ptr]

    # calculate number of assets rounded up to an even number
    dup.4 dup is_odd add
    # => [even_num_assets, ASSETS_HASH, num_assets, dest_ptr]

    # calculate the start and end pointer for reading to memory
    mul.4 dup.6 add dup.6
    # => [start_ptr, end_ptr, ASSETS_HASH, num_assets, dest_ptr]

    # write the data from the advice stack into memory
    exec.write_advice_data_to_memory
    # => [num_assets, dest_ptr]
end

#! Loads the note's inputs to `dest_ptr`.
#!
#! Inputs:
#!   Stack: [dest_ptr]
#!   Advice Map: { INPUTS_COMMITMENT: [inputs_len, INPUTS] }
#! Outputs:
#!   Stack: [num_inputs, dest_ptr]
#!
#! Where:
#! - dest_ptr is the memory address to write the inputs.
#! - INPUTS_COMMITMENT, sequential hash of the padded note's inputs.
#! - inputs_len, the note's input count.
#! - INPUTS, the data corresponding to the note's inputs.
#!
#! Invocation: exec
export.get_inputs
    # pad the stack
    padw padw padw push.0.0.0
    # => [pad(15), dest_ptr]

    exec.kernel_proc_offsets::note_get_inputs_commitment_offset
    # => [offset, pad(15), dest_ptr]

    syscall.exec_kernel_proc
    # => [INPUTS_COMMITMENT, pad(12), dest_ptr]

    # clean the stack
    swapdw dropw dropw swapw dropw
    # => [INPUTS_COMMITMENT, dest_ptr]

    # load the inputs from the advice map to the advice stack
    adv.push_mapval
    # => [INPUTS_COMMITMENT, dest_ptr]

    adv_push.1
    # => [num_inputs, INPUTS_COMMITMENT, dest_ptr]

    # validate the input length
    dup exec.get_max_inputs_per_note lte
    assert.err=ERR_PROLOGUE_NUMBER_OF_NOTE_INPUTS_EXCEEDED_LIMIT
    # => [num_inputs, INPUTS_COMMITMENT, dest_ptr]

    # calculate the number of words required to store the inputs
    dup movdn.5 u32divmod.4 neq.0 add
    # => [num_words, INPUTS_COMMITMENT, num_inputs, dest_ptr]

    # round up the number of words the next multiple of 2
    dup is_odd add
    # => [even_num_words, INPUTS_COMMITMENT, num_inputs, dest_ptr]

    # calculate the start and end pointer for reading to memory
    mul.4 dup.6 add dup.6
    # => [start_ptr, end_ptr, INPUTS_COMMITMENT, num_inputs, dest_ptr]

    # check the input data matches the commitment, and write it to memory.
    exec.write_advice_data_to_memory
    # => [num_inputs, dest_ptr]
end

#! Returns the sender of the note currently being processed.
#!
#! Inputs:  []
#! Outputs: [sender_id_prefix, sender_id_suffix]
#!
#! Where:
#! - sender_{prefix,suffix} are the prefix and suffix felts of the sender of the note currently
#!   being processed.
#!
#! Panics if:
#! - no note is being processed.
#!
#! Invocation: exec
export.get_sender
    # pad the stack
    padw padw padw push.0.0.0
    # => [pad(15)]

    exec.kernel_proc_offsets::note_get_sender_offset
    # => [offset, pad(15)]

    syscall.exec_kernel_proc
    # => [sender, pad(15)]

    # clean the stack
    swapdw dropw dropw swapw dropw movdn.3 movdn.3 drop drop
    # => [sender_id_prefix, sender_id_suffix]
end

#! Returns the serial number of the note currently being processed.
#!
#! Inputs:  []
#! Outputs: [SERIAL_NUMBER]
#!
#! Where:
#! - SERIAL_NUMBER is the serial number of the note currently being processed.
#!
#! Panics if:
#! - no note is being processed.
#!
#! Invocation: exec
export.get_serial_number
    # pad the stack
    padw padw padw push.0.0.0
    # => [pad(15)]

    exec.kernel_proc_offsets::note_get_serial_number_offset
    # => [offset, pad(15)]

    syscall.exec_kernel_proc
    # => [SERIAL_NUMBER, pad(12)]

    # clean the stack
    swapdw dropw dropw swapw dropw
    # => [SERIAL_NUMBER]
end

#! Computes commitment to the note inputs starting at the specified memory address.
#!
#! This procedure checks that the provided number of inputs is within limits and then computes the
#! commitment.
#!
#! Notice that the note inputs are padded with zeros in case their number is not a multiple of 8.
#!
#! If the number if inputs is 0, procedure returns the empty word: [0, 0, 0, 0].
#!
#! Inputs:  [inputs_ptr, num_inputs]
#! Outputs: [COMMITMENT]
#!
#! Cycles:
#! - If number of elements divides by 8: 56 cycles + 3 * words
#! - Else: 189 cycles + 3 * words
#!
#! Panics if:
#! - inputs_ptr is not word-aligned (i.e., is not a multiple of 4).
#! - num_inputs is greater than 128.
#!
#! Invocation: exec
export.compute_inputs_commitment
    # check that number of inputs is less than 128
    dup.1 push.128 u32assert2 u32lte assert.err=ERR_PROLOGUE_NUMBER_OF_NOTE_INPUTS_EXCEEDED_LIMIT
    # => [inputs_ptr, num_inputs]

    # push 1 as the pad_inputs flag: we should pad the stack while computing the note inputs 
    # commitment
    push.1 movdn.2
    # => [inputs_ptr, num_inputs, pad_inputs_flag]
    exec.rpo::prepare_hasher_state

    exec.rpo::hash_memory_with_state
    # => [COMMITMENT]
end

#! Returns the script root of the note currently being processed.
#!
#! Inputs:  []
#! Outputs: [SCRIPT_ROOT]
#!
#! Where:
#! - SCRIPT_ROOT is the script root of the note currently being processed.
#!
#! Panics if:
#! - no note is being processed.
#!
#! Invocation: exec
export.get_script_root
    # pad the stack
    padw padw padw push.0.0.0
    # => [pad(15)]

    exec.kernel_proc_offsets::note_get_script_root_offset
    # => [offset, pad(15)]

    syscall.exec_kernel_proc
    # => [SCRIPT_ROOT, pad(12)]

    # clean the stack
    swapdw dropw dropw swapw dropw
    # => [SCRIPT_ROOT]
end

#! Returns the max allowed number of input values per note.
#!
#! Stack: []
#! Output: [max_inputs_per_note]
#!
#! - max_inputs_per_note is the max inputs per note.
export.::miden::util::note::get_max_inputs_per_note
