# Runs linting related jobs.

name: lint

# Limits workflow concurrency to only the latest commit in the PR.
concurrency:
  group: "${{ github.workflow }} @ ${{ github.event.pull_request.head.label || github.head_ref || github.ref }}"
  cancel-in-progress: true

on:
  push:
    branches: [main, next]
  pull_request:
    types: [opened, reopened, synchronize]

jobs:
  clippy:
    name: clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@main
      - uses: Swatinem/rust-cache@v2
        with:
          # Only update the cache on push onto the next branch. This strikes a nice balance between
          # cache hits and cache evictions (github has a 10GB cache limit). 
          save-if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/next' }}
      - name: Clippy
        run: |
          rustup update --no-self-update
          rustup component add clippy
          make clippy

  clippy-no-std:
    name: clippy no_std
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@main
      - uses: Swatinem/rust-cache@v2
        with:
          # Only update the cache on push onto the next branch. This strikes a nice balance between
          # cache hits and cache evictions (github has a 10GB cache limit). 
          save-if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/next' }}
      - name: Clippy no_std
        run: |
          rustup update --no-self-update
          rustup target add wasm32-unknown-unknown
          rustup component add clippy
          make clippy-no-std

  rustfmt:
    name: rustfmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@main
      - uses: Swatinem/rust-cache@v2
        with:
          # Only update the cache on push onto the next branch. This strikes a nice balance between
          # cache hits and cache evictions (github has a 10GB cache limit). 
          save-if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/next' }}
      - name: Rustfmt
        run: |
          rustup update --no-self-update nightly
          rustup +nightly component add rustfmt
          make format-check

  doc:
    name: doc
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@main
      - uses: Swatinem/rust-cache@v2
        with:
          # Only update the cache on push onto the next branch. This strikes a nice balance between
          # cache hits and cache evictions (github has a 10GB cache limit). 
          save-if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/next' }}
      - name: Build docs
        run: |
          rustup update --no-self-update
          make doc

  generated-files:
    name: generated files check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@main
      - name: Rustup
        run: rustup update --no-self-update
      - uses: Swatinem/rust-cache@v2
        with:
          save-if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/next' }}
      - name: Rebuild generated files in src
        run: BUILD_GENERATED_FILES_IN_SRC=1 make check
      - name: Diff check
        run: git diff --exit-code

  unused_deps:
    name: check for unused dependencies
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@main
      - name: Install cargo-machete
        uses: clechasseur/rs-cargo@v2
        with:
          command: install
          args: cargo-machete@0.7.0
      - name: Machete
        uses: clechasseur/rs-cargo@v2
        with:
          command: machete